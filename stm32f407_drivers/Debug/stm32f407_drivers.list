
stm32f407_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002268  08002268  00012268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002310  08002310  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002310  08002310  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002310  08002310  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002310  08002310  00012310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002314  08002314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          0000024c  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b0  200002b0  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001f05  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000078f  00000000  00000000  00021f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000268  00000000  00000000  00022728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000210  00000000  00000000  00022990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003555  00000000  00000000  00022ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000029cf  00000000  00000000  000260f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bb01  00000000  00000000  00028ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000345c5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000010d8  00000000  00000000  00034618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002250 	.word	0x08002250

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08002250 	.word	0x08002250

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <SPI2_GPIOInit>:

void delay(void){
	for (uint32_t i = 0; i < 500000/2; i++);
}

void SPI2_GPIOInit(){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIHandle;

	SPIHandle.pGPIOx = GPIOB;
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <SPI2_GPIOInit+0x58>)
 8000298:	607b      	str	r3, [r7, #4]
	SPIHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800029a:	2302      	movs	r3, #2
 800029c:	727b      	strb	r3, [r7, #9]
	SPIHandle.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800029e:	2300      	movs	r3, #0
 80002a0:	733b      	strb	r3, [r7, #12]
	SPIHandle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a2:	2300      	movs	r3, #0
 80002a4:	72fb      	strb	r3, [r7, #11]
	SPIHandle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002a6:	2302      	movs	r3, #2
 80002a8:	72bb      	strb	r3, [r7, #10]
	SPIHandle.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002aa:	2305      	movs	r3, #5
 80002ac:	737b      	strb	r3, [r7, #13]

	// SPI_NSS
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002ae:	230c      	movs	r3, #12
 80002b0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIHandle);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 faf1 	bl	800089c <GPIO_Init>

	// SPI_SCLK
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ba:	230d      	movs	r3, #13
 80002bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIHandle);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 faeb 	bl	800089c <GPIO_Init>

	// SPI_MISO
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002c6:	230e      	movs	r3, #14
 80002c8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIHandle);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fae5 	bl	800089c <GPIO_Init>

	// SPI_MOSI
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002d2:	230f      	movs	r3, #15
 80002d4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIHandle);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fadf 	bl	800089c <GPIO_Init>


}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40020400 	.word	0x40020400

080002ec <SPI2_Inits>:

void SPI2_Inits(){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0

	SPI2Handle.pSPIx = SPI2;
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <SPI2_Inits+0x40>)
 80002f2:	4a0f      	ldr	r2, [pc, #60]	; (8000330 <SPI2_Inits+0x44>)
 80002f4:	601a      	str	r2, [r3, #0]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_MODE_MASTER;
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <SPI2_Inits+0x40>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	711a      	strb	r2, [r3, #4]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_FULL_DUPLEX;
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <SPI2_Inits+0x40>)
 80002fe:	2200      	movs	r2, #0
 8000300:	715a      	strb	r2, [r3, #5]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32; // generates a clock of 2MHz
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <SPI2_Inits+0x40>)
 8000304:	2204      	movs	r2, #4
 8000306:	719a      	strb	r2, [r3, #6]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8_BITS;
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <SPI2_Inits+0x40>)
 800030a:	2200      	movs	r2, #0
 800030c:	71da      	strb	r2, [r3, #7]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <SPI2_Inits+0x40>)
 8000310:	2200      	movs	r2, #0
 8000312:	721a      	strb	r2, [r3, #8]
	SPI2Handle.SPIConfig.SPI_CPAH = SPI_CPAH_1ST_EDGE;
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <SPI2_Inits+0x40>)
 8000316:	2200      	movs	r2, #0
 8000318:	725a      	strb	r2, [r3, #9]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DISABLE; // Hardware slave management enabled for NSS pin
 800031a:	4b04      	ldr	r3, [pc, #16]	; (800032c <SPI2_Inits+0x40>)
 800031c:	2200      	movs	r2, #0
 800031e:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2Handle);
 8000320:	4802      	ldr	r0, [pc, #8]	; (800032c <SPI2_Inits+0x40>)
 8000322:	f000 fd63 	bl	8000dec <SPI_Init>

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000080 	.word	0x20000080
 8000330:	40003800 	.word	0x40003800

08000334 <Slave_GPIO_InterruptPinInit>:

void Slave_GPIO_InterruptPinInit(){
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIHandle;
	memset(&SPIHandle,0,sizeof(SPIHandle));
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	220c      	movs	r2, #12
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fff7 	bl	8001334 <memset>

	SPIHandle.pGPIOx = GPIOD;
 8000346:	4b0d      	ldr	r3, [pc, #52]	; (800037c <Slave_GPIO_InterruptPinInit+0x48>)
 8000348:	607b      	str	r3, [r7, #4]
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800034a:	2306      	movs	r3, #6
 800034c:	723b      	strb	r3, [r7, #8]
	SPIHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800034e:	2304      	movs	r3, #4
 8000350:	727b      	strb	r3, [r7, #9]
	SPIHandle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000352:	2301      	movs	r3, #1
 8000354:	72fb      	strb	r3, [r7, #11]
	SPIHandle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000356:	2300      	movs	r3, #0
 8000358:	72bb      	strb	r3, [r7, #10]

	GPIO_Init(&SPIHandle);
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fa9d 	bl	800089c <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRI15);
 8000362:	210f      	movs	r1, #15
 8000364:	2017      	movs	r0, #23
 8000366:	f000 fca1 	bl	8000cac <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 800036a:	2101      	movs	r1, #1
 800036c:	2017      	movs	r0, #23
 800036e:	f000 fc1d 	bl	8000bac <GPIO_IRQInterruptConfig>
}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40020c00 	.word	0x40020c00

08000380 <main>:


int main(){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

	uint8_t dummy_write = 0xFF; // for 16bit DFF we have to use 2 bytes 0xFFFF
 8000386:	23ff      	movs	r3, #255	; 0xff
 8000388:	71fb      	strb	r3, [r7, #7]

	/* Initialise pin working in an interrupt mode */
	Slave_GPIO_InterruptPinInit();
 800038a:	f7ff ffd3 	bl	8000334 <Slave_GPIO_InterruptPinInit>

	/* Initialise GPIO pins to behave as SPI pin */
	SPI2_GPIOInit();
 800038e:	f7ff ff7f 	bl	8000290 <SPI2_GPIOInit>

	/* Configure SPI2 pins */
	SPI2_Inits();
 8000392:	f7ff ffab 	bl	80002ec <SPI2_Inits>

	/* Enable SSOE bit */
	SPI2_SSOE_ENDI(ENABLE);
 8000396:	4b28      	ldr	r3, [pc, #160]	; (8000438 <main+0xb8>)
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	4a27      	ldr	r2, [pc, #156]	; (8000438 <main+0xb8>)
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	6053      	str	r3, [r2, #4]

	/* Configure SPI interrupt */
	SPI_IRQInterruptConfig(IRQ_NO_SPI2, ENABLE);
 80003a2:	2101      	movs	r1, #1
 80003a4:	2024      	movs	r0, #36	; 0x24
 80003a6:	f000 fdab 	bl	8000f00 <SPI_IRQInterruptConfig>

	while(1){

		rcvStop = 0;
 80003aa:	4b24      	ldr	r3, [pc, #144]	; (800043c <main+0xbc>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); // wait until Master receive an Interrupt from Slave
 80003b0:	bf00      	nop
 80003b2:	4b23      	ldr	r3, [pc, #140]	; (8000440 <main+0xc0>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d0fa      	beq.n	80003b2 <main+0x32>

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, DISABLE); // Disable further interrupts from Slave device
 80003bc:	2100      	movs	r1, #0
 80003be:	2017      	movs	r0, #23
 80003c0:	f000 fbf4 	bl	8000bac <GPIO_IRQInterruptConfig>

		SPI2_CONTROL(ENABLE);
 80003c4:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <main+0xb8>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a1b      	ldr	r2, [pc, #108]	; (8000438 <main+0xb8>)
 80003ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ce:	6013      	str	r3, [r2, #0]

		while(!rcvStop){
 80003d0:	e012      	b.n	80003f8 <main+0x78>

			while ( SPI_SendDataIT(&SPI2Handle, &dummy_write, 1) == SPI_BUSY_IN_TX );
 80003d2:	bf00      	nop
 80003d4:	1dfb      	adds	r3, r7, #7
 80003d6:	2201      	movs	r2, #1
 80003d8:	4619      	mov	r1, r3
 80003da:	481a      	ldr	r0, [pc, #104]	; (8000444 <main+0xc4>)
 80003dc:	f000 fe10 	bl	8001000 <SPI_SendDataIT>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b02      	cmp	r3, #2
 80003e4:	d0f6      	beq.n	80003d4 <main+0x54>
			while ( SPI_ReceiveDataIT(&SPI2Handle, &ReadByte, 1) == SPI_BUSY_IN_RX );
 80003e6:	bf00      	nop
 80003e8:	2201      	movs	r2, #1
 80003ea:	4917      	ldr	r1, [pc, #92]	; (8000448 <main+0xc8>)
 80003ec:	4815      	ldr	r0, [pc, #84]	; (8000444 <main+0xc4>)
 80003ee:	f000 fe2a 	bl	8001046 <SPI_ReceiveDataIT>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d0f7      	beq.n	80003e8 <main+0x68>
		while(!rcvStop){
 80003f8:	4b10      	ldr	r3, [pc, #64]	; (800043c <main+0xbc>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0e7      	beq.n	80003d2 <main+0x52>

		}

		/* Confirm that SPI is not busy and all the data is transferred */
		while( SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG) );
 8000402:	bf00      	nop
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	480c      	ldr	r0, [pc, #48]	; (8000438 <main+0xb8>)
 8000408:	f000 fd64 	bl	8000ed4 <SPI_GetFlagStatus>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d1f8      	bne.n	8000404 <main+0x84>

		/* Disable SPI2 peripheral */
		SPI2_CONTROL(DISABLE);
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <main+0xb8>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a08      	ldr	r2, [pc, #32]	; (8000438 <main+0xb8>)
 8000418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800041c:	6013      	str	r3, [r2, #0]

		printf("Rcvd data = %s\n", RcvBuff);
 800041e:	490b      	ldr	r1, [pc, #44]	; (800044c <main+0xcc>)
 8000420:	480b      	ldr	r0, [pc, #44]	; (8000450 <main+0xd0>)
 8000422:	f000 ff8f 	bl	8001344 <iprintf>

		dataAvailable = 0;
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <main+0xc0>)
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 800042c:	2101      	movs	r1, #1
 800042e:	2017      	movs	r0, #23
 8000430:	f000 fbbc 	bl	8000bac <GPIO_IRQInterruptConfig>
		rcvStop = 0;
 8000434:	e7b9      	b.n	80003aa <main+0x2a>
 8000436:	bf00      	nop
 8000438:	40003800 	.word	0x40003800
 800043c:	20000295 	.word	0x20000295
 8000440:	20000296 	.word	0x20000296
 8000444:	20000080 	.word	0x20000080
 8000448:	20000294 	.word	0x20000294
 800044c:	200000a0 	.word	0x200000a0
 8000450:	08002268 	.word	0x08002268

08000454 <SPI_ApplicationEventCallback>:
	}

	return 0;
}

void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEv){
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	70fb      	strb	r3, [r7, #3]

	static uint32_t i = 0;

	if (AppEv == SPI_EVENT_RX_CMPLT){
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	2b02      	cmp	r3, #2
 8000464:	d11f      	bne.n	80004a6 <SPI_ApplicationEventCallback+0x52>
		RcvBuff[i++] = ReadByte; 			// "i" increase its value after this line is executed
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <SPI_ApplicationEventCallback+0x5c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	1c5a      	adds	r2, r3, #1
 800046c:	4910      	ldr	r1, [pc, #64]	; (80004b0 <SPI_ApplicationEventCallback+0x5c>)
 800046e:	600a      	str	r2, [r1, #0]
 8000470:	4a10      	ldr	r2, [pc, #64]	; (80004b4 <SPI_ApplicationEventCallback+0x60>)
 8000472:	7812      	ldrb	r2, [r2, #0]
 8000474:	b2d1      	uxtb	r1, r2
 8000476:	4a10      	ldr	r2, [pc, #64]	; (80004b8 <SPI_ApplicationEventCallback+0x64>)
 8000478:	54d1      	strb	r1, [r2, r3]
		if (ReadByte == '\0' || (i == MAX_LEN)){
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <SPI_ApplicationEventCallback+0x60>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	2b00      	cmp	r3, #0
 8000482:	d004      	beq.n	800048e <SPI_ApplicationEventCallback+0x3a>
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <SPI_ApplicationEventCallback+0x5c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800048c:	d10b      	bne.n	80004a6 <SPI_ApplicationEventCallback+0x52>
			rcvStop = 1;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <SPI_ApplicationEventCallback+0x68>)
 8000490:	2201      	movs	r2, #1
 8000492:	701a      	strb	r2, [r3, #0]
			RcvBuff[i-1] = '\0';
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <SPI_ApplicationEventCallback+0x5c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	3b01      	subs	r3, #1
 800049a:	4a07      	ldr	r2, [pc, #28]	; (80004b8 <SPI_ApplicationEventCallback+0x64>)
 800049c:	2100      	movs	r1, #0
 800049e:	54d1      	strb	r1, [r2, r3]
			i = 0;
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <SPI_ApplicationEventCallback+0x5c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
		}
	}
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	20000298 	.word	0x20000298
 80004b4:	20000294 	.word	0x20000294
 80004b8:	200000a0 	.word	0x200000a0
 80004bc:	20000295 	.word	0x20000295

080004c0 <SPI2_IRQHandler>:

/* Runs when a data byte is received from the peripheral over SPI */
void SPI2_IRQHandler(void){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	SPI_IRQHandling(&SPI2Handle);
 80004c4:	4802      	ldr	r0, [pc, #8]	; (80004d0 <SPI2_IRQHandler+0x10>)
 80004c6:	f000 fde1 	bl	800108c <SPI_IRQHandling>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000080 	.word	0x20000080

080004d4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_6);
 80004d8:	2006      	movs	r0, #6
 80004da:	f000 fc0f 	bl	8000cfc <GPIO_IRQHandling>
	dataAvailable = 1;
 80004de:	4b02      	ldr	r3, [pc, #8]	; (80004e8 <EXTI9_5_IRQHandler+0x14>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	701a      	strb	r2, [r3, #0]
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000296 	.word	0x20000296

080004ec <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <ITM_SendChar+0x44>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <ITM_SendChar+0x44>)
 80004fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000500:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <ITM_SendChar+0x48>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <ITM_SendChar+0x48>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800050e:	bf00      	nop
 8000510:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	2b00      	cmp	r3, #0
 800051c:	d0f8      	beq.n	8000510 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800051e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	6013      	str	r3, [r2, #0]
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	e000edfc 	.word	0xe000edfc
 8000534:	e0000e00 	.word	0xe0000e00

08000538 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	e00a      	b.n	8000560 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800054a:	f3af 8000 	nop.w
 800054e:	4601      	mov	r1, r0
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	60ba      	str	r2, [r7, #8]
 8000556:	b2ca      	uxtb	r2, r1
 8000558:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	3301      	adds	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	697a      	ldr	r2, [r7, #20]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	429a      	cmp	r2, r3
 8000566:	dbf0      	blt.n	800054a <_read+0x12>
  }

  return len;
 8000568:	687b      	ldr	r3, [r7, #4]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3718      	adds	r7, #24
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b086      	sub	sp, #24
 8000576:	af00      	add	r7, sp, #0
 8000578:	60f8      	str	r0, [r7, #12]
 800057a:	60b9      	str	r1, [r7, #8]
 800057c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
 8000582:	e009      	b.n	8000598 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	60ba      	str	r2, [r7, #8]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ffad 	bl	80004ec <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	3301      	adds	r3, #1
 8000596:	617b      	str	r3, [r7, #20]
 8000598:	697a      	ldr	r2, [r7, #20]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	429a      	cmp	r2, r3
 800059e:	dbf1      	blt.n	8000584 <_write+0x12>
  }
  return len;
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <_close>:

int _close(int file)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005d0:	605a      	str	r2, [r3, #4]
  return 0;
 80005d2:	2300      	movs	r3, #0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr

080005de <_isatty>:

int _isatty(int file)
{
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005e6:	2301      	movs	r3, #1
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr

080005f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005f2:	b480      	push	{r7}
 80005f4:	b085      	sub	sp, #20
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	4618      	mov	r0, r3
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
	...

0800060c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000614:	4a14      	ldr	r2, [pc, #80]	; (8000668 <_sbrk+0x5c>)
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <_sbrk+0x60>)
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <_sbrk+0x64>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d102      	bne.n	800062e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <_sbrk+0x64>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <_sbrk+0x68>)
 800062c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <_sbrk+0x64>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	693a      	ldr	r2, [r7, #16]
 8000638:	429a      	cmp	r2, r3
 800063a:	d207      	bcs.n	800064c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800063c:	f000 fe50 	bl	80012e0 <__errno>
 8000640:	4603      	mov	r3, r0
 8000642:	220c      	movs	r2, #12
 8000644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	e009      	b.n	8000660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <_sbrk+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <_sbrk+0x64>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	4a05      	ldr	r2, [pc, #20]	; (8000670 <_sbrk+0x64>)
 800065c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800065e:	68fb      	ldr	r3, [r7, #12]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20020000 	.word	0x20020000
 800066c:	00000400 	.word	0x00000400
 8000670:	2000029c 	.word	0x2000029c
 8000674:	200002b0 	.word	0x200002b0

08000678 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800067a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800067c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000682:	490d      	ldr	r1, [pc, #52]	; (80006b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000684:	4a0d      	ldr	r2, [pc, #52]	; (80006bc <LoopForever+0xe>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000688:	e002      	b.n	8000690 <LoopCopyDataInit>

0800068a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800068c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068e:	3304      	adds	r3, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000694:	d3f9      	bcc.n	800068a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000698:	4c0a      	ldr	r4, [pc, #40]	; (80006c4 <LoopForever+0x16>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800069c:	e001      	b.n	80006a2 <LoopFillZerobss>

0800069e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a0:	3204      	adds	r2, #4

080006a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a4:	d3fb      	bcc.n	800069e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006a6:	f000 fe21 	bl	80012ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006aa:	f7ff fe69 	bl	8000380 <main>

080006ae <LoopForever>:

LoopForever:
  b LoopForever
 80006ae:	e7fe      	b.n	80006ae <LoopForever>
  ldr   r0, =_estack
 80006b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006bc:	08002318 	.word	0x08002318
  ldr r2, =_sbss
 80006c0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006c4:	200002b0 	.word	0x200002b0

080006c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c8:	e7fe      	b.n	80006c8 <ADC_IRQHandler>
	...

080006cc <GPIO_PeriClockControl>:
 * @return 			- none
 *
 * @Note			- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d162      	bne.n	80007a4 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA) {
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a64      	ldr	r2, [pc, #400]	; (8000874 <GPIO_PeriClockControl+0x1a8>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d106      	bne.n	80006f4 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80006e6:	4b64      	ldr	r3, [pc, #400]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a63      	ldr	r2, [pc, #396]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		}else if(pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}
}
 80006f2:	e0b9      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB) {
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a61      	ldr	r2, [pc, #388]	; (800087c <GPIO_PeriClockControl+0x1b0>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d106      	bne.n	800070a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80006fc:	4b5e      	ldr	r3, [pc, #376]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000700:	4a5d      	ldr	r2, [pc, #372]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 8000702:	f043 0302 	orr.w	r3, r3, #2
 8000706:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000708:	e0ae      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC) {
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a5c      	ldr	r2, [pc, #368]	; (8000880 <GPIO_PeriClockControl+0x1b4>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d106      	bne.n	8000720 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000712:	4b59      	ldr	r3, [pc, #356]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a58      	ldr	r2, [pc, #352]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800071e:	e0a3      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD) {
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a58      	ldr	r2, [pc, #352]	; (8000884 <GPIO_PeriClockControl+0x1b8>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d106      	bne.n	8000736 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000728:	4b53      	ldr	r3, [pc, #332]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 800072a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072c:	4a52      	ldr	r2, [pc, #328]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 800072e:	f043 0308 	orr.w	r3, r3, #8
 8000732:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000734:	e098      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE) {
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a53      	ldr	r2, [pc, #332]	; (8000888 <GPIO_PeriClockControl+0x1bc>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d106      	bne.n	800074c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800073e:	4b4e      	ldr	r3, [pc, #312]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a4d      	ldr	r2, [pc, #308]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
}
 800074a:	e08d      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a4f      	ldr	r2, [pc, #316]	; (800088c <GPIO_PeriClockControl+0x1c0>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d106      	bne.n	8000762 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000754:	4b48      	ldr	r3, [pc, #288]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000758:	4a47      	ldr	r2, [pc, #284]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 800075a:	f043 0320 	orr.w	r3, r3, #32
 800075e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000760:	e082      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG) {
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a4a      	ldr	r2, [pc, #296]	; (8000890 <GPIO_PeriClockControl+0x1c4>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d106      	bne.n	8000778 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800076a:	4b43      	ldr	r3, [pc, #268]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a42      	ldr	r2, [pc, #264]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 8000770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000776:	e077      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH) {
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a46      	ldr	r2, [pc, #280]	; (8000894 <GPIO_PeriClockControl+0x1c8>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d106      	bne.n	800078e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000780:	4b3d      	ldr	r3, [pc, #244]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 8000782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000784:	4a3c      	ldr	r2, [pc, #240]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 8000786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800078c:	e06c      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI) {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a41      	ldr	r2, [pc, #260]	; (8000898 <GPIO_PeriClockControl+0x1cc>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d168      	bne.n	8000868 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000796:	4b38      	ldr	r3, [pc, #224]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a37      	ldr	r2, [pc, #220]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 800079c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007a2:	e061      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a33      	ldr	r2, [pc, #204]	; (8000874 <GPIO_PeriClockControl+0x1a8>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d106      	bne.n	80007ba <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80007ac:	4b32      	ldr	r3, [pc, #200]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	4a31      	ldr	r2, [pc, #196]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 80007b2:	f023 0301 	bic.w	r3, r3, #1
 80007b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007b8:	e056      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB) {
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a2f      	ldr	r2, [pc, #188]	; (800087c <GPIO_PeriClockControl+0x1b0>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d106      	bne.n	80007d0 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a2c      	ldr	r2, [pc, #176]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 80007c8:	f023 0302 	bic.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ce:	e04b      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a2b      	ldr	r2, [pc, #172]	; (8000880 <GPIO_PeriClockControl+0x1b4>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d106      	bne.n	80007e6 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80007d8:	4b27      	ldr	r3, [pc, #156]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a26      	ldr	r2, [pc, #152]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 80007de:	f023 0304 	bic.w	r3, r3, #4
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007e4:	e040      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD) {
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a26      	ldr	r2, [pc, #152]	; (8000884 <GPIO_PeriClockControl+0x1b8>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d106      	bne.n	80007fc <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80007ee:	4b22      	ldr	r3, [pc, #136]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a21      	ldr	r2, [pc, #132]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 80007f4:	f023 0308 	bic.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007fa:	e035      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a22      	ldr	r2, [pc, #136]	; (8000888 <GPIO_PeriClockControl+0x1bc>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d106      	bne.n	8000812 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000808:	4a1b      	ldr	r2, [pc, #108]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 800080a:	f023 0310 	bic.w	r3, r3, #16
 800080e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000810:	e02a      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF) {
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a1d      	ldr	r2, [pc, #116]	; (800088c <GPIO_PeriClockControl+0x1c0>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d106      	bne.n	8000828 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 8000820:	f023 0320 	bic.w	r3, r3, #32
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000826:	e01f      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a19      	ldr	r2, [pc, #100]	; (8000890 <GPIO_PeriClockControl+0x1c4>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d106      	bne.n	800083e <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	4a10      	ldr	r2, [pc, #64]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 8000836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800083a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800083c:	e014      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH) {
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a14      	ldr	r2, [pc, #80]	; (8000894 <GPIO_PeriClockControl+0x1c8>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d106      	bne.n	8000854 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 800084c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000852:	e009      	b.n	8000868 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI) {
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a10      	ldr	r2, [pc, #64]	; (8000898 <GPIO_PeriClockControl+0x1cc>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d105      	bne.n	8000868 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	4a05      	ldr	r2, [pc, #20]	; (8000878 <GPIO_PeriClockControl+0x1ac>)
 8000862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000866:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40020000 	.word	0x40020000
 8000878:	40023800 	.word	0x40023800
 800087c:	40020400 	.word	0x40020400
 8000880:	40020800 	.word	0x40020800
 8000884:	40020c00 	.word	0x40020c00
 8000888:	40021000 	.word	0x40021000
 800088c:	40021400 	.word	0x40021400
 8000890:	40021800 	.word	0x40021800
 8000894:	40021c00 	.word	0x40021c00
 8000898:	40022000 	.word	0x40022000

0800089c <GPIO_Init>:
 * @return 			- none
 *
 * @Note			- none
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0; // temp register
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
	uint8_t tmp_PinNumber = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	791b      	ldrb	r3, [r3, #4]
 80008ac:	74fb      	strb	r3, [r7, #19]
	uint8_t tmp_PinMode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	795b      	ldrb	r3, [r3, #5]
 80008b2:	74bb      	strb	r3, [r7, #18]

	/* Enable the peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx,ENABLE);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2101      	movs	r1, #1
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff06 	bl	80006cc <GPIO_PeriClockControl>

	/* 1. Configure the mode of the gpio pin */
	if (tmp_PinMode <= GPIO_MODE_ANALOG){
 80008c0:	7cbb      	ldrb	r3, [r7, #18]
 80008c2:	2b03      	cmp	r3, #3
 80008c4:	d81c      	bhi.n	8000900 <GPIO_Init+0x64>
		temp = (tmp_PinMode << (2 * tmp_PinNumber));
 80008c6:	7cba      	ldrb	r2, [r7, #18]
 80008c8:	7cfb      	ldrb	r3, [r7, #19]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * tmp_PinNumber));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	7cfb      	ldrb	r3, [r7, #19]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	2103      	movs	r1, #3
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	4619      	mov	r1, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	400a      	ands	r2, r1
 80008ec:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	6819      	ldr	r1, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	430a      	orrs	r2, r1
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	e0aa      	b.n	8000a56 <GPIO_Init+0x1ba>
	}else{
		// this is interrupt mode
		if (tmp_PinMode <= GPIO_MODE_IT_FT){
 8000900:	7cbb      	ldrb	r3, [r7, #18]
 8000902:	2b04      	cmp	r3, #4
 8000904:	d815      	bhi.n	8000932 <GPIO_Init+0x96>
			// 1. Configure the FTSR (Falling trigger selection register)
			EXTI->FTSR |= (1 << tmp_PinNumber);
 8000906:	4b9e      	ldr	r3, [pc, #632]	; (8000b80 <GPIO_Init+0x2e4>)
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	7cfa      	ldrb	r2, [r7, #19]
 800090c:	2101      	movs	r1, #1
 800090e:	fa01 f202 	lsl.w	r2, r1, r2
 8000912:	4611      	mov	r1, r2
 8000914:	4a9a      	ldr	r2, [pc, #616]	; (8000b80 <GPIO_Init+0x2e4>)
 8000916:	430b      	orrs	r3, r1
 8000918:	60d3      	str	r3, [r2, #12]
			// 1.1 To make sure Rising edge detection is not set, we cleared it.
			EXTI->RTSR &= ~(1 << tmp_PinNumber);
 800091a:	4b99      	ldr	r3, [pc, #612]	; (8000b80 <GPIO_Init+0x2e4>)
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	7cfa      	ldrb	r2, [r7, #19]
 8000920:	2101      	movs	r1, #1
 8000922:	fa01 f202 	lsl.w	r2, r1, r2
 8000926:	43d2      	mvns	r2, r2
 8000928:	4611      	mov	r1, r2
 800092a:	4a95      	ldr	r2, [pc, #596]	; (8000b80 <GPIO_Init+0x2e4>)
 800092c:	400b      	ands	r3, r1
 800092e:	6093      	str	r3, [r2, #8]
 8000930:	e02f      	b.n	8000992 <GPIO_Init+0xf6>

		}else if(tmp_PinMode <= GPIO_MODE_IT_RT){
 8000932:	7cbb      	ldrb	r3, [r7, #18]
 8000934:	2b05      	cmp	r3, #5
 8000936:	d815      	bhi.n	8000964 <GPIO_Init+0xc8>
			// 1. Configure the RTSR (Rising trigger selection register)
			EXTI->RTSR |= (1 << tmp_PinNumber);
 8000938:	4b91      	ldr	r3, [pc, #580]	; (8000b80 <GPIO_Init+0x2e4>)
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	7cfa      	ldrb	r2, [r7, #19]
 800093e:	2101      	movs	r1, #1
 8000940:	fa01 f202 	lsl.w	r2, r1, r2
 8000944:	4611      	mov	r1, r2
 8000946:	4a8e      	ldr	r2, [pc, #568]	; (8000b80 <GPIO_Init+0x2e4>)
 8000948:	430b      	orrs	r3, r1
 800094a:	6093      	str	r3, [r2, #8]
			// 1.1 To make sure Falling edge detection is not set, we cleared it.
			EXTI->FTSR &= ~(1 << tmp_PinNumber);
 800094c:	4b8c      	ldr	r3, [pc, #560]	; (8000b80 <GPIO_Init+0x2e4>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	7cfa      	ldrb	r2, [r7, #19]
 8000952:	2101      	movs	r1, #1
 8000954:	fa01 f202 	lsl.w	r2, r1, r2
 8000958:	43d2      	mvns	r2, r2
 800095a:	4611      	mov	r1, r2
 800095c:	4a88      	ldr	r2, [pc, #544]	; (8000b80 <GPIO_Init+0x2e4>)
 800095e:	400b      	ands	r3, r1
 8000960:	60d3      	str	r3, [r2, #12]
 8000962:	e016      	b.n	8000992 <GPIO_Init+0xf6>

		}else if (tmp_PinMode <= GPIO_MODE_IT_RFT){
 8000964:	7cbb      	ldrb	r3, [r7, #18]
 8000966:	2b06      	cmp	r3, #6
 8000968:	d813      	bhi.n	8000992 <GPIO_Init+0xf6>
			// 1. Configure both RSTR and FTSR
			EXTI->RTSR |= (1 << tmp_PinNumber);
 800096a:	4b85      	ldr	r3, [pc, #532]	; (8000b80 <GPIO_Init+0x2e4>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	7cfa      	ldrb	r2, [r7, #19]
 8000970:	2101      	movs	r1, #1
 8000972:	fa01 f202 	lsl.w	r2, r1, r2
 8000976:	4611      	mov	r1, r2
 8000978:	4a81      	ldr	r2, [pc, #516]	; (8000b80 <GPIO_Init+0x2e4>)
 800097a:	430b      	orrs	r3, r1
 800097c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << tmp_PinNumber);
 800097e:	4b80      	ldr	r3, [pc, #512]	; (8000b80 <GPIO_Init+0x2e4>)
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	7cfa      	ldrb	r2, [r7, #19]
 8000984:	2101      	movs	r1, #1
 8000986:	fa01 f202 	lsl.w	r2, r1, r2
 800098a:	4611      	mov	r1, r2
 800098c:	4a7c      	ldr	r2, [pc, #496]	; (8000b80 <GPIO_Init+0x2e4>)
 800098e:	430b      	orrs	r3, r1
 8000990:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = tmp_PinNumber / 4;
 8000992:	7cfb      	ldrb	r3, [r7, #19]
 8000994:	089b      	lsrs	r3, r3, #2
 8000996:	747b      	strb	r3, [r7, #17]
		uint8_t temp2 = tmp_PinNumber % 4;
 8000998:	7cfb      	ldrb	r3, [r7, #19]
 800099a:	f003 0303 	and.w	r3, r3, #3
 800099e:	743b      	strb	r3, [r7, #16]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a77      	ldr	r2, [pc, #476]	; (8000b84 <GPIO_Init+0x2e8>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d032      	beq.n	8000a10 <GPIO_Init+0x174>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a76      	ldr	r2, [pc, #472]	; (8000b88 <GPIO_Init+0x2ec>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d02b      	beq.n	8000a0c <GPIO_Init+0x170>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a74      	ldr	r2, [pc, #464]	; (8000b8c <GPIO_Init+0x2f0>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d024      	beq.n	8000a08 <GPIO_Init+0x16c>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a73      	ldr	r2, [pc, #460]	; (8000b90 <GPIO_Init+0x2f4>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d01d      	beq.n	8000a04 <GPIO_Init+0x168>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a71      	ldr	r2, [pc, #452]	; (8000b94 <GPIO_Init+0x2f8>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d016      	beq.n	8000a00 <GPIO_Init+0x164>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a70      	ldr	r2, [pc, #448]	; (8000b98 <GPIO_Init+0x2fc>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d00f      	beq.n	80009fc <GPIO_Init+0x160>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a6e      	ldr	r2, [pc, #440]	; (8000b9c <GPIO_Init+0x300>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d008      	beq.n	80009f8 <GPIO_Init+0x15c>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a6d      	ldr	r2, [pc, #436]	; (8000ba0 <GPIO_Init+0x304>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d101      	bne.n	80009f4 <GPIO_Init+0x158>
 80009f0:	2307      	movs	r3, #7
 80009f2:	e00e      	b.n	8000a12 <GPIO_Init+0x176>
 80009f4:	2300      	movs	r3, #0
 80009f6:	e00c      	b.n	8000a12 <GPIO_Init+0x176>
 80009f8:	2306      	movs	r3, #6
 80009fa:	e00a      	b.n	8000a12 <GPIO_Init+0x176>
 80009fc:	2305      	movs	r3, #5
 80009fe:	e008      	b.n	8000a12 <GPIO_Init+0x176>
 8000a00:	2304      	movs	r3, #4
 8000a02:	e006      	b.n	8000a12 <GPIO_Init+0x176>
 8000a04:	2303      	movs	r3, #3
 8000a06:	e004      	b.n	8000a12 <GPIO_Init+0x176>
 8000a08:	2302      	movs	r3, #2
 8000a0a:	e002      	b.n	8000a12 <GPIO_Init+0x176>
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e000      	b.n	8000a12 <GPIO_Init+0x176>
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]

		SYSCFG_PCLK_EN();
 8000a14:	4b63      	ldr	r3, [pc, #396]	; (8000ba4 <GPIO_Init+0x308>)
 8000a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a18:	4a62      	ldr	r2, [pc, #392]	; (8000ba4 <GPIO_Init+0x308>)
 8000a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << (4 * temp2));
 8000a20:	4a61      	ldr	r2, [pc, #388]	; (8000ba8 <GPIO_Init+0x30c>)
 8000a22:	7c7b      	ldrb	r3, [r7, #17]
 8000a24:	3302      	adds	r3, #2
 8000a26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a2a:	7bf9      	ldrb	r1, [r7, #15]
 8000a2c:	7c3b      	ldrb	r3, [r7, #16]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	fa01 f303 	lsl.w	r3, r1, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	495c      	ldr	r1, [pc, #368]	; (8000ba8 <GPIO_Init+0x30c>)
 8000a38:	7c7b      	ldrb	r3, [r7, #17]
 8000a3a:	4302      	orrs	r2, r0
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << tmp_PinNumber);
 8000a42:	4b4f      	ldr	r3, [pc, #316]	; (8000b80 <GPIO_Init+0x2e4>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	7cfa      	ldrb	r2, [r7, #19]
 8000a48:	2101      	movs	r1, #1
 8000a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4a4b      	ldr	r2, [pc, #300]	; (8000b80 <GPIO_Init+0x2e4>)
 8000a52:	430b      	orrs	r3, r1
 8000a54:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]

	/* 2. Configure the speed */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * tmp_PinNumber));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	799b      	ldrb	r3, [r3, #6]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	7cfb      	ldrb	r3, [r7, #19]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * tmp_PinNumber));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	7cfb      	ldrb	r3, [r7, #19]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2103      	movs	r1, #3
 8000a76:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	400a      	ands	r2, r1
 8000a84:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	6899      	ldr	r1, [r3, #8]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	430a      	orrs	r2, r1
 8000a94:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]

	/* 2. Configure the pupd settings */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * tmp_PinNumber));
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	79db      	ldrb	r3, [r3, #7]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	7cfb      	ldrb	r3, [r7, #19]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * tmp_PinNumber));
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	7cfb      	ldrb	r3, [r7, #19]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	4619      	mov	r1, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	68d9      	ldr	r1, [r3, #12]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]

	/* 2. Configure the optype */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << tmp_PinNumber);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	7a1b      	ldrb	r3, [r3, #8]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	7cfb      	ldrb	r3, [r7, #19]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << (tmp_PinNumber));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	7cfb      	ldrb	r3, [r7, #19]
 8000af0:	2103      	movs	r1, #3
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	4619      	mov	r1, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	400a      	ands	r2, r1
 8000b00:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	6859      	ldr	r1, [r3, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	605a      	str	r2, [r3, #4]

	/* 2. Configure the alt funcionality */
	if (tmp_PinMode == GPIO_MODE_ALTFN){
 8000b12:	7cbb      	ldrb	r3, [r7, #18]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d12f      	bne.n	8000b78 <GPIO_Init+0x2dc>
		uint8_t temp1 = tmp_PinNumber / 8;
 8000b18:	7cfb      	ldrb	r3, [r7, #19]
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	73bb      	strb	r3, [r7, #14]
		uint8_t temp2 = tmp_PinNumber % 8;
 8000b1e:	7cfb      	ldrb	r3, [r7, #19]
 8000b20:	f003 0307 	and.w	r3, r3, #7
 8000b24:	737b      	strb	r3, [r7, #13]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	7bba      	ldrb	r2, [r7, #14]
 8000b2c:	3208      	adds	r2, #8
 8000b2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b32:	7b7b      	ldrb	r3, [r7, #13]
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	220f      	movs	r2, #15
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	7bba      	ldrb	r2, [r7, #14]
 8000b46:	4001      	ands	r1, r0
 8000b48:	3208      	adds	r2, #8
 8000b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	7bba      	ldrb	r2, [r7, #14]
 8000b54:	3208      	adds	r2, #8
 8000b56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7a5b      	ldrb	r3, [r3, #9]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	7b7b      	ldrb	r3, [r7, #13]
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	4618      	mov	r0, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	7bba      	ldrb	r2, [r7, #14]
 8000b70:	4301      	orrs	r1, r0
 8000b72:	3208      	adds	r2, #8
 8000b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000b78:	bf00      	nop
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40013c00 	.word	0x40013c00
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40021400 	.word	0x40021400
 8000b9c:	40021800 	.word	0x40021800
 8000ba0:	40021c00 	.word	0x40021c00
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40013800 	.word	0x40013800

08000bac <GPIO_IRQInterruptConfig>:
 * @param[in]		- Number of the given pin
 *
 * @Note			- none
 */

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	71fb      	strb	r3, [r7, #7]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE){
 8000bbc:	79bb      	ldrb	r3, [r7, #6]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d131      	bne.n	8000c26 <GPIO_IRQInterruptConfig+0x7a>
		if (IRQNumber <= 31){
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b1f      	cmp	r3, #31
 8000bc6:	d80a      	bhi.n	8000bde <GPIO_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= ( 1 << IRQNumber);
 8000bc8:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <GPIO_IRQInterruptConfig+0xe8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	79fa      	ldrb	r2, [r7, #7]
 8000bce:	2101      	movs	r1, #1
 8000bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4a2f      	ldr	r2, [pc, #188]	; (8000c94 <GPIO_IRQInterruptConfig+0xe8>)
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	6013      	str	r3, [r2, #0]

		}else if ((IRQNumber > 64) && (IRQNumber < 96)){
			*NVIC_ICER2 |= ( 1 << (IRQNumber - 64));
		}
	}
}
 8000bdc:	e055      	b.n	8000c8a <GPIO_IRQInterruptConfig+0xde>
		}else if ((IRQNumber > 31) && (IRQNumber < 64)){
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b1f      	cmp	r3, #31
 8000be2:	d90e      	bls.n	8000c02 <GPIO_IRQInterruptConfig+0x56>
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b3f      	cmp	r3, #63	; 0x3f
 8000be8:	d80b      	bhi.n	8000c02 <GPIO_IRQInterruptConfig+0x56>
			*NVIC_ISER1 |= ( 1 << (IRQNumber - 32));
 8000bea:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <GPIO_IRQInterruptConfig+0xec>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	79fa      	ldrb	r2, [r7, #7]
 8000bf0:	3a20      	subs	r2, #32
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4a27      	ldr	r2, [pc, #156]	; (8000c98 <GPIO_IRQInterruptConfig+0xec>)
 8000bfc:	430b      	orrs	r3, r1
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	e043      	b.n	8000c8a <GPIO_IRQInterruptConfig+0xde>
		}else if ((IRQNumber > 64) && (IRQNumber < 96)){
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b40      	cmp	r3, #64	; 0x40
 8000c06:	d940      	bls.n	8000c8a <GPIO_IRQInterruptConfig+0xde>
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b5f      	cmp	r3, #95	; 0x5f
 8000c0c:	d83d      	bhi.n	8000c8a <GPIO_IRQInterruptConfig+0xde>
			*NVIC_ISER2 |= ( 1 << (IRQNumber - 64));
 8000c0e:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <GPIO_IRQInterruptConfig+0xf0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	79fa      	ldrb	r2, [r7, #7]
 8000c14:	3a40      	subs	r2, #64	; 0x40
 8000c16:	2101      	movs	r1, #1
 8000c18:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <GPIO_IRQInterruptConfig+0xf0>)
 8000c20:	430b      	orrs	r3, r1
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	e031      	b.n	8000c8a <GPIO_IRQInterruptConfig+0xde>
		if (IRQNumber <= 31){
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b1f      	cmp	r3, #31
 8000c2a:	d80a      	bhi.n	8000c42 <GPIO_IRQInterruptConfig+0x96>
			*NVIC_ICER0 |= ( 1 << IRQNumber);
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <GPIO_IRQInterruptConfig+0xf4>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	79fa      	ldrb	r2, [r7, #7]
 8000c32:	2101      	movs	r1, #1
 8000c34:	fa01 f202 	lsl.w	r2, r1, r2
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <GPIO_IRQInterruptConfig+0xf4>)
 8000c3c:	430b      	orrs	r3, r1
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	e023      	b.n	8000c8a <GPIO_IRQInterruptConfig+0xde>
		}else if ((IRQNumber > 31) && (IRQNumber < 64)){
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b1f      	cmp	r3, #31
 8000c46:	d90e      	bls.n	8000c66 <GPIO_IRQInterruptConfig+0xba>
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c4c:	d80b      	bhi.n	8000c66 <GPIO_IRQInterruptConfig+0xba>
			*NVIC_ICER1 |= ( 1 << (IRQNumber - 32));
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <GPIO_IRQInterruptConfig+0xf8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	79fa      	ldrb	r2, [r7, #7]
 8000c54:	3a20      	subs	r2, #32
 8000c56:	2101      	movs	r1, #1
 8000c58:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4a11      	ldr	r2, [pc, #68]	; (8000ca4 <GPIO_IRQInterruptConfig+0xf8>)
 8000c60:	430b      	orrs	r3, r1
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	e011      	b.n	8000c8a <GPIO_IRQInterruptConfig+0xde>
		}else if ((IRQNumber > 64) && (IRQNumber < 96)){
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b40      	cmp	r3, #64	; 0x40
 8000c6a:	d90e      	bls.n	8000c8a <GPIO_IRQInterruptConfig+0xde>
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b5f      	cmp	r3, #95	; 0x5f
 8000c70:	d80b      	bhi.n	8000c8a <GPIO_IRQInterruptConfig+0xde>
			*NVIC_ICER2 |= ( 1 << (IRQNumber - 64));
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <GPIO_IRQInterruptConfig+0xfc>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	79fa      	ldrb	r2, [r7, #7]
 8000c78:	3a40      	subs	r2, #64	; 0x40
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c80:	4611      	mov	r1, r2
 8000c82:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <GPIO_IRQInterruptConfig+0xfc>)
 8000c84:	430b      	orrs	r3, r1
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	e7ff      	b.n	8000c8a <GPIO_IRQInterruptConfig+0xde>
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000e104 	.word	0xe000e104
 8000c9c:	e000e108 	.word	0xe000e108
 8000ca0:	e000e180 	.word	0xe000e180
 8000ca4:	e000e184 	.word	0xe000e184
 8000ca8:	e000e188 	.word	0xe000e188

08000cac <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){
 8000cac:	b480      	push	{r7}
 8000cae:	b087      	sub	sp, #28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]

	/* 1. Find out the IPR register */
	uint8_t iprx = IRQNumber / 4;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	75fb      	strb	r3, [r7, #23]
	uint8_t iprx_section = IRQNumber % 4;
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	75bb      	strb	r3, [r7, #22]

	__vo uint32_t *pNVIC_IPRx = NVIC_IPR_BASEADDR + iprx; // this increment is done because we are increasing
 8000cc6:	7dfb      	ldrb	r3, [r7, #23]
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000cce:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000cd2:	613b      	str	r3, [r7, #16]
														  // a pointer address and this is done by 4 bytes
														  // ( (__vo uint32_t *) 0xE000E400UL ) + iprx
	uint8_t shfit_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000cd4:	7dbb      	ldrb	r3, [r7, #22]
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	3304      	adds	r3, #4
 8000cdc:	73fb      	strb	r3, [r7, #15]
	*pNVIC_IPRx |= (IRQPriority << shfit_amount);
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	6839      	ldr	r1, [r7, #0]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	431a      	orrs	r2, r3
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	601a      	str	r2, [r3, #0]


}
 8000cf0:	bf00      	nop
 8000cf2:	371c      	adds	r7, #28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
	...

08000cfc <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber){
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]

	// For the GPIO we only need to clear the pending register bit
	if (EXTI->PR & ( 1 << PinNumber)){
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <GPIO_IRQHandling+0x3c>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	79fa      	ldrb	r2, [r7, #7]
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d12:	4013      	ands	r3, r2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d009      	beq.n	8000d2c <GPIO_IRQHandling+0x30>
		// To clear the bit we have to set it to 1. This is how is established in the RM
		EXTI->PR |= ( 1 << PinNumber);
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <GPIO_IRQHandling+0x3c>)
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	79fa      	ldrb	r2, [r7, #7]
 8000d1e:	2101      	movs	r1, #1
 8000d20:	fa01 f202 	lsl.w	r2, r1, r2
 8000d24:	4611      	mov	r1, r2
 8000d26:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <GPIO_IRQHandling+0x3c>)
 8000d28:	430b      	orrs	r3, r1
 8000d2a:	6153      	str	r3, [r2, #20]
	}
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40013c00 	.word	0x40013c00

08000d3c <SPI_PeriClockControl>:
 * @return 			- none
 *
 * @Note			- none
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d120      	bne.n	8000d90 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1) {
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a22      	ldr	r2, [pc, #136]	; (8000ddc <SPI_PeriClockControl+0xa0>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d106      	bne.n	8000d64 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <SPI_PeriClockControl+0xa4>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <SPI_PeriClockControl+0xa4>)
 8000d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
			SPI2_PCLK_DI();
		}else if(pSPIx == SPI3) {
			SPI3_PCLK_DI();
		}
	}
}
 8000d62:	e035      	b.n	8000dd0 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a1f      	ldr	r2, [pc, #124]	; (8000de4 <SPI_PeriClockControl+0xa8>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d106      	bne.n	8000d7a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <SPI_PeriClockControl+0xa4>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	4a1b      	ldr	r2, [pc, #108]	; (8000de0 <SPI_PeriClockControl+0xa4>)
 8000d72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d76:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d78:	e02a      	b.n	8000dd0 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3) {
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <SPI_PeriClockControl+0xac>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d126      	bne.n	8000dd0 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <SPI_PeriClockControl+0xa4>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <SPI_PeriClockControl+0xa4>)
 8000d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d8e:	e01f      	b.n	8000dd0 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <SPI_PeriClockControl+0xa0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d106      	bne.n	8000da6 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <SPI_PeriClockControl+0xa4>)
 8000d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9c:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <SPI_PeriClockControl+0xa4>)
 8000d9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000da2:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000da4:	e014      	b.n	8000dd0 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2) {
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <SPI_PeriClockControl+0xa8>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d106      	bne.n	8000dbc <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <SPI_PeriClockControl+0xa4>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <SPI_PeriClockControl+0xa4>)
 8000db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dba:	e009      	b.n	8000dd0 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3) {
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <SPI_PeriClockControl+0xac>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d105      	bne.n	8000dd0 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <SPI_PeriClockControl+0xa4>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <SPI_PeriClockControl+0xa4>)
 8000dca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000dce:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40013000 	.word	0x40013000
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40003800 	.word	0x40003800
 8000de8:	40003c00 	.word	0x40003c00

08000dec <SPI_Init>:
 *
 * @Note			- none
 */


void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

	uint32_t tempReg = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]

	/* Enable the peripheral clock */
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff9c 	bl	8000d3c <SPI_PeriClockControl>

	/* 1. Configure Device mode */
	tempReg |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	791b      	ldrb	r3, [r3, #4]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]

	/* 2. Configure Bus type */
	if ((pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_FULL_DUPLEX) || (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_SIMPLEX_TXONLY)){
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	795b      	ldrb	r3, [r3, #5]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <SPI_Init+0x36>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	795b      	ldrb	r3, [r3, #5]
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d108      	bne.n	8000e34 <SPI_Init+0x48>
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e28:	60fb      	str	r3, [r7, #12]
		tempReg &= ~(1 << SPI_CR1_RXONLY);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	e025      	b.n	8000e80 <SPI_Init+0x94>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_HALF_DUPLEX_RX){
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	795b      	ldrb	r3, [r3, #5]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d108      	bne.n	8000e4e <SPI_Init+0x62>
		tempReg |= (1 << SPI_CR1_BIDIMODE);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e42:	60fb      	str	r3, [r7, #12]
		tempReg &= ~(1 << SPI_CR1_BIDIOE);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	e018      	b.n	8000e80 <SPI_Init+0x94>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_HALF_DUPLEX_TX){
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	795b      	ldrb	r3, [r3, #5]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d108      	bne.n	8000e68 <SPI_Init+0x7c>
		tempReg |= (1 << SPI_CR1_BIDIMODE);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e5c:	60fb      	str	r3, [r7, #12]
		tempReg |= (1 << SPI_CR1_BIDIOE);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	e00b      	b.n	8000e80 <SPI_Init+0x94>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_SIMPLEX_RXONLY){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	795b      	ldrb	r3, [r3, #5]
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	d107      	bne.n	8000e80 <SPI_Init+0x94>
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e76:	60fb      	str	r3, [r7, #12]
		tempReg |= (1 << SPI_CR1_RXONLY);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7e:	60fb      	str	r3, [r7, #12]
	}

	/* 3. Configure clock speed	 */
	tempReg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	799b      	ldrb	r3, [r3, #6]
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]

	/* 4. Configure Data frame format */
	tempReg |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	79db      	ldrb	r3, [r3, #7]
 8000e92:	02db      	lsls	r3, r3, #11
 8000e94:	461a      	mov	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]

	/* 5. Configure CPOL */
	tempReg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7a1b      	ldrb	r3, [r3, #8]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]

	/* 5. Configure CPAH */
	tempReg |= (pSPIHandle->SPIConfig.SPI_CPAH << SPI_CR1_CPAH);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7a5b      	ldrb	r3, [r3, #9]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]

	/* 5. Configure SSM */
	tempReg |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7a9b      	ldrb	r3, [r3, #10]
 8000eba:	025b      	lsls	r3, r3, #9
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR[0] = tempReg;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	601a      	str	r2, [r3, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <SPI_GetFlagStatus>:
		SPI3_REG_RESET();
	}
}


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]

	uint8_t value;
	(pSPIx->SR & FlagName) ? (value = FLAG_SET) : (value = FLAG_RESET);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <SPI_GetFlagStatus+0x1c>
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
 8000eee:	e001      	b.n	8000ef4 <SPI_GetFlagStatus+0x20>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
	return value;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <SPI_IRQInterruptConfig>:
 * @return 			- none
 *
 * @Note			-
 *
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	460a      	mov	r2, r1
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE){
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d131      	bne.n	8000f7a <SPI_IRQInterruptConfig+0x7a>
		if (IRQNumber <= 31){
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b1f      	cmp	r3, #31
 8000f1a:	d80a      	bhi.n	8000f32 <SPI_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= ( 1 << IRQNumber);
 8000f1c:	4b32      	ldr	r3, [pc, #200]	; (8000fe8 <SPI_IRQInterruptConfig+0xe8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	79fa      	ldrb	r2, [r7, #7]
 8000f22:	2101      	movs	r1, #1
 8000f24:	fa01 f202 	lsl.w	r2, r1, r2
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4a2f      	ldr	r2, [pc, #188]	; (8000fe8 <SPI_IRQInterruptConfig+0xe8>)
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	6013      	str	r3, [r2, #0]

		}else if ((IRQNumber > 64) && (IRQNumber < 96)){
			*NVIC_ICER2 |= ( 1 << (IRQNumber - 64));
		}
	}
}
 8000f30:	e055      	b.n	8000fde <SPI_IRQInterruptConfig+0xde>
		}else if ((IRQNumber > 31) && (IRQNumber < 64)){
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b1f      	cmp	r3, #31
 8000f36:	d90e      	bls.n	8000f56 <SPI_IRQInterruptConfig+0x56>
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f3c:	d80b      	bhi.n	8000f56 <SPI_IRQInterruptConfig+0x56>
			*NVIC_ISER1 |= ( 1 << (IRQNumber - 32));
 8000f3e:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <SPI_IRQInterruptConfig+0xec>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	79fa      	ldrb	r2, [r7, #7]
 8000f44:	3a20      	subs	r2, #32
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4a27      	ldr	r2, [pc, #156]	; (8000fec <SPI_IRQInterruptConfig+0xec>)
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	e043      	b.n	8000fde <SPI_IRQInterruptConfig+0xde>
		}else if ((IRQNumber > 64) && (IRQNumber < 96)){
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b40      	cmp	r3, #64	; 0x40
 8000f5a:	d940      	bls.n	8000fde <SPI_IRQInterruptConfig+0xde>
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b5f      	cmp	r3, #95	; 0x5f
 8000f60:	d83d      	bhi.n	8000fde <SPI_IRQInterruptConfig+0xde>
			*NVIC_ISER2 |= ( 1 << (IRQNumber - 64));
 8000f62:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <SPI_IRQInterruptConfig+0xf0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	79fa      	ldrb	r2, [r7, #7]
 8000f68:	3a40      	subs	r2, #64	; 0x40
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f70:	4611      	mov	r1, r2
 8000f72:	4a1f      	ldr	r2, [pc, #124]	; (8000ff0 <SPI_IRQInterruptConfig+0xf0>)
 8000f74:	430b      	orrs	r3, r1
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	e031      	b.n	8000fde <SPI_IRQInterruptConfig+0xde>
		if (IRQNumber <= 31){
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b1f      	cmp	r3, #31
 8000f7e:	d80a      	bhi.n	8000f96 <SPI_IRQInterruptConfig+0x96>
			*NVIC_ICER0 |= ( 1 << IRQNumber);
 8000f80:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <SPI_IRQInterruptConfig+0xf4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	79fa      	ldrb	r2, [r7, #7]
 8000f86:	2101      	movs	r1, #1
 8000f88:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4a19      	ldr	r2, [pc, #100]	; (8000ff4 <SPI_IRQInterruptConfig+0xf4>)
 8000f90:	430b      	orrs	r3, r1
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	e023      	b.n	8000fde <SPI_IRQInterruptConfig+0xde>
		}else if ((IRQNumber > 31) && (IRQNumber < 64)){
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b1f      	cmp	r3, #31
 8000f9a:	d90e      	bls.n	8000fba <SPI_IRQInterruptConfig+0xba>
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b3f      	cmp	r3, #63	; 0x3f
 8000fa0:	d80b      	bhi.n	8000fba <SPI_IRQInterruptConfig+0xba>
			*NVIC_ICER1 |= ( 1 << (IRQNumber - 32));
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <SPI_IRQInterruptConfig+0xf8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	79fa      	ldrb	r2, [r7, #7]
 8000fa8:	3a20      	subs	r2, #32
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4a11      	ldr	r2, [pc, #68]	; (8000ff8 <SPI_IRQInterruptConfig+0xf8>)
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	e011      	b.n	8000fde <SPI_IRQInterruptConfig+0xde>
		}else if ((IRQNumber > 64) && (IRQNumber < 96)){
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b40      	cmp	r3, #64	; 0x40
 8000fbe:	d90e      	bls.n	8000fde <SPI_IRQInterruptConfig+0xde>
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2b5f      	cmp	r3, #95	; 0x5f
 8000fc4:	d80b      	bhi.n	8000fde <SPI_IRQInterruptConfig+0xde>
			*NVIC_ICER2 |= ( 1 << (IRQNumber - 64));
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <SPI_IRQInterruptConfig+0xfc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	79fa      	ldrb	r2, [r7, #7]
 8000fcc:	3a40      	subs	r2, #64	; 0x40
 8000fce:	2101      	movs	r1, #1
 8000fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <SPI_IRQInterruptConfig+0xfc>)
 8000fd8:	430b      	orrs	r3, r1
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	e7ff      	b.n	8000fde <SPI_IRQInterruptConfig+0xde>
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000e104 	.word	0xe000e104
 8000ff0:	e000e108 	.word	0xe000e108
 8000ff4:	e000e180 	.word	0xe000e180
 8000ff8:	e000e184 	.word	0xe000e184
 8000ffc:	e000e188 	.word	0xe000e188

08001000 <SPI_SendDataIT>:
 *
 * @Note			-
 *
 */

uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len){
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]

	uint8_t state = pSPIHandle->TxState;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	7f1b      	ldrb	r3, [r3, #28]
 8001010:	75fb      	strb	r3, [r7, #23]
	if(state != SPI_BUSY_IN_TX){
 8001012:	7dfb      	ldrb	r3, [r7, #23]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d010      	beq.n	800103a <SPI_SendDataIT+0x3a>
		/* 1. Save the Tx buffer address and Len information in some global variables */
		pSPIHandle->pTxBuffer = pTxBuffer;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	615a      	str	r2, [r3, #20]

		/* Mark the SPI state as busy in transmission so that no other code can take over
		 * same SPI peripheral until transmission is over	 */
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2202      	movs	r2, #2
 8001028:	771a      	strb	r2, [r3, #28]

		/* 3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR */
		pSPIHandle->pSPIx->CR[1] |= (1 << SPI_CR2_TXEIE);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001038:	605a      	str	r2, [r3, #4]
	}

	return state;
 800103a:	7dfb      	ldrb	r3, [r7, #23]
}
 800103c:	4618      	mov	r0, r3
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <SPI_ReceiveDataIT>:
 *
 * @Note			-
 *
 */

uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len){
 8001046:	b480      	push	{r7}
 8001048:	b087      	sub	sp, #28
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]

	uint8_t state = pSPIHandle->RxState;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	7f5b      	ldrb	r3, [r3, #29]
 8001056:	75fb      	strb	r3, [r7, #23]
	if(state != SPI_BUSY_IN_RX){
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d010      	beq.n	8001080 <SPI_ReceiveDataIT+0x3a>
		/* 1. Save the Rx buffer address and Len information in some global variables */
		pSPIHandle->pRxBuffer = pRxBuffer;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Len;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	619a      	str	r2, [r3, #24]

		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2201      	movs	r2, #1
 800106e:	775a      	strb	r2, [r3, #29]

		pSPIHandle->pSPIx->CR[1] |= (1 << SPI_CR2_RXNEIE);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800107e:	605a      	str	r2, [r3, #4]
	}

	return state;
 8001080:	7dfb      	ldrb	r3, [r7, #23]
}
 8001082:	4618      	mov	r0, r3
 8001084:	371c      	adds	r7, #28
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <SPI_IRQHandling>:
 *
 * @Note			-
 *
 */

void SPI_IRQHandling(SPI_Handle_t *pSPIHandle){
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	// 1. Check for TXE
	uint8_t temp1, temp2;
	temp1 = SPI_GetFlagStatus(pSPIHandle->pSPIx, SPI_TXE_FLAG);		// TXE flag and TXEIE has to be at 1 to
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2102      	movs	r1, #2
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff1a 	bl	8000ed4 <SPI_GetFlagStatus>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle->pSPIx->CR[1] & (1 << SPI_CR2_TXEIE);		// we know that we have an interrupt for TXE flag
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80010b0:	73bb      	strb	r3, [r7, #14]

	if ( temp1 && temp2 ){
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <SPI_IRQHandling+0x38>
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <SPI_IRQHandling+0x38>
		// Handle TXE
		spi_txe_interrupt_handle(pSPIHandle);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f834 	bl	800112c <spi_txe_interrupt_handle>


	}

	// 2. Check for RXNE
	temp1 = SPI_GetFlagStatus(pSPIHandle->pSPIx, SPI_RXNE_FLAG);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2101      	movs	r1, #1
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff02 	bl	8000ed4 <SPI_GetFlagStatus>
 80010d0:	4603      	mov	r3, r0
 80010d2:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle->pSPIx->CR[1] & (1 << SPI_CR2_RXNEIE);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e0:	73bb      	strb	r3, [r7, #14]

	if ( temp1 && temp2 ){
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <SPI_IRQHandling+0x68>
 80010e8:	7bbb      	ldrb	r3, [r7, #14]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <SPI_IRQHandling+0x68>
		// Handle RXE
		spi_rxne_interrupt_handle(pSPIHandle);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f85c 	bl	80011ac <spi_rxne_interrupt_handle>

	}

	// 2. Check for ovr
	temp1 = SPI_GetFlagStatus(pSPIHandle->pSPIx, SPI_OVR_FLAG);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2140      	movs	r1, #64	; 0x40
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff feea 	bl	8000ed4 <SPI_GetFlagStatus>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle->pSPIx->CR[1] & (1 << SPI_SR_OVR);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001110:	73bb      	strb	r3, [r7, #14]

	if ( temp1 && temp2 ){
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <SPI_IRQHandling+0x98>
 8001118:	7bbb      	ldrb	r3, [r7, #14]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <SPI_IRQHandling+0x98>
		// Handle RXE
		spi_ovr_error_interrupt_handle(pSPIHandle);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f886 	bl	8001230 <spi_ovr_error_interrupt_handle>

	}
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <spi_txe_interrupt_handle>:
 * @Note			-
 *
 */

// SPI interrupt handler functions
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	// Same code as SendData()
	if (pSPIHandle->pSPIx->CR[0] & ( 1 << SPI_CR1_DFF)){
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800113e:	2b00      	cmp	r3, #0
 8001140:	d015      	beq.n	800116e <spi_txe_interrupt_handle+0x42>
		pSPIHandle->pSPIx->DR = *((uint16_t *) pSPIHandle->pTxBuffer);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	881a      	ldrh	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	60da      	str	r2, [r3, #12]
		pSPIHandle->pTxBuffer += sizeof(uint16_t);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	1c9a      	adds	r2, r3, #2
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	1e5a      	subs	r2, r3, #1
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxLen--;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	1e5a      	subs	r2, r3, #1
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	615a      	str	r2, [r3, #20]
 800116c:	e00f      	b.n	800118e <spi_txe_interrupt_handle+0x62>

	}else {
		pSPIHandle->pSPIx->DR = *pSPIHandle->pTxBuffer;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	1e5a      	subs	r2, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	60da      	str	r2, [r3, #12]
	}

	if ( !pSPIHandle->TxLen ){
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d106      	bne.n	80011a4 <spi_txe_interrupt_handle+0x78>

		// When the transmission is over (Len = 0) we have to close the spi communication
		// This prevents interrupts from setting up of TXE flag
		SPI_CloseTransmission(pSPIHandle);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f86e 	bl	8001278 <SPI_CloseTransmission>

		// Not applicable for the time being
		 SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT);
 800119c:	2101      	movs	r1, #1
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff f958 	bl	8000454 <SPI_ApplicationEventCallback>
	}
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <spi_rxne_interrupt_handle>:
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	// 2. Same code as ReceiveData()
	if( (pSPIHandle->pSPIx->CR[0] & ( 1 << SPI_CR1_DFF) ) )
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d016      	beq.n	80011f0 <spi_rxne_interrupt_handle+0x44>
		{
			//16 bit DFF
			//1. load the data from DR to Rxbuffer address
			 *((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t) pSPIHandle->pSPIx->DR ;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	b292      	uxth	r2, r2
 80011ce:	801a      	strh	r2, [r3, #0]
			 pSPIHandle->RxLen--;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	1e5a      	subs	r2, r3, #1
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	619a      	str	r2, [r3, #24]
			 pSPIHandle->RxLen--;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	1e5a      	subs	r2, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
			(uint16_t*)pSPIHandle->pRxBuffer++;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	611a      	str	r2, [r3, #16]
 80011ee:	e010      	b.n	8001212 <spi_rxne_interrupt_handle+0x66>
		}else
		{
			//8 bit DFF
			*(pSPIHandle->pRxBuffer) = (uint8_t) pSPIHandle->pSPIx->DR ;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]
			pSPIHandle->RxLen--;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	1e5a      	subs	r2, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
			pSPIHandle->pRxBuffer++;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	611a      	str	r2, [r3, #16]
		}

	if ( !pSPIHandle->RxLen ){
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d106      	bne.n	8001228 <spi_rxne_interrupt_handle+0x7c>
		SPI_CloseReception(pSPIHandle);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 f846 	bl	80012ac <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
 8001220:	2102      	movs	r1, #2
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff f916 	bl	8000454 <SPI_ApplicationEventCallback>
	}
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <spi_ovr_error_interrupt_handle>:
static void spi_ovr_error_interrupt_handle(SPI_Handle_t *pSPIHandle){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

	// Clear the ovr flag
	if (pSPIHandle->TxState != SPI_BUSY_IN_TX){
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7f1b      	ldrb	r3, [r3, #28]
 800123c:	2b02      	cmp	r3, #2
 800123e:	d002      	beq.n	8001246 <spi_ovr_error_interrupt_handle+0x16>
		// To clear a register we create a dummy variable to "read" the values
		// on these registers
		SPI_ClearOVRFlag(pSPIHandle);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 f808 	bl	8001256 <SPI_ClearOVRFlag>
	}
	// Inform the application
	SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 8001246:	2103      	movs	r1, #3
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff f903 	bl	8000454 <SPI_ApplicationEventCallback>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <SPI_ClearOVRFlag>:

void SPI_ClearOVRFlag(SPI_Handle_t *pSPIHandle){
 8001256:	b480      	push	{r7}
 8001258:	b085      	sub	sp, #20
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
	uint8_t temp;
	temp = pSPIHandle->pSPIx->DR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	73fb      	strb	r3, [r7, #15]
	temp = pSPIHandle->pSPIx->SR;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	73fb      	strb	r3, [r7, #15]
	(void)temp; // To avoid warning for unused variable
}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <SPI_CloseTransmission>:

void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle){
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR[1] &= ~( 1 << SPI_CR2_TXEIE);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800128e:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	771a      	strb	r2, [r3, #28]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle){
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR[1] &= ~( 1 << SPI_CR2_RXNEIE);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012c2:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	775a      	strb	r2, [r3, #29]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <__errno>:
 80012e0:	4b01      	ldr	r3, [pc, #4]	; (80012e8 <__errno+0x8>)
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000000 	.word	0x20000000

080012ec <__libc_init_array>:
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	4d0d      	ldr	r5, [pc, #52]	; (8001324 <__libc_init_array+0x38>)
 80012f0:	4c0d      	ldr	r4, [pc, #52]	; (8001328 <__libc_init_array+0x3c>)
 80012f2:	1b64      	subs	r4, r4, r5
 80012f4:	10a4      	asrs	r4, r4, #2
 80012f6:	2600      	movs	r6, #0
 80012f8:	42a6      	cmp	r6, r4
 80012fa:	d109      	bne.n	8001310 <__libc_init_array+0x24>
 80012fc:	4d0b      	ldr	r5, [pc, #44]	; (800132c <__libc_init_array+0x40>)
 80012fe:	4c0c      	ldr	r4, [pc, #48]	; (8001330 <__libc_init_array+0x44>)
 8001300:	f000 ffa6 	bl	8002250 <_init>
 8001304:	1b64      	subs	r4, r4, r5
 8001306:	10a4      	asrs	r4, r4, #2
 8001308:	2600      	movs	r6, #0
 800130a:	42a6      	cmp	r6, r4
 800130c:	d105      	bne.n	800131a <__libc_init_array+0x2e>
 800130e:	bd70      	pop	{r4, r5, r6, pc}
 8001310:	f855 3b04 	ldr.w	r3, [r5], #4
 8001314:	4798      	blx	r3
 8001316:	3601      	adds	r6, #1
 8001318:	e7ee      	b.n	80012f8 <__libc_init_array+0xc>
 800131a:	f855 3b04 	ldr.w	r3, [r5], #4
 800131e:	4798      	blx	r3
 8001320:	3601      	adds	r6, #1
 8001322:	e7f2      	b.n	800130a <__libc_init_array+0x1e>
 8001324:	08002310 	.word	0x08002310
 8001328:	08002310 	.word	0x08002310
 800132c:	08002310 	.word	0x08002310
 8001330:	08002314 	.word	0x08002314

08001334 <memset>:
 8001334:	4402      	add	r2, r0
 8001336:	4603      	mov	r3, r0
 8001338:	4293      	cmp	r3, r2
 800133a:	d100      	bne.n	800133e <memset+0xa>
 800133c:	4770      	bx	lr
 800133e:	f803 1b01 	strb.w	r1, [r3], #1
 8001342:	e7f9      	b.n	8001338 <memset+0x4>

08001344 <iprintf>:
 8001344:	b40f      	push	{r0, r1, r2, r3}
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <iprintf+0x2c>)
 8001348:	b513      	push	{r0, r1, r4, lr}
 800134a:	681c      	ldr	r4, [r3, #0]
 800134c:	b124      	cbz	r4, 8001358 <iprintf+0x14>
 800134e:	69a3      	ldr	r3, [r4, #24]
 8001350:	b913      	cbnz	r3, 8001358 <iprintf+0x14>
 8001352:	4620      	mov	r0, r4
 8001354:	f000 f866 	bl	8001424 <__sinit>
 8001358:	ab05      	add	r3, sp, #20
 800135a:	9a04      	ldr	r2, [sp, #16]
 800135c:	68a1      	ldr	r1, [r4, #8]
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	4620      	mov	r0, r4
 8001362:	f000 f9bb 	bl	80016dc <_vfiprintf_r>
 8001366:	b002      	add	sp, #8
 8001368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800136c:	b004      	add	sp, #16
 800136e:	4770      	bx	lr
 8001370:	20000000 	.word	0x20000000

08001374 <std>:
 8001374:	2300      	movs	r3, #0
 8001376:	b510      	push	{r4, lr}
 8001378:	4604      	mov	r4, r0
 800137a:	e9c0 3300 	strd	r3, r3, [r0]
 800137e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001382:	6083      	str	r3, [r0, #8]
 8001384:	8181      	strh	r1, [r0, #12]
 8001386:	6643      	str	r3, [r0, #100]	; 0x64
 8001388:	81c2      	strh	r2, [r0, #14]
 800138a:	6183      	str	r3, [r0, #24]
 800138c:	4619      	mov	r1, r3
 800138e:	2208      	movs	r2, #8
 8001390:	305c      	adds	r0, #92	; 0x5c
 8001392:	f7ff ffcf 	bl	8001334 <memset>
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <std+0x38>)
 8001398:	6263      	str	r3, [r4, #36]	; 0x24
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <std+0x3c>)
 800139c:	62a3      	str	r3, [r4, #40]	; 0x28
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <std+0x40>)
 80013a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <std+0x44>)
 80013a4:	6224      	str	r4, [r4, #32]
 80013a6:	6323      	str	r3, [r4, #48]	; 0x30
 80013a8:	bd10      	pop	{r4, pc}
 80013aa:	bf00      	nop
 80013ac:	08001c85 	.word	0x08001c85
 80013b0:	08001ca7 	.word	0x08001ca7
 80013b4:	08001cdf 	.word	0x08001cdf
 80013b8:	08001d03 	.word	0x08001d03

080013bc <_cleanup_r>:
 80013bc:	4901      	ldr	r1, [pc, #4]	; (80013c4 <_cleanup_r+0x8>)
 80013be:	f000 b8af 	b.w	8001520 <_fwalk_reent>
 80013c2:	bf00      	nop
 80013c4:	08001fd5 	.word	0x08001fd5

080013c8 <__sfmoreglue>:
 80013c8:	b570      	push	{r4, r5, r6, lr}
 80013ca:	2268      	movs	r2, #104	; 0x68
 80013cc:	1e4d      	subs	r5, r1, #1
 80013ce:	4355      	muls	r5, r2
 80013d0:	460e      	mov	r6, r1
 80013d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80013d6:	f000 f8e5 	bl	80015a4 <_malloc_r>
 80013da:	4604      	mov	r4, r0
 80013dc:	b140      	cbz	r0, 80013f0 <__sfmoreglue+0x28>
 80013de:	2100      	movs	r1, #0
 80013e0:	e9c0 1600 	strd	r1, r6, [r0]
 80013e4:	300c      	adds	r0, #12
 80013e6:	60a0      	str	r0, [r4, #8]
 80013e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80013ec:	f7ff ffa2 	bl	8001334 <memset>
 80013f0:	4620      	mov	r0, r4
 80013f2:	bd70      	pop	{r4, r5, r6, pc}

080013f4 <__sfp_lock_acquire>:
 80013f4:	4801      	ldr	r0, [pc, #4]	; (80013fc <__sfp_lock_acquire+0x8>)
 80013f6:	f000 b8b3 	b.w	8001560 <__retarget_lock_acquire_recursive>
 80013fa:	bf00      	nop
 80013fc:	200002a1 	.word	0x200002a1

08001400 <__sfp_lock_release>:
 8001400:	4801      	ldr	r0, [pc, #4]	; (8001408 <__sfp_lock_release+0x8>)
 8001402:	f000 b8ae 	b.w	8001562 <__retarget_lock_release_recursive>
 8001406:	bf00      	nop
 8001408:	200002a1 	.word	0x200002a1

0800140c <__sinit_lock_acquire>:
 800140c:	4801      	ldr	r0, [pc, #4]	; (8001414 <__sinit_lock_acquire+0x8>)
 800140e:	f000 b8a7 	b.w	8001560 <__retarget_lock_acquire_recursive>
 8001412:	bf00      	nop
 8001414:	200002a2 	.word	0x200002a2

08001418 <__sinit_lock_release>:
 8001418:	4801      	ldr	r0, [pc, #4]	; (8001420 <__sinit_lock_release+0x8>)
 800141a:	f000 b8a2 	b.w	8001562 <__retarget_lock_release_recursive>
 800141e:	bf00      	nop
 8001420:	200002a2 	.word	0x200002a2

08001424 <__sinit>:
 8001424:	b510      	push	{r4, lr}
 8001426:	4604      	mov	r4, r0
 8001428:	f7ff fff0 	bl	800140c <__sinit_lock_acquire>
 800142c:	69a3      	ldr	r3, [r4, #24]
 800142e:	b11b      	cbz	r3, 8001438 <__sinit+0x14>
 8001430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001434:	f7ff bff0 	b.w	8001418 <__sinit_lock_release>
 8001438:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800143c:	6523      	str	r3, [r4, #80]	; 0x50
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <__sinit+0x68>)
 8001440:	4a13      	ldr	r2, [pc, #76]	; (8001490 <__sinit+0x6c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	62a2      	str	r2, [r4, #40]	; 0x28
 8001446:	42a3      	cmp	r3, r4
 8001448:	bf04      	itt	eq
 800144a:	2301      	moveq	r3, #1
 800144c:	61a3      	streq	r3, [r4, #24]
 800144e:	4620      	mov	r0, r4
 8001450:	f000 f820 	bl	8001494 <__sfp>
 8001454:	6060      	str	r0, [r4, #4]
 8001456:	4620      	mov	r0, r4
 8001458:	f000 f81c 	bl	8001494 <__sfp>
 800145c:	60a0      	str	r0, [r4, #8]
 800145e:	4620      	mov	r0, r4
 8001460:	f000 f818 	bl	8001494 <__sfp>
 8001464:	2200      	movs	r2, #0
 8001466:	60e0      	str	r0, [r4, #12]
 8001468:	2104      	movs	r1, #4
 800146a:	6860      	ldr	r0, [r4, #4]
 800146c:	f7ff ff82 	bl	8001374 <std>
 8001470:	68a0      	ldr	r0, [r4, #8]
 8001472:	2201      	movs	r2, #1
 8001474:	2109      	movs	r1, #9
 8001476:	f7ff ff7d 	bl	8001374 <std>
 800147a:	68e0      	ldr	r0, [r4, #12]
 800147c:	2202      	movs	r2, #2
 800147e:	2112      	movs	r1, #18
 8001480:	f7ff ff78 	bl	8001374 <std>
 8001484:	2301      	movs	r3, #1
 8001486:	61a3      	str	r3, [r4, #24]
 8001488:	e7d2      	b.n	8001430 <__sinit+0xc>
 800148a:	bf00      	nop
 800148c:	08002278 	.word	0x08002278
 8001490:	080013bd 	.word	0x080013bd

08001494 <__sfp>:
 8001494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001496:	4607      	mov	r7, r0
 8001498:	f7ff ffac 	bl	80013f4 <__sfp_lock_acquire>
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <__sfp+0x84>)
 800149e:	681e      	ldr	r6, [r3, #0]
 80014a0:	69b3      	ldr	r3, [r6, #24]
 80014a2:	b913      	cbnz	r3, 80014aa <__sfp+0x16>
 80014a4:	4630      	mov	r0, r6
 80014a6:	f7ff ffbd 	bl	8001424 <__sinit>
 80014aa:	3648      	adds	r6, #72	; 0x48
 80014ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	d503      	bpl.n	80014bc <__sfp+0x28>
 80014b4:	6833      	ldr	r3, [r6, #0]
 80014b6:	b30b      	cbz	r3, 80014fc <__sfp+0x68>
 80014b8:	6836      	ldr	r6, [r6, #0]
 80014ba:	e7f7      	b.n	80014ac <__sfp+0x18>
 80014bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80014c0:	b9d5      	cbnz	r5, 80014f8 <__sfp+0x64>
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <__sfp+0x88>)
 80014c4:	60e3      	str	r3, [r4, #12]
 80014c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80014ca:	6665      	str	r5, [r4, #100]	; 0x64
 80014cc:	f000 f847 	bl	800155e <__retarget_lock_init_recursive>
 80014d0:	f7ff ff96 	bl	8001400 <__sfp_lock_release>
 80014d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80014d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80014dc:	6025      	str	r5, [r4, #0]
 80014de:	61a5      	str	r5, [r4, #24]
 80014e0:	2208      	movs	r2, #8
 80014e2:	4629      	mov	r1, r5
 80014e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80014e8:	f7ff ff24 	bl	8001334 <memset>
 80014ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80014f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80014f4:	4620      	mov	r0, r4
 80014f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014f8:	3468      	adds	r4, #104	; 0x68
 80014fa:	e7d9      	b.n	80014b0 <__sfp+0x1c>
 80014fc:	2104      	movs	r1, #4
 80014fe:	4638      	mov	r0, r7
 8001500:	f7ff ff62 	bl	80013c8 <__sfmoreglue>
 8001504:	4604      	mov	r4, r0
 8001506:	6030      	str	r0, [r6, #0]
 8001508:	2800      	cmp	r0, #0
 800150a:	d1d5      	bne.n	80014b8 <__sfp+0x24>
 800150c:	f7ff ff78 	bl	8001400 <__sfp_lock_release>
 8001510:	230c      	movs	r3, #12
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	e7ee      	b.n	80014f4 <__sfp+0x60>
 8001516:	bf00      	nop
 8001518:	08002278 	.word	0x08002278
 800151c:	ffff0001 	.word	0xffff0001

08001520 <_fwalk_reent>:
 8001520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001524:	4606      	mov	r6, r0
 8001526:	4688      	mov	r8, r1
 8001528:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800152c:	2700      	movs	r7, #0
 800152e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001532:	f1b9 0901 	subs.w	r9, r9, #1
 8001536:	d505      	bpl.n	8001544 <_fwalk_reent+0x24>
 8001538:	6824      	ldr	r4, [r4, #0]
 800153a:	2c00      	cmp	r4, #0
 800153c:	d1f7      	bne.n	800152e <_fwalk_reent+0xe>
 800153e:	4638      	mov	r0, r7
 8001540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001544:	89ab      	ldrh	r3, [r5, #12]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d907      	bls.n	800155a <_fwalk_reent+0x3a>
 800154a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800154e:	3301      	adds	r3, #1
 8001550:	d003      	beq.n	800155a <_fwalk_reent+0x3a>
 8001552:	4629      	mov	r1, r5
 8001554:	4630      	mov	r0, r6
 8001556:	47c0      	blx	r8
 8001558:	4307      	orrs	r7, r0
 800155a:	3568      	adds	r5, #104	; 0x68
 800155c:	e7e9      	b.n	8001532 <_fwalk_reent+0x12>

0800155e <__retarget_lock_init_recursive>:
 800155e:	4770      	bx	lr

08001560 <__retarget_lock_acquire_recursive>:
 8001560:	4770      	bx	lr

08001562 <__retarget_lock_release_recursive>:
 8001562:	4770      	bx	lr

08001564 <sbrk_aligned>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	4e0e      	ldr	r6, [pc, #56]	; (80015a0 <sbrk_aligned+0x3c>)
 8001568:	460c      	mov	r4, r1
 800156a:	6831      	ldr	r1, [r6, #0]
 800156c:	4605      	mov	r5, r0
 800156e:	b911      	cbnz	r1, 8001576 <sbrk_aligned+0x12>
 8001570:	f000 fb78 	bl	8001c64 <_sbrk_r>
 8001574:	6030      	str	r0, [r6, #0]
 8001576:	4621      	mov	r1, r4
 8001578:	4628      	mov	r0, r5
 800157a:	f000 fb73 	bl	8001c64 <_sbrk_r>
 800157e:	1c43      	adds	r3, r0, #1
 8001580:	d00a      	beq.n	8001598 <sbrk_aligned+0x34>
 8001582:	1cc4      	adds	r4, r0, #3
 8001584:	f024 0403 	bic.w	r4, r4, #3
 8001588:	42a0      	cmp	r0, r4
 800158a:	d007      	beq.n	800159c <sbrk_aligned+0x38>
 800158c:	1a21      	subs	r1, r4, r0
 800158e:	4628      	mov	r0, r5
 8001590:	f000 fb68 	bl	8001c64 <_sbrk_r>
 8001594:	3001      	adds	r0, #1
 8001596:	d101      	bne.n	800159c <sbrk_aligned+0x38>
 8001598:	f04f 34ff 	mov.w	r4, #4294967295
 800159c:	4620      	mov	r0, r4
 800159e:	bd70      	pop	{r4, r5, r6, pc}
 80015a0:	200002a8 	.word	0x200002a8

080015a4 <_malloc_r>:
 80015a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015a8:	1ccd      	adds	r5, r1, #3
 80015aa:	f025 0503 	bic.w	r5, r5, #3
 80015ae:	3508      	adds	r5, #8
 80015b0:	2d0c      	cmp	r5, #12
 80015b2:	bf38      	it	cc
 80015b4:	250c      	movcc	r5, #12
 80015b6:	2d00      	cmp	r5, #0
 80015b8:	4607      	mov	r7, r0
 80015ba:	db01      	blt.n	80015c0 <_malloc_r+0x1c>
 80015bc:	42a9      	cmp	r1, r5
 80015be:	d905      	bls.n	80015cc <_malloc_r+0x28>
 80015c0:	230c      	movs	r3, #12
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	2600      	movs	r6, #0
 80015c6:	4630      	mov	r0, r6
 80015c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015cc:	4e2e      	ldr	r6, [pc, #184]	; (8001688 <_malloc_r+0xe4>)
 80015ce:	f000 fdb5 	bl	800213c <__malloc_lock>
 80015d2:	6833      	ldr	r3, [r6, #0]
 80015d4:	461c      	mov	r4, r3
 80015d6:	bb34      	cbnz	r4, 8001626 <_malloc_r+0x82>
 80015d8:	4629      	mov	r1, r5
 80015da:	4638      	mov	r0, r7
 80015dc:	f7ff ffc2 	bl	8001564 <sbrk_aligned>
 80015e0:	1c43      	adds	r3, r0, #1
 80015e2:	4604      	mov	r4, r0
 80015e4:	d14d      	bne.n	8001682 <_malloc_r+0xde>
 80015e6:	6834      	ldr	r4, [r6, #0]
 80015e8:	4626      	mov	r6, r4
 80015ea:	2e00      	cmp	r6, #0
 80015ec:	d140      	bne.n	8001670 <_malloc_r+0xcc>
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	4631      	mov	r1, r6
 80015f2:	4638      	mov	r0, r7
 80015f4:	eb04 0803 	add.w	r8, r4, r3
 80015f8:	f000 fb34 	bl	8001c64 <_sbrk_r>
 80015fc:	4580      	cmp	r8, r0
 80015fe:	d13a      	bne.n	8001676 <_malloc_r+0xd2>
 8001600:	6821      	ldr	r1, [r4, #0]
 8001602:	3503      	adds	r5, #3
 8001604:	1a6d      	subs	r5, r5, r1
 8001606:	f025 0503 	bic.w	r5, r5, #3
 800160a:	3508      	adds	r5, #8
 800160c:	2d0c      	cmp	r5, #12
 800160e:	bf38      	it	cc
 8001610:	250c      	movcc	r5, #12
 8001612:	4629      	mov	r1, r5
 8001614:	4638      	mov	r0, r7
 8001616:	f7ff ffa5 	bl	8001564 <sbrk_aligned>
 800161a:	3001      	adds	r0, #1
 800161c:	d02b      	beq.n	8001676 <_malloc_r+0xd2>
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	442b      	add	r3, r5
 8001622:	6023      	str	r3, [r4, #0]
 8001624:	e00e      	b.n	8001644 <_malloc_r+0xa0>
 8001626:	6822      	ldr	r2, [r4, #0]
 8001628:	1b52      	subs	r2, r2, r5
 800162a:	d41e      	bmi.n	800166a <_malloc_r+0xc6>
 800162c:	2a0b      	cmp	r2, #11
 800162e:	d916      	bls.n	800165e <_malloc_r+0xba>
 8001630:	1961      	adds	r1, r4, r5
 8001632:	42a3      	cmp	r3, r4
 8001634:	6025      	str	r5, [r4, #0]
 8001636:	bf18      	it	ne
 8001638:	6059      	strne	r1, [r3, #4]
 800163a:	6863      	ldr	r3, [r4, #4]
 800163c:	bf08      	it	eq
 800163e:	6031      	streq	r1, [r6, #0]
 8001640:	5162      	str	r2, [r4, r5]
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	4638      	mov	r0, r7
 8001646:	f104 060b 	add.w	r6, r4, #11
 800164a:	f000 fd7d 	bl	8002148 <__malloc_unlock>
 800164e:	f026 0607 	bic.w	r6, r6, #7
 8001652:	1d23      	adds	r3, r4, #4
 8001654:	1af2      	subs	r2, r6, r3
 8001656:	d0b6      	beq.n	80015c6 <_malloc_r+0x22>
 8001658:	1b9b      	subs	r3, r3, r6
 800165a:	50a3      	str	r3, [r4, r2]
 800165c:	e7b3      	b.n	80015c6 <_malloc_r+0x22>
 800165e:	6862      	ldr	r2, [r4, #4]
 8001660:	42a3      	cmp	r3, r4
 8001662:	bf0c      	ite	eq
 8001664:	6032      	streq	r2, [r6, #0]
 8001666:	605a      	strne	r2, [r3, #4]
 8001668:	e7ec      	b.n	8001644 <_malloc_r+0xa0>
 800166a:	4623      	mov	r3, r4
 800166c:	6864      	ldr	r4, [r4, #4]
 800166e:	e7b2      	b.n	80015d6 <_malloc_r+0x32>
 8001670:	4634      	mov	r4, r6
 8001672:	6876      	ldr	r6, [r6, #4]
 8001674:	e7b9      	b.n	80015ea <_malloc_r+0x46>
 8001676:	230c      	movs	r3, #12
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	4638      	mov	r0, r7
 800167c:	f000 fd64 	bl	8002148 <__malloc_unlock>
 8001680:	e7a1      	b.n	80015c6 <_malloc_r+0x22>
 8001682:	6025      	str	r5, [r4, #0]
 8001684:	e7de      	b.n	8001644 <_malloc_r+0xa0>
 8001686:	bf00      	nop
 8001688:	200002a4 	.word	0x200002a4

0800168c <__sfputc_r>:
 800168c:	6893      	ldr	r3, [r2, #8]
 800168e:	3b01      	subs	r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	b410      	push	{r4}
 8001694:	6093      	str	r3, [r2, #8]
 8001696:	da07      	bge.n	80016a8 <__sfputc_r+0x1c>
 8001698:	6994      	ldr	r4, [r2, #24]
 800169a:	42a3      	cmp	r3, r4
 800169c:	db01      	blt.n	80016a2 <__sfputc_r+0x16>
 800169e:	290a      	cmp	r1, #10
 80016a0:	d102      	bne.n	80016a8 <__sfputc_r+0x1c>
 80016a2:	bc10      	pop	{r4}
 80016a4:	f000 bb32 	b.w	8001d0c <__swbuf_r>
 80016a8:	6813      	ldr	r3, [r2, #0]
 80016aa:	1c58      	adds	r0, r3, #1
 80016ac:	6010      	str	r0, [r2, #0]
 80016ae:	7019      	strb	r1, [r3, #0]
 80016b0:	4608      	mov	r0, r1
 80016b2:	bc10      	pop	{r4}
 80016b4:	4770      	bx	lr

080016b6 <__sfputs_r>:
 80016b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b8:	4606      	mov	r6, r0
 80016ba:	460f      	mov	r7, r1
 80016bc:	4614      	mov	r4, r2
 80016be:	18d5      	adds	r5, r2, r3
 80016c0:	42ac      	cmp	r4, r5
 80016c2:	d101      	bne.n	80016c8 <__sfputs_r+0x12>
 80016c4:	2000      	movs	r0, #0
 80016c6:	e007      	b.n	80016d8 <__sfputs_r+0x22>
 80016c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016cc:	463a      	mov	r2, r7
 80016ce:	4630      	mov	r0, r6
 80016d0:	f7ff ffdc 	bl	800168c <__sfputc_r>
 80016d4:	1c43      	adds	r3, r0, #1
 80016d6:	d1f3      	bne.n	80016c0 <__sfputs_r+0xa>
 80016d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080016dc <_vfiprintf_r>:
 80016dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e0:	460d      	mov	r5, r1
 80016e2:	b09d      	sub	sp, #116	; 0x74
 80016e4:	4614      	mov	r4, r2
 80016e6:	4698      	mov	r8, r3
 80016e8:	4606      	mov	r6, r0
 80016ea:	b118      	cbz	r0, 80016f4 <_vfiprintf_r+0x18>
 80016ec:	6983      	ldr	r3, [r0, #24]
 80016ee:	b90b      	cbnz	r3, 80016f4 <_vfiprintf_r+0x18>
 80016f0:	f7ff fe98 	bl	8001424 <__sinit>
 80016f4:	4b89      	ldr	r3, [pc, #548]	; (800191c <_vfiprintf_r+0x240>)
 80016f6:	429d      	cmp	r5, r3
 80016f8:	d11b      	bne.n	8001732 <_vfiprintf_r+0x56>
 80016fa:	6875      	ldr	r5, [r6, #4]
 80016fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016fe:	07d9      	lsls	r1, r3, #31
 8001700:	d405      	bmi.n	800170e <_vfiprintf_r+0x32>
 8001702:	89ab      	ldrh	r3, [r5, #12]
 8001704:	059a      	lsls	r2, r3, #22
 8001706:	d402      	bmi.n	800170e <_vfiprintf_r+0x32>
 8001708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800170a:	f7ff ff29 	bl	8001560 <__retarget_lock_acquire_recursive>
 800170e:	89ab      	ldrh	r3, [r5, #12]
 8001710:	071b      	lsls	r3, r3, #28
 8001712:	d501      	bpl.n	8001718 <_vfiprintf_r+0x3c>
 8001714:	692b      	ldr	r3, [r5, #16]
 8001716:	b9eb      	cbnz	r3, 8001754 <_vfiprintf_r+0x78>
 8001718:	4629      	mov	r1, r5
 800171a:	4630      	mov	r0, r6
 800171c:	f000 fb5a 	bl	8001dd4 <__swsetup_r>
 8001720:	b1c0      	cbz	r0, 8001754 <_vfiprintf_r+0x78>
 8001722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001724:	07dc      	lsls	r4, r3, #31
 8001726:	d50e      	bpl.n	8001746 <_vfiprintf_r+0x6a>
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	b01d      	add	sp, #116	; 0x74
 800172e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001732:	4b7b      	ldr	r3, [pc, #492]	; (8001920 <_vfiprintf_r+0x244>)
 8001734:	429d      	cmp	r5, r3
 8001736:	d101      	bne.n	800173c <_vfiprintf_r+0x60>
 8001738:	68b5      	ldr	r5, [r6, #8]
 800173a:	e7df      	b.n	80016fc <_vfiprintf_r+0x20>
 800173c:	4b79      	ldr	r3, [pc, #484]	; (8001924 <_vfiprintf_r+0x248>)
 800173e:	429d      	cmp	r5, r3
 8001740:	bf08      	it	eq
 8001742:	68f5      	ldreq	r5, [r6, #12]
 8001744:	e7da      	b.n	80016fc <_vfiprintf_r+0x20>
 8001746:	89ab      	ldrh	r3, [r5, #12]
 8001748:	0598      	lsls	r0, r3, #22
 800174a:	d4ed      	bmi.n	8001728 <_vfiprintf_r+0x4c>
 800174c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800174e:	f7ff ff08 	bl	8001562 <__retarget_lock_release_recursive>
 8001752:	e7e9      	b.n	8001728 <_vfiprintf_r+0x4c>
 8001754:	2300      	movs	r3, #0
 8001756:	9309      	str	r3, [sp, #36]	; 0x24
 8001758:	2320      	movs	r3, #32
 800175a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800175e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001762:	2330      	movs	r3, #48	; 0x30
 8001764:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001928 <_vfiprintf_r+0x24c>
 8001768:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800176c:	f04f 0901 	mov.w	r9, #1
 8001770:	4623      	mov	r3, r4
 8001772:	469a      	mov	sl, r3
 8001774:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001778:	b10a      	cbz	r2, 800177e <_vfiprintf_r+0xa2>
 800177a:	2a25      	cmp	r2, #37	; 0x25
 800177c:	d1f9      	bne.n	8001772 <_vfiprintf_r+0x96>
 800177e:	ebba 0b04 	subs.w	fp, sl, r4
 8001782:	d00b      	beq.n	800179c <_vfiprintf_r+0xc0>
 8001784:	465b      	mov	r3, fp
 8001786:	4622      	mov	r2, r4
 8001788:	4629      	mov	r1, r5
 800178a:	4630      	mov	r0, r6
 800178c:	f7ff ff93 	bl	80016b6 <__sfputs_r>
 8001790:	3001      	adds	r0, #1
 8001792:	f000 80aa 	beq.w	80018ea <_vfiprintf_r+0x20e>
 8001796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001798:	445a      	add	r2, fp
 800179a:	9209      	str	r2, [sp, #36]	; 0x24
 800179c:	f89a 3000 	ldrb.w	r3, [sl]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 80a2 	beq.w	80018ea <_vfiprintf_r+0x20e>
 80017a6:	2300      	movs	r3, #0
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017b0:	f10a 0a01 	add.w	sl, sl, #1
 80017b4:	9304      	str	r3, [sp, #16]
 80017b6:	9307      	str	r3, [sp, #28]
 80017b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017bc:	931a      	str	r3, [sp, #104]	; 0x68
 80017be:	4654      	mov	r4, sl
 80017c0:	2205      	movs	r2, #5
 80017c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017c6:	4858      	ldr	r0, [pc, #352]	; (8001928 <_vfiprintf_r+0x24c>)
 80017c8:	f7fe fd12 	bl	80001f0 <memchr>
 80017cc:	9a04      	ldr	r2, [sp, #16]
 80017ce:	b9d8      	cbnz	r0, 8001808 <_vfiprintf_r+0x12c>
 80017d0:	06d1      	lsls	r1, r2, #27
 80017d2:	bf44      	itt	mi
 80017d4:	2320      	movmi	r3, #32
 80017d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017da:	0713      	lsls	r3, r2, #28
 80017dc:	bf44      	itt	mi
 80017de:	232b      	movmi	r3, #43	; 0x2b
 80017e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017e4:	f89a 3000 	ldrb.w	r3, [sl]
 80017e8:	2b2a      	cmp	r3, #42	; 0x2a
 80017ea:	d015      	beq.n	8001818 <_vfiprintf_r+0x13c>
 80017ec:	9a07      	ldr	r2, [sp, #28]
 80017ee:	4654      	mov	r4, sl
 80017f0:	2000      	movs	r0, #0
 80017f2:	f04f 0c0a 	mov.w	ip, #10
 80017f6:	4621      	mov	r1, r4
 80017f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017fc:	3b30      	subs	r3, #48	; 0x30
 80017fe:	2b09      	cmp	r3, #9
 8001800:	d94e      	bls.n	80018a0 <_vfiprintf_r+0x1c4>
 8001802:	b1b0      	cbz	r0, 8001832 <_vfiprintf_r+0x156>
 8001804:	9207      	str	r2, [sp, #28]
 8001806:	e014      	b.n	8001832 <_vfiprintf_r+0x156>
 8001808:	eba0 0308 	sub.w	r3, r0, r8
 800180c:	fa09 f303 	lsl.w	r3, r9, r3
 8001810:	4313      	orrs	r3, r2
 8001812:	9304      	str	r3, [sp, #16]
 8001814:	46a2      	mov	sl, r4
 8001816:	e7d2      	b.n	80017be <_vfiprintf_r+0xe2>
 8001818:	9b03      	ldr	r3, [sp, #12]
 800181a:	1d19      	adds	r1, r3, #4
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	9103      	str	r1, [sp, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	bfbb      	ittet	lt
 8001824:	425b      	neglt	r3, r3
 8001826:	f042 0202 	orrlt.w	r2, r2, #2
 800182a:	9307      	strge	r3, [sp, #28]
 800182c:	9307      	strlt	r3, [sp, #28]
 800182e:	bfb8      	it	lt
 8001830:	9204      	strlt	r2, [sp, #16]
 8001832:	7823      	ldrb	r3, [r4, #0]
 8001834:	2b2e      	cmp	r3, #46	; 0x2e
 8001836:	d10c      	bne.n	8001852 <_vfiprintf_r+0x176>
 8001838:	7863      	ldrb	r3, [r4, #1]
 800183a:	2b2a      	cmp	r3, #42	; 0x2a
 800183c:	d135      	bne.n	80018aa <_vfiprintf_r+0x1ce>
 800183e:	9b03      	ldr	r3, [sp, #12]
 8001840:	1d1a      	adds	r2, r3, #4
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	9203      	str	r2, [sp, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	bfb8      	it	lt
 800184a:	f04f 33ff 	movlt.w	r3, #4294967295
 800184e:	3402      	adds	r4, #2
 8001850:	9305      	str	r3, [sp, #20]
 8001852:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800192c <_vfiprintf_r+0x250>
 8001856:	7821      	ldrb	r1, [r4, #0]
 8001858:	2203      	movs	r2, #3
 800185a:	4650      	mov	r0, sl
 800185c:	f7fe fcc8 	bl	80001f0 <memchr>
 8001860:	b140      	cbz	r0, 8001874 <_vfiprintf_r+0x198>
 8001862:	2340      	movs	r3, #64	; 0x40
 8001864:	eba0 000a 	sub.w	r0, r0, sl
 8001868:	fa03 f000 	lsl.w	r0, r3, r0
 800186c:	9b04      	ldr	r3, [sp, #16]
 800186e:	4303      	orrs	r3, r0
 8001870:	3401      	adds	r4, #1
 8001872:	9304      	str	r3, [sp, #16]
 8001874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001878:	482d      	ldr	r0, [pc, #180]	; (8001930 <_vfiprintf_r+0x254>)
 800187a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800187e:	2206      	movs	r2, #6
 8001880:	f7fe fcb6 	bl	80001f0 <memchr>
 8001884:	2800      	cmp	r0, #0
 8001886:	d03f      	beq.n	8001908 <_vfiprintf_r+0x22c>
 8001888:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <_vfiprintf_r+0x258>)
 800188a:	bb1b      	cbnz	r3, 80018d4 <_vfiprintf_r+0x1f8>
 800188c:	9b03      	ldr	r3, [sp, #12]
 800188e:	3307      	adds	r3, #7
 8001890:	f023 0307 	bic.w	r3, r3, #7
 8001894:	3308      	adds	r3, #8
 8001896:	9303      	str	r3, [sp, #12]
 8001898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800189a:	443b      	add	r3, r7
 800189c:	9309      	str	r3, [sp, #36]	; 0x24
 800189e:	e767      	b.n	8001770 <_vfiprintf_r+0x94>
 80018a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80018a4:	460c      	mov	r4, r1
 80018a6:	2001      	movs	r0, #1
 80018a8:	e7a5      	b.n	80017f6 <_vfiprintf_r+0x11a>
 80018aa:	2300      	movs	r3, #0
 80018ac:	3401      	adds	r4, #1
 80018ae:	9305      	str	r3, [sp, #20]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f04f 0c0a 	mov.w	ip, #10
 80018b6:	4620      	mov	r0, r4
 80018b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018bc:	3a30      	subs	r2, #48	; 0x30
 80018be:	2a09      	cmp	r2, #9
 80018c0:	d903      	bls.n	80018ca <_vfiprintf_r+0x1ee>
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0c5      	beq.n	8001852 <_vfiprintf_r+0x176>
 80018c6:	9105      	str	r1, [sp, #20]
 80018c8:	e7c3      	b.n	8001852 <_vfiprintf_r+0x176>
 80018ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80018ce:	4604      	mov	r4, r0
 80018d0:	2301      	movs	r3, #1
 80018d2:	e7f0      	b.n	80018b6 <_vfiprintf_r+0x1da>
 80018d4:	ab03      	add	r3, sp, #12
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	462a      	mov	r2, r5
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <_vfiprintf_r+0x25c>)
 80018dc:	a904      	add	r1, sp, #16
 80018de:	4630      	mov	r0, r6
 80018e0:	f3af 8000 	nop.w
 80018e4:	4607      	mov	r7, r0
 80018e6:	1c78      	adds	r0, r7, #1
 80018e8:	d1d6      	bne.n	8001898 <_vfiprintf_r+0x1bc>
 80018ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018ec:	07d9      	lsls	r1, r3, #31
 80018ee:	d405      	bmi.n	80018fc <_vfiprintf_r+0x220>
 80018f0:	89ab      	ldrh	r3, [r5, #12]
 80018f2:	059a      	lsls	r2, r3, #22
 80018f4:	d402      	bmi.n	80018fc <_vfiprintf_r+0x220>
 80018f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80018f8:	f7ff fe33 	bl	8001562 <__retarget_lock_release_recursive>
 80018fc:	89ab      	ldrh	r3, [r5, #12]
 80018fe:	065b      	lsls	r3, r3, #25
 8001900:	f53f af12 	bmi.w	8001728 <_vfiprintf_r+0x4c>
 8001904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001906:	e711      	b.n	800172c <_vfiprintf_r+0x50>
 8001908:	ab03      	add	r3, sp, #12
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	462a      	mov	r2, r5
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <_vfiprintf_r+0x25c>)
 8001910:	a904      	add	r1, sp, #16
 8001912:	4630      	mov	r0, r6
 8001914:	f000 f880 	bl	8001a18 <_printf_i>
 8001918:	e7e4      	b.n	80018e4 <_vfiprintf_r+0x208>
 800191a:	bf00      	nop
 800191c:	0800229c 	.word	0x0800229c
 8001920:	080022bc 	.word	0x080022bc
 8001924:	0800227c 	.word	0x0800227c
 8001928:	080022dc 	.word	0x080022dc
 800192c:	080022e2 	.word	0x080022e2
 8001930:	080022e6 	.word	0x080022e6
 8001934:	00000000 	.word	0x00000000
 8001938:	080016b7 	.word	0x080016b7

0800193c <_printf_common>:
 800193c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001940:	4616      	mov	r6, r2
 8001942:	4699      	mov	r9, r3
 8001944:	688a      	ldr	r2, [r1, #8]
 8001946:	690b      	ldr	r3, [r1, #16]
 8001948:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800194c:	4293      	cmp	r3, r2
 800194e:	bfb8      	it	lt
 8001950:	4613      	movlt	r3, r2
 8001952:	6033      	str	r3, [r6, #0]
 8001954:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001958:	4607      	mov	r7, r0
 800195a:	460c      	mov	r4, r1
 800195c:	b10a      	cbz	r2, 8001962 <_printf_common+0x26>
 800195e:	3301      	adds	r3, #1
 8001960:	6033      	str	r3, [r6, #0]
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	0699      	lsls	r1, r3, #26
 8001966:	bf42      	ittt	mi
 8001968:	6833      	ldrmi	r3, [r6, #0]
 800196a:	3302      	addmi	r3, #2
 800196c:	6033      	strmi	r3, [r6, #0]
 800196e:	6825      	ldr	r5, [r4, #0]
 8001970:	f015 0506 	ands.w	r5, r5, #6
 8001974:	d106      	bne.n	8001984 <_printf_common+0x48>
 8001976:	f104 0a19 	add.w	sl, r4, #25
 800197a:	68e3      	ldr	r3, [r4, #12]
 800197c:	6832      	ldr	r2, [r6, #0]
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	42ab      	cmp	r3, r5
 8001982:	dc26      	bgt.n	80019d2 <_printf_common+0x96>
 8001984:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001988:	1e13      	subs	r3, r2, #0
 800198a:	6822      	ldr	r2, [r4, #0]
 800198c:	bf18      	it	ne
 800198e:	2301      	movne	r3, #1
 8001990:	0692      	lsls	r2, r2, #26
 8001992:	d42b      	bmi.n	80019ec <_printf_common+0xb0>
 8001994:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001998:	4649      	mov	r1, r9
 800199a:	4638      	mov	r0, r7
 800199c:	47c0      	blx	r8
 800199e:	3001      	adds	r0, #1
 80019a0:	d01e      	beq.n	80019e0 <_printf_common+0xa4>
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	68e5      	ldr	r5, [r4, #12]
 80019a6:	6832      	ldr	r2, [r6, #0]
 80019a8:	f003 0306 	and.w	r3, r3, #6
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	bf08      	it	eq
 80019b0:	1aad      	subeq	r5, r5, r2
 80019b2:	68a3      	ldr	r3, [r4, #8]
 80019b4:	6922      	ldr	r2, [r4, #16]
 80019b6:	bf0c      	ite	eq
 80019b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019bc:	2500      	movne	r5, #0
 80019be:	4293      	cmp	r3, r2
 80019c0:	bfc4      	itt	gt
 80019c2:	1a9b      	subgt	r3, r3, r2
 80019c4:	18ed      	addgt	r5, r5, r3
 80019c6:	2600      	movs	r6, #0
 80019c8:	341a      	adds	r4, #26
 80019ca:	42b5      	cmp	r5, r6
 80019cc:	d11a      	bne.n	8001a04 <_printf_common+0xc8>
 80019ce:	2000      	movs	r0, #0
 80019d0:	e008      	b.n	80019e4 <_printf_common+0xa8>
 80019d2:	2301      	movs	r3, #1
 80019d4:	4652      	mov	r2, sl
 80019d6:	4649      	mov	r1, r9
 80019d8:	4638      	mov	r0, r7
 80019da:	47c0      	blx	r8
 80019dc:	3001      	adds	r0, #1
 80019de:	d103      	bne.n	80019e8 <_printf_common+0xac>
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019e8:	3501      	adds	r5, #1
 80019ea:	e7c6      	b.n	800197a <_printf_common+0x3e>
 80019ec:	18e1      	adds	r1, r4, r3
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	2030      	movs	r0, #48	; 0x30
 80019f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019f6:	4422      	add	r2, r4
 80019f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a00:	3302      	adds	r3, #2
 8001a02:	e7c7      	b.n	8001994 <_printf_common+0x58>
 8001a04:	2301      	movs	r3, #1
 8001a06:	4622      	mov	r2, r4
 8001a08:	4649      	mov	r1, r9
 8001a0a:	4638      	mov	r0, r7
 8001a0c:	47c0      	blx	r8
 8001a0e:	3001      	adds	r0, #1
 8001a10:	d0e6      	beq.n	80019e0 <_printf_common+0xa4>
 8001a12:	3601      	adds	r6, #1
 8001a14:	e7d9      	b.n	80019ca <_printf_common+0x8e>
	...

08001a18 <_printf_i>:
 8001a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a1c:	7e0f      	ldrb	r7, [r1, #24]
 8001a1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001a20:	2f78      	cmp	r7, #120	; 0x78
 8001a22:	4691      	mov	r9, r2
 8001a24:	4680      	mov	r8, r0
 8001a26:	460c      	mov	r4, r1
 8001a28:	469a      	mov	sl, r3
 8001a2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001a2e:	d807      	bhi.n	8001a40 <_printf_i+0x28>
 8001a30:	2f62      	cmp	r7, #98	; 0x62
 8001a32:	d80a      	bhi.n	8001a4a <_printf_i+0x32>
 8001a34:	2f00      	cmp	r7, #0
 8001a36:	f000 80d8 	beq.w	8001bea <_printf_i+0x1d2>
 8001a3a:	2f58      	cmp	r7, #88	; 0x58
 8001a3c:	f000 80a3 	beq.w	8001b86 <_printf_i+0x16e>
 8001a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a48:	e03a      	b.n	8001ac0 <_printf_i+0xa8>
 8001a4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a4e:	2b15      	cmp	r3, #21
 8001a50:	d8f6      	bhi.n	8001a40 <_printf_i+0x28>
 8001a52:	a101      	add	r1, pc, #4	; (adr r1, 8001a58 <_printf_i+0x40>)
 8001a54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a58:	08001ab1 	.word	0x08001ab1
 8001a5c:	08001ac5 	.word	0x08001ac5
 8001a60:	08001a41 	.word	0x08001a41
 8001a64:	08001a41 	.word	0x08001a41
 8001a68:	08001a41 	.word	0x08001a41
 8001a6c:	08001a41 	.word	0x08001a41
 8001a70:	08001ac5 	.word	0x08001ac5
 8001a74:	08001a41 	.word	0x08001a41
 8001a78:	08001a41 	.word	0x08001a41
 8001a7c:	08001a41 	.word	0x08001a41
 8001a80:	08001a41 	.word	0x08001a41
 8001a84:	08001bd1 	.word	0x08001bd1
 8001a88:	08001af5 	.word	0x08001af5
 8001a8c:	08001bb3 	.word	0x08001bb3
 8001a90:	08001a41 	.word	0x08001a41
 8001a94:	08001a41 	.word	0x08001a41
 8001a98:	08001bf3 	.word	0x08001bf3
 8001a9c:	08001a41 	.word	0x08001a41
 8001aa0:	08001af5 	.word	0x08001af5
 8001aa4:	08001a41 	.word	0x08001a41
 8001aa8:	08001a41 	.word	0x08001a41
 8001aac:	08001bbb 	.word	0x08001bbb
 8001ab0:	682b      	ldr	r3, [r5, #0]
 8001ab2:	1d1a      	adds	r2, r3, #4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	602a      	str	r2, [r5, #0]
 8001ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0a3      	b.n	8001c0c <_printf_i+0x1f4>
 8001ac4:	6820      	ldr	r0, [r4, #0]
 8001ac6:	6829      	ldr	r1, [r5, #0]
 8001ac8:	0606      	lsls	r6, r0, #24
 8001aca:	f101 0304 	add.w	r3, r1, #4
 8001ace:	d50a      	bpl.n	8001ae6 <_printf_i+0xce>
 8001ad0:	680e      	ldr	r6, [r1, #0]
 8001ad2:	602b      	str	r3, [r5, #0]
 8001ad4:	2e00      	cmp	r6, #0
 8001ad6:	da03      	bge.n	8001ae0 <_printf_i+0xc8>
 8001ad8:	232d      	movs	r3, #45	; 0x2d
 8001ada:	4276      	negs	r6, r6
 8001adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ae0:	485e      	ldr	r0, [pc, #376]	; (8001c5c <_printf_i+0x244>)
 8001ae2:	230a      	movs	r3, #10
 8001ae4:	e019      	b.n	8001b1a <_printf_i+0x102>
 8001ae6:	680e      	ldr	r6, [r1, #0]
 8001ae8:	602b      	str	r3, [r5, #0]
 8001aea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001aee:	bf18      	it	ne
 8001af0:	b236      	sxthne	r6, r6
 8001af2:	e7ef      	b.n	8001ad4 <_printf_i+0xbc>
 8001af4:	682b      	ldr	r3, [r5, #0]
 8001af6:	6820      	ldr	r0, [r4, #0]
 8001af8:	1d19      	adds	r1, r3, #4
 8001afa:	6029      	str	r1, [r5, #0]
 8001afc:	0601      	lsls	r1, r0, #24
 8001afe:	d501      	bpl.n	8001b04 <_printf_i+0xec>
 8001b00:	681e      	ldr	r6, [r3, #0]
 8001b02:	e002      	b.n	8001b0a <_printf_i+0xf2>
 8001b04:	0646      	lsls	r6, r0, #25
 8001b06:	d5fb      	bpl.n	8001b00 <_printf_i+0xe8>
 8001b08:	881e      	ldrh	r6, [r3, #0]
 8001b0a:	4854      	ldr	r0, [pc, #336]	; (8001c5c <_printf_i+0x244>)
 8001b0c:	2f6f      	cmp	r7, #111	; 0x6f
 8001b0e:	bf0c      	ite	eq
 8001b10:	2308      	moveq	r3, #8
 8001b12:	230a      	movne	r3, #10
 8001b14:	2100      	movs	r1, #0
 8001b16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b1a:	6865      	ldr	r5, [r4, #4]
 8001b1c:	60a5      	str	r5, [r4, #8]
 8001b1e:	2d00      	cmp	r5, #0
 8001b20:	bfa2      	ittt	ge
 8001b22:	6821      	ldrge	r1, [r4, #0]
 8001b24:	f021 0104 	bicge.w	r1, r1, #4
 8001b28:	6021      	strge	r1, [r4, #0]
 8001b2a:	b90e      	cbnz	r6, 8001b30 <_printf_i+0x118>
 8001b2c:	2d00      	cmp	r5, #0
 8001b2e:	d04d      	beq.n	8001bcc <_printf_i+0x1b4>
 8001b30:	4615      	mov	r5, r2
 8001b32:	fbb6 f1f3 	udiv	r1, r6, r3
 8001b36:	fb03 6711 	mls	r7, r3, r1, r6
 8001b3a:	5dc7      	ldrb	r7, [r0, r7]
 8001b3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001b40:	4637      	mov	r7, r6
 8001b42:	42bb      	cmp	r3, r7
 8001b44:	460e      	mov	r6, r1
 8001b46:	d9f4      	bls.n	8001b32 <_printf_i+0x11a>
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d10b      	bne.n	8001b64 <_printf_i+0x14c>
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	07de      	lsls	r6, r3, #31
 8001b50:	d508      	bpl.n	8001b64 <_printf_i+0x14c>
 8001b52:	6923      	ldr	r3, [r4, #16]
 8001b54:	6861      	ldr	r1, [r4, #4]
 8001b56:	4299      	cmp	r1, r3
 8001b58:	bfde      	ittt	le
 8001b5a:	2330      	movle	r3, #48	; 0x30
 8001b5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b64:	1b52      	subs	r2, r2, r5
 8001b66:	6122      	str	r2, [r4, #16]
 8001b68:	f8cd a000 	str.w	sl, [sp]
 8001b6c:	464b      	mov	r3, r9
 8001b6e:	aa03      	add	r2, sp, #12
 8001b70:	4621      	mov	r1, r4
 8001b72:	4640      	mov	r0, r8
 8001b74:	f7ff fee2 	bl	800193c <_printf_common>
 8001b78:	3001      	adds	r0, #1
 8001b7a:	d14c      	bne.n	8001c16 <_printf_i+0x1fe>
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	b004      	add	sp, #16
 8001b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b86:	4835      	ldr	r0, [pc, #212]	; (8001c5c <_printf_i+0x244>)
 8001b88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001b8c:	6829      	ldr	r1, [r5, #0]
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	f851 6b04 	ldr.w	r6, [r1], #4
 8001b94:	6029      	str	r1, [r5, #0]
 8001b96:	061d      	lsls	r5, r3, #24
 8001b98:	d514      	bpl.n	8001bc4 <_printf_i+0x1ac>
 8001b9a:	07df      	lsls	r7, r3, #31
 8001b9c:	bf44      	itt	mi
 8001b9e:	f043 0320 	orrmi.w	r3, r3, #32
 8001ba2:	6023      	strmi	r3, [r4, #0]
 8001ba4:	b91e      	cbnz	r6, 8001bae <_printf_i+0x196>
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	f023 0320 	bic.w	r3, r3, #32
 8001bac:	6023      	str	r3, [r4, #0]
 8001bae:	2310      	movs	r3, #16
 8001bb0:	e7b0      	b.n	8001b14 <_printf_i+0xfc>
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	f043 0320 	orr.w	r3, r3, #32
 8001bb8:	6023      	str	r3, [r4, #0]
 8001bba:	2378      	movs	r3, #120	; 0x78
 8001bbc:	4828      	ldr	r0, [pc, #160]	; (8001c60 <_printf_i+0x248>)
 8001bbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001bc2:	e7e3      	b.n	8001b8c <_printf_i+0x174>
 8001bc4:	0659      	lsls	r1, r3, #25
 8001bc6:	bf48      	it	mi
 8001bc8:	b2b6      	uxthmi	r6, r6
 8001bca:	e7e6      	b.n	8001b9a <_printf_i+0x182>
 8001bcc:	4615      	mov	r5, r2
 8001bce:	e7bb      	b.n	8001b48 <_printf_i+0x130>
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	6826      	ldr	r6, [r4, #0]
 8001bd4:	6961      	ldr	r1, [r4, #20]
 8001bd6:	1d18      	adds	r0, r3, #4
 8001bd8:	6028      	str	r0, [r5, #0]
 8001bda:	0635      	lsls	r5, r6, #24
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	d501      	bpl.n	8001be4 <_printf_i+0x1cc>
 8001be0:	6019      	str	r1, [r3, #0]
 8001be2:	e002      	b.n	8001bea <_printf_i+0x1d2>
 8001be4:	0670      	lsls	r0, r6, #25
 8001be6:	d5fb      	bpl.n	8001be0 <_printf_i+0x1c8>
 8001be8:	8019      	strh	r1, [r3, #0]
 8001bea:	2300      	movs	r3, #0
 8001bec:	6123      	str	r3, [r4, #16]
 8001bee:	4615      	mov	r5, r2
 8001bf0:	e7ba      	b.n	8001b68 <_printf_i+0x150>
 8001bf2:	682b      	ldr	r3, [r5, #0]
 8001bf4:	1d1a      	adds	r2, r3, #4
 8001bf6:	602a      	str	r2, [r5, #0]
 8001bf8:	681d      	ldr	r5, [r3, #0]
 8001bfa:	6862      	ldr	r2, [r4, #4]
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4628      	mov	r0, r5
 8001c00:	f7fe faf6 	bl	80001f0 <memchr>
 8001c04:	b108      	cbz	r0, 8001c0a <_printf_i+0x1f2>
 8001c06:	1b40      	subs	r0, r0, r5
 8001c08:	6060      	str	r0, [r4, #4]
 8001c0a:	6863      	ldr	r3, [r4, #4]
 8001c0c:	6123      	str	r3, [r4, #16]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c14:	e7a8      	b.n	8001b68 <_printf_i+0x150>
 8001c16:	6923      	ldr	r3, [r4, #16]
 8001c18:	462a      	mov	r2, r5
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	4640      	mov	r0, r8
 8001c1e:	47d0      	blx	sl
 8001c20:	3001      	adds	r0, #1
 8001c22:	d0ab      	beq.n	8001b7c <_printf_i+0x164>
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	079b      	lsls	r3, r3, #30
 8001c28:	d413      	bmi.n	8001c52 <_printf_i+0x23a>
 8001c2a:	68e0      	ldr	r0, [r4, #12]
 8001c2c:	9b03      	ldr	r3, [sp, #12]
 8001c2e:	4298      	cmp	r0, r3
 8001c30:	bfb8      	it	lt
 8001c32:	4618      	movlt	r0, r3
 8001c34:	e7a4      	b.n	8001b80 <_printf_i+0x168>
 8001c36:	2301      	movs	r3, #1
 8001c38:	4632      	mov	r2, r6
 8001c3a:	4649      	mov	r1, r9
 8001c3c:	4640      	mov	r0, r8
 8001c3e:	47d0      	blx	sl
 8001c40:	3001      	adds	r0, #1
 8001c42:	d09b      	beq.n	8001b7c <_printf_i+0x164>
 8001c44:	3501      	adds	r5, #1
 8001c46:	68e3      	ldr	r3, [r4, #12]
 8001c48:	9903      	ldr	r1, [sp, #12]
 8001c4a:	1a5b      	subs	r3, r3, r1
 8001c4c:	42ab      	cmp	r3, r5
 8001c4e:	dcf2      	bgt.n	8001c36 <_printf_i+0x21e>
 8001c50:	e7eb      	b.n	8001c2a <_printf_i+0x212>
 8001c52:	2500      	movs	r5, #0
 8001c54:	f104 0619 	add.w	r6, r4, #25
 8001c58:	e7f5      	b.n	8001c46 <_printf_i+0x22e>
 8001c5a:	bf00      	nop
 8001c5c:	080022ed 	.word	0x080022ed
 8001c60:	080022fe 	.word	0x080022fe

08001c64 <_sbrk_r>:
 8001c64:	b538      	push	{r3, r4, r5, lr}
 8001c66:	4d06      	ldr	r5, [pc, #24]	; (8001c80 <_sbrk_r+0x1c>)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	4604      	mov	r4, r0
 8001c6c:	4608      	mov	r0, r1
 8001c6e:	602b      	str	r3, [r5, #0]
 8001c70:	f7fe fccc 	bl	800060c <_sbrk>
 8001c74:	1c43      	adds	r3, r0, #1
 8001c76:	d102      	bne.n	8001c7e <_sbrk_r+0x1a>
 8001c78:	682b      	ldr	r3, [r5, #0]
 8001c7a:	b103      	cbz	r3, 8001c7e <_sbrk_r+0x1a>
 8001c7c:	6023      	str	r3, [r4, #0]
 8001c7e:	bd38      	pop	{r3, r4, r5, pc}
 8001c80:	200002ac 	.word	0x200002ac

08001c84 <__sread>:
 8001c84:	b510      	push	{r4, lr}
 8001c86:	460c      	mov	r4, r1
 8001c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c8c:	f000 faac 	bl	80021e8 <_read_r>
 8001c90:	2800      	cmp	r0, #0
 8001c92:	bfab      	itete	ge
 8001c94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001c96:	89a3      	ldrhlt	r3, [r4, #12]
 8001c98:	181b      	addge	r3, r3, r0
 8001c9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001c9e:	bfac      	ite	ge
 8001ca0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ca2:	81a3      	strhlt	r3, [r4, #12]
 8001ca4:	bd10      	pop	{r4, pc}

08001ca6 <__swrite>:
 8001ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001caa:	461f      	mov	r7, r3
 8001cac:	898b      	ldrh	r3, [r1, #12]
 8001cae:	05db      	lsls	r3, r3, #23
 8001cb0:	4605      	mov	r5, r0
 8001cb2:	460c      	mov	r4, r1
 8001cb4:	4616      	mov	r6, r2
 8001cb6:	d505      	bpl.n	8001cc4 <__swrite+0x1e>
 8001cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f000 f9c4 	bl	800204c <_lseek_r>
 8001cc4:	89a3      	ldrh	r3, [r4, #12]
 8001cc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cce:	81a3      	strh	r3, [r4, #12]
 8001cd0:	4632      	mov	r2, r6
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	4628      	mov	r0, r5
 8001cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cda:	f000 b869 	b.w	8001db0 <_write_r>

08001cde <__sseek>:
 8001cde:	b510      	push	{r4, lr}
 8001ce0:	460c      	mov	r4, r1
 8001ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ce6:	f000 f9b1 	bl	800204c <_lseek_r>
 8001cea:	1c43      	adds	r3, r0, #1
 8001cec:	89a3      	ldrh	r3, [r4, #12]
 8001cee:	bf15      	itete	ne
 8001cf0:	6560      	strne	r0, [r4, #84]	; 0x54
 8001cf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001cf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001cfa:	81a3      	strheq	r3, [r4, #12]
 8001cfc:	bf18      	it	ne
 8001cfe:	81a3      	strhne	r3, [r4, #12]
 8001d00:	bd10      	pop	{r4, pc}

08001d02 <__sclose>:
 8001d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d06:	f000 b8d3 	b.w	8001eb0 <_close_r>
	...

08001d0c <__swbuf_r>:
 8001d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0e:	460e      	mov	r6, r1
 8001d10:	4614      	mov	r4, r2
 8001d12:	4605      	mov	r5, r0
 8001d14:	b118      	cbz	r0, 8001d1e <__swbuf_r+0x12>
 8001d16:	6983      	ldr	r3, [r0, #24]
 8001d18:	b90b      	cbnz	r3, 8001d1e <__swbuf_r+0x12>
 8001d1a:	f7ff fb83 	bl	8001424 <__sinit>
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <__swbuf_r+0x98>)
 8001d20:	429c      	cmp	r4, r3
 8001d22:	d12b      	bne.n	8001d7c <__swbuf_r+0x70>
 8001d24:	686c      	ldr	r4, [r5, #4]
 8001d26:	69a3      	ldr	r3, [r4, #24]
 8001d28:	60a3      	str	r3, [r4, #8]
 8001d2a:	89a3      	ldrh	r3, [r4, #12]
 8001d2c:	071a      	lsls	r2, r3, #28
 8001d2e:	d52f      	bpl.n	8001d90 <__swbuf_r+0x84>
 8001d30:	6923      	ldr	r3, [r4, #16]
 8001d32:	b36b      	cbz	r3, 8001d90 <__swbuf_r+0x84>
 8001d34:	6923      	ldr	r3, [r4, #16]
 8001d36:	6820      	ldr	r0, [r4, #0]
 8001d38:	1ac0      	subs	r0, r0, r3
 8001d3a:	6963      	ldr	r3, [r4, #20]
 8001d3c:	b2f6      	uxtb	r6, r6
 8001d3e:	4283      	cmp	r3, r0
 8001d40:	4637      	mov	r7, r6
 8001d42:	dc04      	bgt.n	8001d4e <__swbuf_r+0x42>
 8001d44:	4621      	mov	r1, r4
 8001d46:	4628      	mov	r0, r5
 8001d48:	f000 f944 	bl	8001fd4 <_fflush_r>
 8001d4c:	bb30      	cbnz	r0, 8001d9c <__swbuf_r+0x90>
 8001d4e:	68a3      	ldr	r3, [r4, #8]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	60a3      	str	r3, [r4, #8]
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	6022      	str	r2, [r4, #0]
 8001d5a:	701e      	strb	r6, [r3, #0]
 8001d5c:	6963      	ldr	r3, [r4, #20]
 8001d5e:	3001      	adds	r0, #1
 8001d60:	4283      	cmp	r3, r0
 8001d62:	d004      	beq.n	8001d6e <__swbuf_r+0x62>
 8001d64:	89a3      	ldrh	r3, [r4, #12]
 8001d66:	07db      	lsls	r3, r3, #31
 8001d68:	d506      	bpl.n	8001d78 <__swbuf_r+0x6c>
 8001d6a:	2e0a      	cmp	r6, #10
 8001d6c:	d104      	bne.n	8001d78 <__swbuf_r+0x6c>
 8001d6e:	4621      	mov	r1, r4
 8001d70:	4628      	mov	r0, r5
 8001d72:	f000 f92f 	bl	8001fd4 <_fflush_r>
 8001d76:	b988      	cbnz	r0, 8001d9c <__swbuf_r+0x90>
 8001d78:	4638      	mov	r0, r7
 8001d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <__swbuf_r+0x9c>)
 8001d7e:	429c      	cmp	r4, r3
 8001d80:	d101      	bne.n	8001d86 <__swbuf_r+0x7a>
 8001d82:	68ac      	ldr	r4, [r5, #8]
 8001d84:	e7cf      	b.n	8001d26 <__swbuf_r+0x1a>
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <__swbuf_r+0xa0>)
 8001d88:	429c      	cmp	r4, r3
 8001d8a:	bf08      	it	eq
 8001d8c:	68ec      	ldreq	r4, [r5, #12]
 8001d8e:	e7ca      	b.n	8001d26 <__swbuf_r+0x1a>
 8001d90:	4621      	mov	r1, r4
 8001d92:	4628      	mov	r0, r5
 8001d94:	f000 f81e 	bl	8001dd4 <__swsetup_r>
 8001d98:	2800      	cmp	r0, #0
 8001d9a:	d0cb      	beq.n	8001d34 <__swbuf_r+0x28>
 8001d9c:	f04f 37ff 	mov.w	r7, #4294967295
 8001da0:	e7ea      	b.n	8001d78 <__swbuf_r+0x6c>
 8001da2:	bf00      	nop
 8001da4:	0800229c 	.word	0x0800229c
 8001da8:	080022bc 	.word	0x080022bc
 8001dac:	0800227c 	.word	0x0800227c

08001db0 <_write_r>:
 8001db0:	b538      	push	{r3, r4, r5, lr}
 8001db2:	4d07      	ldr	r5, [pc, #28]	; (8001dd0 <_write_r+0x20>)
 8001db4:	4604      	mov	r4, r0
 8001db6:	4608      	mov	r0, r1
 8001db8:	4611      	mov	r1, r2
 8001dba:	2200      	movs	r2, #0
 8001dbc:	602a      	str	r2, [r5, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f7fe fbd7 	bl	8000572 <_write>
 8001dc4:	1c43      	adds	r3, r0, #1
 8001dc6:	d102      	bne.n	8001dce <_write_r+0x1e>
 8001dc8:	682b      	ldr	r3, [r5, #0]
 8001dca:	b103      	cbz	r3, 8001dce <_write_r+0x1e>
 8001dcc:	6023      	str	r3, [r4, #0]
 8001dce:	bd38      	pop	{r3, r4, r5, pc}
 8001dd0:	200002ac 	.word	0x200002ac

08001dd4 <__swsetup_r>:
 8001dd4:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <__swsetup_r+0xcc>)
 8001dd6:	b570      	push	{r4, r5, r6, lr}
 8001dd8:	681d      	ldr	r5, [r3, #0]
 8001dda:	4606      	mov	r6, r0
 8001ddc:	460c      	mov	r4, r1
 8001dde:	b125      	cbz	r5, 8001dea <__swsetup_r+0x16>
 8001de0:	69ab      	ldr	r3, [r5, #24]
 8001de2:	b913      	cbnz	r3, 8001dea <__swsetup_r+0x16>
 8001de4:	4628      	mov	r0, r5
 8001de6:	f7ff fb1d 	bl	8001424 <__sinit>
 8001dea:	4b2e      	ldr	r3, [pc, #184]	; (8001ea4 <__swsetup_r+0xd0>)
 8001dec:	429c      	cmp	r4, r3
 8001dee:	d10f      	bne.n	8001e10 <__swsetup_r+0x3c>
 8001df0:	686c      	ldr	r4, [r5, #4]
 8001df2:	89a3      	ldrh	r3, [r4, #12]
 8001df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001df8:	0719      	lsls	r1, r3, #28
 8001dfa:	d42c      	bmi.n	8001e56 <__swsetup_r+0x82>
 8001dfc:	06dd      	lsls	r5, r3, #27
 8001dfe:	d411      	bmi.n	8001e24 <__swsetup_r+0x50>
 8001e00:	2309      	movs	r3, #9
 8001e02:	6033      	str	r3, [r6, #0]
 8001e04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001e08:	81a3      	strh	r3, [r4, #12]
 8001e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0e:	e03e      	b.n	8001e8e <__swsetup_r+0xba>
 8001e10:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <__swsetup_r+0xd4>)
 8001e12:	429c      	cmp	r4, r3
 8001e14:	d101      	bne.n	8001e1a <__swsetup_r+0x46>
 8001e16:	68ac      	ldr	r4, [r5, #8]
 8001e18:	e7eb      	b.n	8001df2 <__swsetup_r+0x1e>
 8001e1a:	4b24      	ldr	r3, [pc, #144]	; (8001eac <__swsetup_r+0xd8>)
 8001e1c:	429c      	cmp	r4, r3
 8001e1e:	bf08      	it	eq
 8001e20:	68ec      	ldreq	r4, [r5, #12]
 8001e22:	e7e6      	b.n	8001df2 <__swsetup_r+0x1e>
 8001e24:	0758      	lsls	r0, r3, #29
 8001e26:	d512      	bpl.n	8001e4e <__swsetup_r+0x7a>
 8001e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e2a:	b141      	cbz	r1, 8001e3e <__swsetup_r+0x6a>
 8001e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e30:	4299      	cmp	r1, r3
 8001e32:	d002      	beq.n	8001e3a <__swsetup_r+0x66>
 8001e34:	4630      	mov	r0, r6
 8001e36:	f000 f98d 	bl	8002154 <_free_r>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	6363      	str	r3, [r4, #52]	; 0x34
 8001e3e:	89a3      	ldrh	r3, [r4, #12]
 8001e40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e44:	81a3      	strh	r3, [r4, #12]
 8001e46:	2300      	movs	r3, #0
 8001e48:	6063      	str	r3, [r4, #4]
 8001e4a:	6923      	ldr	r3, [r4, #16]
 8001e4c:	6023      	str	r3, [r4, #0]
 8001e4e:	89a3      	ldrh	r3, [r4, #12]
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	81a3      	strh	r3, [r4, #12]
 8001e56:	6923      	ldr	r3, [r4, #16]
 8001e58:	b94b      	cbnz	r3, 8001e6e <__swsetup_r+0x9a>
 8001e5a:	89a3      	ldrh	r3, [r4, #12]
 8001e5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e64:	d003      	beq.n	8001e6e <__swsetup_r+0x9a>
 8001e66:	4621      	mov	r1, r4
 8001e68:	4630      	mov	r0, r6
 8001e6a:	f000 f927 	bl	80020bc <__smakebuf_r>
 8001e6e:	89a0      	ldrh	r0, [r4, #12]
 8001e70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e74:	f010 0301 	ands.w	r3, r0, #1
 8001e78:	d00a      	beq.n	8001e90 <__swsetup_r+0xbc>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60a3      	str	r3, [r4, #8]
 8001e7e:	6963      	ldr	r3, [r4, #20]
 8001e80:	425b      	negs	r3, r3
 8001e82:	61a3      	str	r3, [r4, #24]
 8001e84:	6923      	ldr	r3, [r4, #16]
 8001e86:	b943      	cbnz	r3, 8001e9a <__swsetup_r+0xc6>
 8001e88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001e8c:	d1ba      	bne.n	8001e04 <__swsetup_r+0x30>
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
 8001e90:	0781      	lsls	r1, r0, #30
 8001e92:	bf58      	it	pl
 8001e94:	6963      	ldrpl	r3, [r4, #20]
 8001e96:	60a3      	str	r3, [r4, #8]
 8001e98:	e7f4      	b.n	8001e84 <__swsetup_r+0xb0>
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	e7f7      	b.n	8001e8e <__swsetup_r+0xba>
 8001e9e:	bf00      	nop
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	0800229c 	.word	0x0800229c
 8001ea8:	080022bc 	.word	0x080022bc
 8001eac:	0800227c 	.word	0x0800227c

08001eb0 <_close_r>:
 8001eb0:	b538      	push	{r3, r4, r5, lr}
 8001eb2:	4d06      	ldr	r5, [pc, #24]	; (8001ecc <_close_r+0x1c>)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	4608      	mov	r0, r1
 8001eba:	602b      	str	r3, [r5, #0]
 8001ebc:	f7fe fb75 	bl	80005aa <_close>
 8001ec0:	1c43      	adds	r3, r0, #1
 8001ec2:	d102      	bne.n	8001eca <_close_r+0x1a>
 8001ec4:	682b      	ldr	r3, [r5, #0]
 8001ec6:	b103      	cbz	r3, 8001eca <_close_r+0x1a>
 8001ec8:	6023      	str	r3, [r4, #0]
 8001eca:	bd38      	pop	{r3, r4, r5, pc}
 8001ecc:	200002ac 	.word	0x200002ac

08001ed0 <__sflush_r>:
 8001ed0:	898a      	ldrh	r2, [r1, #12]
 8001ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed4:	4605      	mov	r5, r0
 8001ed6:	0710      	lsls	r0, r2, #28
 8001ed8:	460c      	mov	r4, r1
 8001eda:	d457      	bmi.n	8001f8c <__sflush_r+0xbc>
 8001edc:	684b      	ldr	r3, [r1, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	dc04      	bgt.n	8001eec <__sflush_r+0x1c>
 8001ee2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	dc01      	bgt.n	8001eec <__sflush_r+0x1c>
 8001ee8:	2000      	movs	r0, #0
 8001eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001eee:	2e00      	cmp	r6, #0
 8001ef0:	d0fa      	beq.n	8001ee8 <__sflush_r+0x18>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ef8:	682f      	ldr	r7, [r5, #0]
 8001efa:	602b      	str	r3, [r5, #0]
 8001efc:	d032      	beq.n	8001f64 <__sflush_r+0x94>
 8001efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f00:	89a3      	ldrh	r3, [r4, #12]
 8001f02:	075a      	lsls	r2, r3, #29
 8001f04:	d505      	bpl.n	8001f12 <__sflush_r+0x42>
 8001f06:	6863      	ldr	r3, [r4, #4]
 8001f08:	1ac0      	subs	r0, r0, r3
 8001f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f0c:	b10b      	cbz	r3, 8001f12 <__sflush_r+0x42>
 8001f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f10:	1ac0      	subs	r0, r0, r3
 8001f12:	2300      	movs	r3, #0
 8001f14:	4602      	mov	r2, r0
 8001f16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f18:	6a21      	ldr	r1, [r4, #32]
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	47b0      	blx	r6
 8001f1e:	1c43      	adds	r3, r0, #1
 8001f20:	89a3      	ldrh	r3, [r4, #12]
 8001f22:	d106      	bne.n	8001f32 <__sflush_r+0x62>
 8001f24:	6829      	ldr	r1, [r5, #0]
 8001f26:	291d      	cmp	r1, #29
 8001f28:	d82c      	bhi.n	8001f84 <__sflush_r+0xb4>
 8001f2a:	4a29      	ldr	r2, [pc, #164]	; (8001fd0 <__sflush_r+0x100>)
 8001f2c:	40ca      	lsrs	r2, r1
 8001f2e:	07d6      	lsls	r6, r2, #31
 8001f30:	d528      	bpl.n	8001f84 <__sflush_r+0xb4>
 8001f32:	2200      	movs	r2, #0
 8001f34:	6062      	str	r2, [r4, #4]
 8001f36:	04d9      	lsls	r1, r3, #19
 8001f38:	6922      	ldr	r2, [r4, #16]
 8001f3a:	6022      	str	r2, [r4, #0]
 8001f3c:	d504      	bpl.n	8001f48 <__sflush_r+0x78>
 8001f3e:	1c42      	adds	r2, r0, #1
 8001f40:	d101      	bne.n	8001f46 <__sflush_r+0x76>
 8001f42:	682b      	ldr	r3, [r5, #0]
 8001f44:	b903      	cbnz	r3, 8001f48 <__sflush_r+0x78>
 8001f46:	6560      	str	r0, [r4, #84]	; 0x54
 8001f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f4a:	602f      	str	r7, [r5, #0]
 8001f4c:	2900      	cmp	r1, #0
 8001f4e:	d0cb      	beq.n	8001ee8 <__sflush_r+0x18>
 8001f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f54:	4299      	cmp	r1, r3
 8001f56:	d002      	beq.n	8001f5e <__sflush_r+0x8e>
 8001f58:	4628      	mov	r0, r5
 8001f5a:	f000 f8fb 	bl	8002154 <_free_r>
 8001f5e:	2000      	movs	r0, #0
 8001f60:	6360      	str	r0, [r4, #52]	; 0x34
 8001f62:	e7c2      	b.n	8001eea <__sflush_r+0x1a>
 8001f64:	6a21      	ldr	r1, [r4, #32]
 8001f66:	2301      	movs	r3, #1
 8001f68:	4628      	mov	r0, r5
 8001f6a:	47b0      	blx	r6
 8001f6c:	1c41      	adds	r1, r0, #1
 8001f6e:	d1c7      	bne.n	8001f00 <__sflush_r+0x30>
 8001f70:	682b      	ldr	r3, [r5, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0c4      	beq.n	8001f00 <__sflush_r+0x30>
 8001f76:	2b1d      	cmp	r3, #29
 8001f78:	d001      	beq.n	8001f7e <__sflush_r+0xae>
 8001f7a:	2b16      	cmp	r3, #22
 8001f7c:	d101      	bne.n	8001f82 <__sflush_r+0xb2>
 8001f7e:	602f      	str	r7, [r5, #0]
 8001f80:	e7b2      	b.n	8001ee8 <__sflush_r+0x18>
 8001f82:	89a3      	ldrh	r3, [r4, #12]
 8001f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f88:	81a3      	strh	r3, [r4, #12]
 8001f8a:	e7ae      	b.n	8001eea <__sflush_r+0x1a>
 8001f8c:	690f      	ldr	r7, [r1, #16]
 8001f8e:	2f00      	cmp	r7, #0
 8001f90:	d0aa      	beq.n	8001ee8 <__sflush_r+0x18>
 8001f92:	0793      	lsls	r3, r2, #30
 8001f94:	680e      	ldr	r6, [r1, #0]
 8001f96:	bf08      	it	eq
 8001f98:	694b      	ldreq	r3, [r1, #20]
 8001f9a:	600f      	str	r7, [r1, #0]
 8001f9c:	bf18      	it	ne
 8001f9e:	2300      	movne	r3, #0
 8001fa0:	1bf6      	subs	r6, r6, r7
 8001fa2:	608b      	str	r3, [r1, #8]
 8001fa4:	2e00      	cmp	r6, #0
 8001fa6:	dd9f      	ble.n	8001ee8 <__sflush_r+0x18>
 8001fa8:	6a21      	ldr	r1, [r4, #32]
 8001faa:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001fae:	4633      	mov	r3, r6
 8001fb0:	463a      	mov	r2, r7
 8001fb2:	4628      	mov	r0, r5
 8001fb4:	47e0      	blx	ip
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	dc06      	bgt.n	8001fc8 <__sflush_r+0xf8>
 8001fba:	89a3      	ldrh	r3, [r4, #12]
 8001fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fc0:	81a3      	strh	r3, [r4, #12]
 8001fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc6:	e790      	b.n	8001eea <__sflush_r+0x1a>
 8001fc8:	4407      	add	r7, r0
 8001fca:	1a36      	subs	r6, r6, r0
 8001fcc:	e7ea      	b.n	8001fa4 <__sflush_r+0xd4>
 8001fce:	bf00      	nop
 8001fd0:	20400001 	.word	0x20400001

08001fd4 <_fflush_r>:
 8001fd4:	b538      	push	{r3, r4, r5, lr}
 8001fd6:	690b      	ldr	r3, [r1, #16]
 8001fd8:	4605      	mov	r5, r0
 8001fda:	460c      	mov	r4, r1
 8001fdc:	b913      	cbnz	r3, 8001fe4 <_fflush_r+0x10>
 8001fde:	2500      	movs	r5, #0
 8001fe0:	4628      	mov	r0, r5
 8001fe2:	bd38      	pop	{r3, r4, r5, pc}
 8001fe4:	b118      	cbz	r0, 8001fee <_fflush_r+0x1a>
 8001fe6:	6983      	ldr	r3, [r0, #24]
 8001fe8:	b90b      	cbnz	r3, 8001fee <_fflush_r+0x1a>
 8001fea:	f7ff fa1b 	bl	8001424 <__sinit>
 8001fee:	4b14      	ldr	r3, [pc, #80]	; (8002040 <_fflush_r+0x6c>)
 8001ff0:	429c      	cmp	r4, r3
 8001ff2:	d11b      	bne.n	800202c <_fflush_r+0x58>
 8001ff4:	686c      	ldr	r4, [r5, #4]
 8001ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0ef      	beq.n	8001fde <_fflush_r+0xa>
 8001ffe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002000:	07d0      	lsls	r0, r2, #31
 8002002:	d404      	bmi.n	800200e <_fflush_r+0x3a>
 8002004:	0599      	lsls	r1, r3, #22
 8002006:	d402      	bmi.n	800200e <_fflush_r+0x3a>
 8002008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800200a:	f7ff faa9 	bl	8001560 <__retarget_lock_acquire_recursive>
 800200e:	4628      	mov	r0, r5
 8002010:	4621      	mov	r1, r4
 8002012:	f7ff ff5d 	bl	8001ed0 <__sflush_r>
 8002016:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002018:	07da      	lsls	r2, r3, #31
 800201a:	4605      	mov	r5, r0
 800201c:	d4e0      	bmi.n	8001fe0 <_fflush_r+0xc>
 800201e:	89a3      	ldrh	r3, [r4, #12]
 8002020:	059b      	lsls	r3, r3, #22
 8002022:	d4dd      	bmi.n	8001fe0 <_fflush_r+0xc>
 8002024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002026:	f7ff fa9c 	bl	8001562 <__retarget_lock_release_recursive>
 800202a:	e7d9      	b.n	8001fe0 <_fflush_r+0xc>
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <_fflush_r+0x70>)
 800202e:	429c      	cmp	r4, r3
 8002030:	d101      	bne.n	8002036 <_fflush_r+0x62>
 8002032:	68ac      	ldr	r4, [r5, #8]
 8002034:	e7df      	b.n	8001ff6 <_fflush_r+0x22>
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <_fflush_r+0x74>)
 8002038:	429c      	cmp	r4, r3
 800203a:	bf08      	it	eq
 800203c:	68ec      	ldreq	r4, [r5, #12]
 800203e:	e7da      	b.n	8001ff6 <_fflush_r+0x22>
 8002040:	0800229c 	.word	0x0800229c
 8002044:	080022bc 	.word	0x080022bc
 8002048:	0800227c 	.word	0x0800227c

0800204c <_lseek_r>:
 800204c:	b538      	push	{r3, r4, r5, lr}
 800204e:	4d07      	ldr	r5, [pc, #28]	; (800206c <_lseek_r+0x20>)
 8002050:	4604      	mov	r4, r0
 8002052:	4608      	mov	r0, r1
 8002054:	4611      	mov	r1, r2
 8002056:	2200      	movs	r2, #0
 8002058:	602a      	str	r2, [r5, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	f7fe fac9 	bl	80005f2 <_lseek>
 8002060:	1c43      	adds	r3, r0, #1
 8002062:	d102      	bne.n	800206a <_lseek_r+0x1e>
 8002064:	682b      	ldr	r3, [r5, #0]
 8002066:	b103      	cbz	r3, 800206a <_lseek_r+0x1e>
 8002068:	6023      	str	r3, [r4, #0]
 800206a:	bd38      	pop	{r3, r4, r5, pc}
 800206c:	200002ac 	.word	0x200002ac

08002070 <__swhatbuf_r>:
 8002070:	b570      	push	{r4, r5, r6, lr}
 8002072:	460e      	mov	r6, r1
 8002074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002078:	2900      	cmp	r1, #0
 800207a:	b096      	sub	sp, #88	; 0x58
 800207c:	4614      	mov	r4, r2
 800207e:	461d      	mov	r5, r3
 8002080:	da08      	bge.n	8002094 <__swhatbuf_r+0x24>
 8002082:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	602a      	str	r2, [r5, #0]
 800208a:	061a      	lsls	r2, r3, #24
 800208c:	d410      	bmi.n	80020b0 <__swhatbuf_r+0x40>
 800208e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002092:	e00e      	b.n	80020b2 <__swhatbuf_r+0x42>
 8002094:	466a      	mov	r2, sp
 8002096:	f000 f8b9 	bl	800220c <_fstat_r>
 800209a:	2800      	cmp	r0, #0
 800209c:	dbf1      	blt.n	8002082 <__swhatbuf_r+0x12>
 800209e:	9a01      	ldr	r2, [sp, #4]
 80020a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020a8:	425a      	negs	r2, r3
 80020aa:	415a      	adcs	r2, r3
 80020ac:	602a      	str	r2, [r5, #0]
 80020ae:	e7ee      	b.n	800208e <__swhatbuf_r+0x1e>
 80020b0:	2340      	movs	r3, #64	; 0x40
 80020b2:	2000      	movs	r0, #0
 80020b4:	6023      	str	r3, [r4, #0]
 80020b6:	b016      	add	sp, #88	; 0x58
 80020b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080020bc <__smakebuf_r>:
 80020bc:	898b      	ldrh	r3, [r1, #12]
 80020be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020c0:	079d      	lsls	r5, r3, #30
 80020c2:	4606      	mov	r6, r0
 80020c4:	460c      	mov	r4, r1
 80020c6:	d507      	bpl.n	80020d8 <__smakebuf_r+0x1c>
 80020c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020cc:	6023      	str	r3, [r4, #0]
 80020ce:	6123      	str	r3, [r4, #16]
 80020d0:	2301      	movs	r3, #1
 80020d2:	6163      	str	r3, [r4, #20]
 80020d4:	b002      	add	sp, #8
 80020d6:	bd70      	pop	{r4, r5, r6, pc}
 80020d8:	ab01      	add	r3, sp, #4
 80020da:	466a      	mov	r2, sp
 80020dc:	f7ff ffc8 	bl	8002070 <__swhatbuf_r>
 80020e0:	9900      	ldr	r1, [sp, #0]
 80020e2:	4605      	mov	r5, r0
 80020e4:	4630      	mov	r0, r6
 80020e6:	f7ff fa5d 	bl	80015a4 <_malloc_r>
 80020ea:	b948      	cbnz	r0, 8002100 <__smakebuf_r+0x44>
 80020ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020f0:	059a      	lsls	r2, r3, #22
 80020f2:	d4ef      	bmi.n	80020d4 <__smakebuf_r+0x18>
 80020f4:	f023 0303 	bic.w	r3, r3, #3
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	81a3      	strh	r3, [r4, #12]
 80020fe:	e7e3      	b.n	80020c8 <__smakebuf_r+0xc>
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <__smakebuf_r+0x7c>)
 8002102:	62b3      	str	r3, [r6, #40]	; 0x28
 8002104:	89a3      	ldrh	r3, [r4, #12]
 8002106:	6020      	str	r0, [r4, #0]
 8002108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800210c:	81a3      	strh	r3, [r4, #12]
 800210e:	9b00      	ldr	r3, [sp, #0]
 8002110:	6163      	str	r3, [r4, #20]
 8002112:	9b01      	ldr	r3, [sp, #4]
 8002114:	6120      	str	r0, [r4, #16]
 8002116:	b15b      	cbz	r3, 8002130 <__smakebuf_r+0x74>
 8002118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800211c:	4630      	mov	r0, r6
 800211e:	f000 f887 	bl	8002230 <_isatty_r>
 8002122:	b128      	cbz	r0, 8002130 <__smakebuf_r+0x74>
 8002124:	89a3      	ldrh	r3, [r4, #12]
 8002126:	f023 0303 	bic.w	r3, r3, #3
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	81a3      	strh	r3, [r4, #12]
 8002130:	89a0      	ldrh	r0, [r4, #12]
 8002132:	4305      	orrs	r5, r0
 8002134:	81a5      	strh	r5, [r4, #12]
 8002136:	e7cd      	b.n	80020d4 <__smakebuf_r+0x18>
 8002138:	080013bd 	.word	0x080013bd

0800213c <__malloc_lock>:
 800213c:	4801      	ldr	r0, [pc, #4]	; (8002144 <__malloc_lock+0x8>)
 800213e:	f7ff ba0f 	b.w	8001560 <__retarget_lock_acquire_recursive>
 8002142:	bf00      	nop
 8002144:	200002a0 	.word	0x200002a0

08002148 <__malloc_unlock>:
 8002148:	4801      	ldr	r0, [pc, #4]	; (8002150 <__malloc_unlock+0x8>)
 800214a:	f7ff ba0a 	b.w	8001562 <__retarget_lock_release_recursive>
 800214e:	bf00      	nop
 8002150:	200002a0 	.word	0x200002a0

08002154 <_free_r>:
 8002154:	b538      	push	{r3, r4, r5, lr}
 8002156:	4605      	mov	r5, r0
 8002158:	2900      	cmp	r1, #0
 800215a:	d041      	beq.n	80021e0 <_free_r+0x8c>
 800215c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002160:	1f0c      	subs	r4, r1, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	bfb8      	it	lt
 8002166:	18e4      	addlt	r4, r4, r3
 8002168:	f7ff ffe8 	bl	800213c <__malloc_lock>
 800216c:	4a1d      	ldr	r2, [pc, #116]	; (80021e4 <_free_r+0x90>)
 800216e:	6813      	ldr	r3, [r2, #0]
 8002170:	b933      	cbnz	r3, 8002180 <_free_r+0x2c>
 8002172:	6063      	str	r3, [r4, #4]
 8002174:	6014      	str	r4, [r2, #0]
 8002176:	4628      	mov	r0, r5
 8002178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800217c:	f7ff bfe4 	b.w	8002148 <__malloc_unlock>
 8002180:	42a3      	cmp	r3, r4
 8002182:	d908      	bls.n	8002196 <_free_r+0x42>
 8002184:	6820      	ldr	r0, [r4, #0]
 8002186:	1821      	adds	r1, r4, r0
 8002188:	428b      	cmp	r3, r1
 800218a:	bf01      	itttt	eq
 800218c:	6819      	ldreq	r1, [r3, #0]
 800218e:	685b      	ldreq	r3, [r3, #4]
 8002190:	1809      	addeq	r1, r1, r0
 8002192:	6021      	streq	r1, [r4, #0]
 8002194:	e7ed      	b.n	8002172 <_free_r+0x1e>
 8002196:	461a      	mov	r2, r3
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	b10b      	cbz	r3, 80021a0 <_free_r+0x4c>
 800219c:	42a3      	cmp	r3, r4
 800219e:	d9fa      	bls.n	8002196 <_free_r+0x42>
 80021a0:	6811      	ldr	r1, [r2, #0]
 80021a2:	1850      	adds	r0, r2, r1
 80021a4:	42a0      	cmp	r0, r4
 80021a6:	d10b      	bne.n	80021c0 <_free_r+0x6c>
 80021a8:	6820      	ldr	r0, [r4, #0]
 80021aa:	4401      	add	r1, r0
 80021ac:	1850      	adds	r0, r2, r1
 80021ae:	4283      	cmp	r3, r0
 80021b0:	6011      	str	r1, [r2, #0]
 80021b2:	d1e0      	bne.n	8002176 <_free_r+0x22>
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	6053      	str	r3, [r2, #4]
 80021ba:	4401      	add	r1, r0
 80021bc:	6011      	str	r1, [r2, #0]
 80021be:	e7da      	b.n	8002176 <_free_r+0x22>
 80021c0:	d902      	bls.n	80021c8 <_free_r+0x74>
 80021c2:	230c      	movs	r3, #12
 80021c4:	602b      	str	r3, [r5, #0]
 80021c6:	e7d6      	b.n	8002176 <_free_r+0x22>
 80021c8:	6820      	ldr	r0, [r4, #0]
 80021ca:	1821      	adds	r1, r4, r0
 80021cc:	428b      	cmp	r3, r1
 80021ce:	bf04      	itt	eq
 80021d0:	6819      	ldreq	r1, [r3, #0]
 80021d2:	685b      	ldreq	r3, [r3, #4]
 80021d4:	6063      	str	r3, [r4, #4]
 80021d6:	bf04      	itt	eq
 80021d8:	1809      	addeq	r1, r1, r0
 80021da:	6021      	streq	r1, [r4, #0]
 80021dc:	6054      	str	r4, [r2, #4]
 80021de:	e7ca      	b.n	8002176 <_free_r+0x22>
 80021e0:	bd38      	pop	{r3, r4, r5, pc}
 80021e2:	bf00      	nop
 80021e4:	200002a4 	.word	0x200002a4

080021e8 <_read_r>:
 80021e8:	b538      	push	{r3, r4, r5, lr}
 80021ea:	4d07      	ldr	r5, [pc, #28]	; (8002208 <_read_r+0x20>)
 80021ec:	4604      	mov	r4, r0
 80021ee:	4608      	mov	r0, r1
 80021f0:	4611      	mov	r1, r2
 80021f2:	2200      	movs	r2, #0
 80021f4:	602a      	str	r2, [r5, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f7fe f99e 	bl	8000538 <_read>
 80021fc:	1c43      	adds	r3, r0, #1
 80021fe:	d102      	bne.n	8002206 <_read_r+0x1e>
 8002200:	682b      	ldr	r3, [r5, #0]
 8002202:	b103      	cbz	r3, 8002206 <_read_r+0x1e>
 8002204:	6023      	str	r3, [r4, #0]
 8002206:	bd38      	pop	{r3, r4, r5, pc}
 8002208:	200002ac 	.word	0x200002ac

0800220c <_fstat_r>:
 800220c:	b538      	push	{r3, r4, r5, lr}
 800220e:	4d07      	ldr	r5, [pc, #28]	; (800222c <_fstat_r+0x20>)
 8002210:	2300      	movs	r3, #0
 8002212:	4604      	mov	r4, r0
 8002214:	4608      	mov	r0, r1
 8002216:	4611      	mov	r1, r2
 8002218:	602b      	str	r3, [r5, #0]
 800221a:	f7fe f9d1 	bl	80005c0 <_fstat>
 800221e:	1c43      	adds	r3, r0, #1
 8002220:	d102      	bne.n	8002228 <_fstat_r+0x1c>
 8002222:	682b      	ldr	r3, [r5, #0]
 8002224:	b103      	cbz	r3, 8002228 <_fstat_r+0x1c>
 8002226:	6023      	str	r3, [r4, #0]
 8002228:	bd38      	pop	{r3, r4, r5, pc}
 800222a:	bf00      	nop
 800222c:	200002ac 	.word	0x200002ac

08002230 <_isatty_r>:
 8002230:	b538      	push	{r3, r4, r5, lr}
 8002232:	4d06      	ldr	r5, [pc, #24]	; (800224c <_isatty_r+0x1c>)
 8002234:	2300      	movs	r3, #0
 8002236:	4604      	mov	r4, r0
 8002238:	4608      	mov	r0, r1
 800223a:	602b      	str	r3, [r5, #0]
 800223c:	f7fe f9cf 	bl	80005de <_isatty>
 8002240:	1c43      	adds	r3, r0, #1
 8002242:	d102      	bne.n	800224a <_isatty_r+0x1a>
 8002244:	682b      	ldr	r3, [r5, #0]
 8002246:	b103      	cbz	r3, 800224a <_isatty_r+0x1a>
 8002248:	6023      	str	r3, [r4, #0]
 800224a:	bd38      	pop	{r3, r4, r5, pc}
 800224c:	200002ac 	.word	0x200002ac

08002250 <_init>:
 8002250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002252:	bf00      	nop
 8002254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002256:	bc08      	pop	{r3}
 8002258:	469e      	mov	lr, r3
 800225a:	4770      	bx	lr

0800225c <_fini>:
 800225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800225e:	bf00      	nop
 8002260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002262:	bc08      	pop	{r3}
 8002264:	469e      	mov	lr, r3
 8002266:	4770      	bx	lr
