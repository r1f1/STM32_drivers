
stm32f407_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dbc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000f64  08000f64  00010f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f6c  08000f6c  00010f74  2**0
                  CONTENTS
  4 .ARM          00000000  08000f6c  08000f6c  00010f74  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f6c  08000f74  00010f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f6c  08000f6c  00010f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f70  08000f70  00010f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010f74  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010f74  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000131f  00000000  00000000  00010f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000473  00000000  00000000  000122bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  00012730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f0  00000000  00000000  00012858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000211b  00000000  00000000  00012948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000017ec  00000000  00000000  00014a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009216  00000000  00000000  0001624f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001f465  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003d4  00000000  00000000  0001f4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000f4c 	.word	0x08000f4c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000f4c 	.word	0x08000f4c

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:
// Arduino LED pin
#define LED_PIN					9



void delay(void){
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000/2; i++);
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <delay+0x12>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <delay+0x28>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d9f8      	bls.n	8000204 <delay+0xc>
}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	0003d08f 	.word	0x0003d08f

08000224 <SPI2_GPIOInit>:

void SPI2_GPIOInit(){
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIHandle;

	SPIHandle.pGPIOx = GPIOB;
 800022a:	4b14      	ldr	r3, [pc, #80]	; (800027c <SPI2_GPIOInit+0x58>)
 800022c:	607b      	str	r3, [r7, #4]
	SPIHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800022e:	2302      	movs	r3, #2
 8000230:	727b      	strb	r3, [r7, #9]
	SPIHandle.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000232:	2300      	movs	r3, #0
 8000234:	733b      	strb	r3, [r7, #12]
	SPIHandle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000236:	2300      	movs	r3, #0
 8000238:	72fb      	strb	r3, [r7, #11]
	SPIHandle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800023a:	2302      	movs	r3, #2
 800023c:	72bb      	strb	r3, [r7, #10]
	SPIHandle.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800023e:	2305      	movs	r3, #5
 8000240:	737b      	strb	r3, [r7, #13]

	// SPI_NSS
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000242:	230c      	movs	r3, #12
 8000244:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIHandle);
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4618      	mov	r0, r3
 800024a:	f000 fb4d 	bl	80008e8 <GPIO_Init>

	// SPI_SCLK
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800024e:	230d      	movs	r3, #13
 8000250:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIHandle);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fb47 	bl	80008e8 <GPIO_Init>

	/********************* Not used for this application ********************/
	// SPI_MISO
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800025a:	230e      	movs	r3, #14
 800025c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIHandle);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fb41 	bl	80008e8 <GPIO_Init>

	// SPI_MOSI
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000266:	230f      	movs	r3, #15
 8000268:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIHandle);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f000 fb3b 	bl	80008e8 <GPIO_Init>


}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40020400 	.word	0x40020400

08000280 <SPI2_Inits>:

void SPI2_Inits(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <SPI2_Inits+0x38>)
 8000288:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_MODE_MASTER;
 800028a:	2301      	movs	r3, #1
 800028c:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_FULL_DUPLEX;
 800028e:	2300      	movs	r3, #0
 8000290:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // generates a clock of 2MHz
 8000292:	2302      	movs	r3, #2
 8000294:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8_BITS;
 8000296:	2300      	movs	r3, #0
 8000298:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800029a:	2300      	movs	r3, #0
 800029c:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPIConfig.SPI_CPAH = SPI_CPAH_1ST_EDGE;
 800029e:	2300      	movs	r3, #0
 80002a0:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DISABLE; // Hardware slave management enabled for NSS pin
 80002a2:	2300      	movs	r3, #0
 80002a4:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fd13 	bl	8000cd4 <SPI_Init>

}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40003800 	.word	0x40003800

080002bc <GPIO_ButtonInit>:


void GPIO_ButtonInit(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	/* Button pin configuration */
	GPIOBtn.pGPIOx = GPIOA;
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <GPIO_ButtonInit+0x2c>)
 80002c4:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002ca:	2300      	movs	r3, #0
 80002cc:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002ce:	2302      	movs	r3, #2
 80002d0:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002d2:	2300      	movs	r3, #0
 80002d4:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fb05 	bl	80008e8 <GPIO_Init>
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40020000 	.word	0x40020000

080002ec <SPI_VerifyRespons>:

uint8_t SPI_VerifyRespons(uint8_t ackbyte){
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	(ackbyte == 0xF5) ? (value = 1) : (value = 0);
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	2bf5      	cmp	r3, #245	; 0xf5
 80002fa:	d102      	bne.n	8000302 <SPI_VerifyRespons+0x16>
 80002fc:	2301      	movs	r3, #1
 80002fe:	73fb      	strb	r3, [r7, #15]
 8000300:	e001      	b.n	8000306 <SPI_VerifyRespons+0x1a>
 8000302:	2300      	movs	r3, #0
 8000304:	73fb      	strb	r3, [r7, #15]
	return value;
 8000306:	7bfb      	ldrb	r3, [r7, #15]
}
 8000308:	4618      	mov	r0, r3
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
	...

08000314 <main>:


int main(){
 8000314:	b580      	push	{r7, lr}
 8000316:	b08c      	sub	sp, #48	; 0x30
 8000318:	af00      	add	r7, sp, #0

	uint8_t dummy_write = 0xFF; // for 16bit DFF we have to use 2 bytes 0xFFFF
 800031a:	23ff      	movs	r3, #255	; 0xff
 800031c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t dummy_read;

	/* Initialise button */
	GPIO_ButtonInit();
 8000320:	f7ff ffcc 	bl	80002bc <GPIO_ButtonInit>

	/* Initialise GPIO pins to behave as SPI pin */
	SPI2_GPIOInit();
 8000324:	f7ff ff7e 	bl	8000224 <SPI2_GPIOInit>

	/* Configure SPI2 pins */
	SPI2_Inits();
 8000328:	f7ff ffaa 	bl	8000280 <SPI2_Inits>

	/* Enable SSOE bit */
	SPI2_SSOE_ENDI(ENABLE);
 800032c:	4bce      	ldr	r3, [pc, #824]	; (8000668 <main+0x354>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	4acd      	ldr	r2, [pc, #820]	; (8000668 <main+0x354>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6053      	str	r3, [r2, #4]

	while(1){
		// Wait until the button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000338:	bf00      	nop
 800033a:	2100      	movs	r1, #0
 800033c:	48cb      	ldr	r0, [pc, #812]	; (800066c <main+0x358>)
 800033e:	f000 fc5b 	bl	8000bf8 <GPIO_ReadFromInputPin>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d0f8      	beq.n	800033a <main+0x26>

		delay();
 8000348:	f7ff ff56 	bl	80001f8 <delay>

		/* Enable SPI2 peripheral. SPE bit */
		SPI2_CONTROL(ENABLE);
 800034c:	4bc6      	ldr	r3, [pc, #792]	; (8000668 <main+0x354>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4ac5      	ldr	r2, [pc, #788]	; (8000668 <main+0x354>)
 8000352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000356:	6013      	str	r3, [r2, #0]

		/*
		 * 1. CMD_LED_CTRL  <pin no(1)>    <value(1)>
		 */

		uint8_t cmdCode = COMMAND_LED_CTRL;
 8000358:	2350      	movs	r3, #80	; 0x50
 800035a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t ackbyte;
		uint8_t args[2];

		SPI_SendData(SPI2, &cmdCode, 1);
 800035e:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8000362:	2201      	movs	r2, #1
 8000364:	4619      	mov	r1, r3
 8000366:	48c0      	ldr	r0, [pc, #768]	; (8000668 <main+0x354>)
 8000368:	f000 fd5e 	bl	8000e28 <SPI_SendData>
		// Clear RXNE bit
		SPI_ReceiveData(SPI2,&dummy_read,1); // We send some data and then we expect data in return so
 800036c:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000370:	2201      	movs	r2, #1
 8000372:	4619      	mov	r1, r3
 8000374:	48bc      	ldr	r0, [pc, #752]	; (8000668 <main+0x354>)
 8000376:	f000 fd8e 	bl	8000e96 <SPI_ReceiveData>
											  // in order to clear RXNE we read those bits

		// In order to get a response from Slave we need to send a "dummy_write" of data.
		// This is how shift registers work, Slave put some data on shift register (Tx buffer)
		// then the Master sends a "dummy_write" to move that data out of the sift register
		SPI_SendData(SPI2, &dummy_write, 1);
 800037a:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800037e:	2201      	movs	r2, #1
 8000380:	4619      	mov	r1, r3
 8000382:	48b9      	ldr	r0, [pc, #740]	; (8000668 <main+0x354>)
 8000384:	f000 fd50 	bl	8000e28 <SPI_SendData>

		// Read ack byte received
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800038c:	2201      	movs	r2, #1
 800038e:	4619      	mov	r1, r3
 8000390:	48b5      	ldr	r0, [pc, #724]	; (8000668 <main+0x354>)
 8000392:	f000 fd80 	bl	8000e96 <SPI_ReceiveData>

		// Function to verify if the ack byte is valid or not
		if( SPI_VerifyRespons(ackbyte) ){
 8000396:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ffa6 	bl	80002ec <SPI_VerifyRespons>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d00c      	beq.n	80003c0 <main+0xac>
			args[0] = LED_PIN;
 80003a6:	2309      	movs	r3, #9
 80003a8:	f887 3020 	strb.w	r3, [r7, #32]
			args[1] = LED_ON;
 80003ac:	2301      	movs	r3, #1
 80003ae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			SPI_SendData(SPI2, args, 2);
 80003b2:	f107 0320 	add.w	r3, r7, #32
 80003b6:	2202      	movs	r2, #2
 80003b8:	4619      	mov	r1, r3
 80003ba:	48ab      	ldr	r0, [pc, #684]	; (8000668 <main+0x354>)
 80003bc:	f000 fd34 	bl	8000e28 <SPI_SendData>

		/*
		 * 2. CMD_SENSOR_READ 		<analog pin number(1)>
		 */
		// Wait until the button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80003c0:	bf00      	nop
 80003c2:	2100      	movs	r1, #0
 80003c4:	48a9      	ldr	r0, [pc, #676]	; (800066c <main+0x358>)
 80003c6:	f000 fc17 	bl	8000bf8 <GPIO_ReadFromInputPin>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d0f8      	beq.n	80003c2 <main+0xae>

		delay();
 80003d0:	f7ff ff12 	bl	80001f8 <delay>

		cmdCode = COMMAND_SENSOR_READ;
 80003d4:	2351      	movs	r3, #81	; 0x51
 80003d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SPI_SendData(SPI2, &cmdCode, 1);
 80003da:	f107 0325 	add.w	r3, r7, #37	; 0x25
 80003de:	2201      	movs	r2, #1
 80003e0:	4619      	mov	r1, r3
 80003e2:	48a1      	ldr	r0, [pc, #644]	; (8000668 <main+0x354>)
 80003e4:	f000 fd20 	bl	8000e28 <SPI_SendData>
		SPI_ReceiveData(SPI2,&dummy_read,1);
 80003e8:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80003ec:	2201      	movs	r2, #1
 80003ee:	4619      	mov	r1, r3
 80003f0:	489d      	ldr	r0, [pc, #628]	; (8000668 <main+0x354>)
 80003f2:	f000 fd50 	bl	8000e96 <SPI_ReceiveData>

		// Read ack byte received
		SPI_SendData(SPI2, &dummy_write, 1);
 80003f6:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80003fa:	2201      	movs	r2, #1
 80003fc:	4619      	mov	r1, r3
 80003fe:	489a      	ldr	r0, [pc, #616]	; (8000668 <main+0x354>)
 8000400:	f000 fd12 	bl	8000e28 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000408:	2201      	movs	r2, #1
 800040a:	4619      	mov	r1, r3
 800040c:	4896      	ldr	r0, [pc, #600]	; (8000668 <main+0x354>)
 800040e:	f000 fd42 	bl	8000e96 <SPI_ReceiveData>

		// Function to verify if the ack byte is valid or not
		if( SPI_VerifyRespons(ackbyte) ){
 8000412:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ff68 	bl	80002ec <SPI_VerifyRespons>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d020      	beq.n	8000464 <main+0x150>
			args[0] = ANALOG_PIN0;
 8000422:	2300      	movs	r3, #0
 8000424:	f887 3020 	strb.w	r3, [r7, #32]
			SPI_SendData(SPI2, args, 1);
 8000428:	f107 0320 	add.w	r3, r7, #32
 800042c:	2201      	movs	r2, #1
 800042e:	4619      	mov	r1, r3
 8000430:	488d      	ldr	r0, [pc, #564]	; (8000668 <main+0x354>)
 8000432:	f000 fcf9 	bl	8000e28 <SPI_SendData>
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000436:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800043a:	2201      	movs	r2, #1
 800043c:	4619      	mov	r1, r3
 800043e:	488a      	ldr	r0, [pc, #552]	; (8000668 <main+0x354>)
 8000440:	f000 fd29 	bl	8000e96 <SPI_ReceiveData>

			// Inserted some delay so that salve can be ready with the data
			delay();
 8000444:	f7ff fed8 	bl	80001f8 <delay>

			SPI_SendData(SPI2, &dummy_write, 1);
 8000448:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800044c:	2201      	movs	r2, #1
 800044e:	4619      	mov	r1, r3
 8000450:	4885      	ldr	r0, [pc, #532]	; (8000668 <main+0x354>)
 8000452:	f000 fce9 	bl	8000e28 <SPI_SendData>

			// Get the data on analog pin 0
			uint8_t analog_read;
			SPI_ReceiveData(SPI2,&analog_read,1);
 8000456:	f107 0313 	add.w	r3, r7, #19
 800045a:	2201      	movs	r2, #1
 800045c:	4619      	mov	r1, r3
 800045e:	4882      	ldr	r0, [pc, #520]	; (8000668 <main+0x354>)
 8000460:	f000 fd19 	bl	8000e96 <SPI_ReceiveData>

		/*
		 * 3. CMD_LED_READ 		<pin number(1)>
		 */
		// Wait until the button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000464:	bf00      	nop
 8000466:	2100      	movs	r1, #0
 8000468:	4880      	ldr	r0, [pc, #512]	; (800066c <main+0x358>)
 800046a:	f000 fbc5 	bl	8000bf8 <GPIO_ReadFromInputPin>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d0f8      	beq.n	8000466 <main+0x152>

		delay();
 8000474:	f7ff fec0 	bl	80001f8 <delay>

		cmdCode = COMMAND_LED_READ;
 8000478:	2352      	movs	r3, #82	; 0x52
 800047a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SPI_SendData(SPI2, &cmdCode, 1);
 800047e:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8000482:	2201      	movs	r2, #1
 8000484:	4619      	mov	r1, r3
 8000486:	4878      	ldr	r0, [pc, #480]	; (8000668 <main+0x354>)
 8000488:	f000 fcce 	bl	8000e28 <SPI_SendData>
		SPI_ReceiveData(SPI2,&dummy_read,1);
 800048c:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000490:	2201      	movs	r2, #1
 8000492:	4619      	mov	r1, r3
 8000494:	4874      	ldr	r0, [pc, #464]	; (8000668 <main+0x354>)
 8000496:	f000 fcfe 	bl	8000e96 <SPI_ReceiveData>

		// Read ack byte received
		SPI_SendData(SPI2, &dummy_write, 1);
 800049a:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800049e:	2201      	movs	r2, #1
 80004a0:	4619      	mov	r1, r3
 80004a2:	4871      	ldr	r0, [pc, #452]	; (8000668 <main+0x354>)
 80004a4:	f000 fcc0 	bl	8000e28 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 80004a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ac:	2201      	movs	r2, #1
 80004ae:	4619      	mov	r1, r3
 80004b0:	486d      	ldr	r0, [pc, #436]	; (8000668 <main+0x354>)
 80004b2:	f000 fcf0 	bl	8000e96 <SPI_ReceiveData>

		// Function to verify if the ack byte is valid or not
		if( SPI_VerifyRespons(ackbyte) ){
 80004b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ff16 	bl	80002ec <SPI_VerifyRespons>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d020      	beq.n	8000508 <main+0x1f4>
			args[0] = LED_PIN;
 80004c6:	2309      	movs	r3, #9
 80004c8:	f887 3020 	strb.w	r3, [r7, #32]
			SPI_SendData(SPI2, args, 1);
 80004cc:	f107 0320 	add.w	r3, r7, #32
 80004d0:	2201      	movs	r2, #1
 80004d2:	4619      	mov	r1, r3
 80004d4:	4864      	ldr	r0, [pc, #400]	; (8000668 <main+0x354>)
 80004d6:	f000 fca7 	bl	8000e28 <SPI_SendData>
			SPI_ReceiveData(SPI2,&dummy_read,1);
 80004da:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80004de:	2201      	movs	r2, #1
 80004e0:	4619      	mov	r1, r3
 80004e2:	4861      	ldr	r0, [pc, #388]	; (8000668 <main+0x354>)
 80004e4:	f000 fcd7 	bl	8000e96 <SPI_ReceiveData>

			// Inserted some delay so that salve can be ready with the data
			delay();
 80004e8:	f7ff fe86 	bl	80001f8 <delay>

			// Get the data on LED pin
			SPI_SendData(SPI2, &dummy_write, 1);
 80004ec:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80004f0:	2201      	movs	r2, #1
 80004f2:	4619      	mov	r1, r3
 80004f4:	485c      	ldr	r0, [pc, #368]	; (8000668 <main+0x354>)
 80004f6:	f000 fc97 	bl	8000e28 <SPI_SendData>
			uint8_t LED_read;
			SPI_ReceiveData(SPI2,&LED_read,1);
 80004fa:	f107 0312 	add.w	r3, r7, #18
 80004fe:	2201      	movs	r2, #1
 8000500:	4619      	mov	r1, r3
 8000502:	4859      	ldr	r0, [pc, #356]	; (8000668 <main+0x354>)
 8000504:	f000 fcc7 	bl	8000e96 <SPI_ReceiveData>

		/*
		 * 4. CMD_PRINT 		<len> 		<message>
		 */
		// Wait until the button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000508:	bf00      	nop
 800050a:	2100      	movs	r1, #0
 800050c:	4857      	ldr	r0, [pc, #348]	; (800066c <main+0x358>)
 800050e:	f000 fb73 	bl	8000bf8 <GPIO_ReadFromInputPin>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0f8      	beq.n	800050a <main+0x1f6>

		delay();
 8000518:	f7ff fe6e 	bl	80001f8 <delay>

		cmdCode = COMMAND_PRINT;
 800051c:	2353      	movs	r3, #83	; 0x53
 800051e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SPI_SendData(SPI2, &cmdCode, 1);
 8000522:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8000526:	2201      	movs	r2, #1
 8000528:	4619      	mov	r1, r3
 800052a:	484f      	ldr	r0, [pc, #316]	; (8000668 <main+0x354>)
 800052c:	f000 fc7c 	bl	8000e28 <SPI_SendData>
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000530:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000534:	2201      	movs	r2, #1
 8000536:	4619      	mov	r1, r3
 8000538:	484b      	ldr	r0, [pc, #300]	; (8000668 <main+0x354>)
 800053a:	f000 fcac 	bl	8000e96 <SPI_ReceiveData>

		// Read ack byte received
		SPI_SendData(SPI2, &dummy_write, 1);
 800053e:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000542:	2201      	movs	r2, #1
 8000544:	4619      	mov	r1, r3
 8000546:	4848      	ldr	r0, [pc, #288]	; (8000668 <main+0x354>)
 8000548:	f000 fc6e 	bl	8000e28 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 800054c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000550:	2201      	movs	r2, #1
 8000552:	4619      	mov	r1, r3
 8000554:	4844      	ldr	r0, [pc, #272]	; (8000668 <main+0x354>)
 8000556:	f000 fc9e 	bl	8000e96 <SPI_ReceiveData>

		// Function to verify if the ack byte is valid or not
		if( SPI_VerifyRespons(ackbyte) ){
 800055a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fec4 	bl	80002ec <SPI_VerifyRespons>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d03a      	beq.n	80005e0 <main+0x2cc>
			char message[] = "Spain";
 800056a:	4a41      	ldr	r2, [pc, #260]	; (8000670 <main+0x35c>)
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000574:	6018      	str	r0, [r3, #0]
 8000576:	3304      	adds	r3, #4
 8000578:	8019      	strh	r1, [r3, #0]
			uint8_t message_len = strlen(message);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fe32 	bl	80001e8 <strlen>
 8000584:	4603      	mov	r3, r0
 8000586:	b2db      	uxtb	r3, r3
 8000588:	72fb      	strb	r3, [r7, #11]

			// Send length of user data
			SPI_SendData(SPI2, &message_len, 1);
 800058a:	f107 030b 	add.w	r3, r7, #11
 800058e:	2201      	movs	r2, #1
 8000590:	4619      	mov	r1, r3
 8000592:	4835      	ldr	r0, [pc, #212]	; (8000668 <main+0x354>)
 8000594:	f000 fc48 	bl	8000e28 <SPI_SendData>
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000598:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800059c:	2201      	movs	r2, #1
 800059e:	4619      	mov	r1, r3
 80005a0:	4831      	ldr	r0, [pc, #196]	; (8000668 <main+0x354>)
 80005a2:	f000 fc78 	bl	8000e96 <SPI_ReceiveData>

			// Inserted some delay so that salve can be ready with the data
			delay();
 80005a6:	f7ff fe27 	bl	80001f8 <delay>

			// Send user data
			// We send this byte by byte because at the same time we send a byte the buffer
			// (SPI_DR) has to be empty so that's why we "read" the returned dummy byte, to clear
			// the register
			for(int i = 0 ; i < message_len ; i++){
 80005aa:	2300      	movs	r3, #0
 80005ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005ae:	e012      	b.n	80005d6 <main+0x2c2>
				SPI_SendData(SPI2,(uint8_t *)&message[i],1);
 80005b0:	f107 020c 	add.w	r2, r7, #12
 80005b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b6:	4413      	add	r3, r2
 80005b8:	2201      	movs	r2, #1
 80005ba:	4619      	mov	r1, r3
 80005bc:	482a      	ldr	r0, [pc, #168]	; (8000668 <main+0x354>)
 80005be:	f000 fc33 	bl	8000e28 <SPI_SendData>
				SPI_ReceiveData(SPI2,&dummy_read,1);
 80005c2:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	4827      	ldr	r0, [pc, #156]	; (8000668 <main+0x354>)
 80005cc:	f000 fc63 	bl	8000e96 <SPI_ReceiveData>
			for(int i = 0 ; i < message_len ; i++){
 80005d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d2:	3301      	adds	r3, #1
 80005d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005d6:	7afb      	ldrb	r3, [r7, #11]
 80005d8:	461a      	mov	r2, r3
 80005da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005dc:	4293      	cmp	r3, r2
 80005de:	dbe7      	blt.n	80005b0 <main+0x29c>

		/*
		 * 5. CMD_ID_READ
		 */
		// Wait until the button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80005e0:	bf00      	nop
 80005e2:	2100      	movs	r1, #0
 80005e4:	4821      	ldr	r0, [pc, #132]	; (800066c <main+0x358>)
 80005e6:	f000 fb07 	bl	8000bf8 <GPIO_ReadFromInputPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0f8      	beq.n	80005e2 <main+0x2ce>

		delay();
 80005f0:	f7ff fe02 	bl	80001f8 <delay>

		cmdCode = COMMAND_ID_READ;
 80005f4:	2354      	movs	r3, #84	; 0x54
 80005f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SPI_SendData(SPI2, &cmdCode, 1);
 80005fa:	f107 0325 	add.w	r3, r7, #37	; 0x25
 80005fe:	2201      	movs	r2, #1
 8000600:	4619      	mov	r1, r3
 8000602:	4819      	ldr	r0, [pc, #100]	; (8000668 <main+0x354>)
 8000604:	f000 fc10 	bl	8000e28 <SPI_SendData>
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000608:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800060c:	2201      	movs	r2, #1
 800060e:	4619      	mov	r1, r3
 8000610:	4815      	ldr	r0, [pc, #84]	; (8000668 <main+0x354>)
 8000612:	f000 fc40 	bl	8000e96 <SPI_ReceiveData>

		// Read ack byte received
		SPI_SendData(SPI2, &dummy_write, 1);
 8000616:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800061a:	2201      	movs	r2, #1
 800061c:	4619      	mov	r1, r3
 800061e:	4812      	ldr	r0, [pc, #72]	; (8000668 <main+0x354>)
 8000620:	f000 fc02 	bl	8000e28 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000628:	2201      	movs	r2, #1
 800062a:	4619      	mov	r1, r3
 800062c:	480e      	ldr	r0, [pc, #56]	; (8000668 <main+0x354>)
 800062e:	f000 fc32 	bl	8000e96 <SPI_ReceiveData>

		uint8_t id[11];
		uint32_t i=0;
 8000632:	2300      	movs	r3, #0
 8000634:	62bb      	str	r3, [r7, #40]	; 0x28

		// Function to verify if the ack byte is valid or not
		if( SPI_VerifyRespons(ackbyte) ){
 8000636:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fe56 	bl	80002ec <SPI_VerifyRespons>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d00c      	beq.n	8000660 <main+0x34c>
			// Get the 10 bytes of data
			SPI_SendData(SPI2, &dummy_write, 10);
 8000646:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800064a:	220a      	movs	r2, #10
 800064c:	4619      	mov	r1, r3
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <main+0x354>)
 8000650:	f000 fbea 	bl	8000e28 <SPI_SendData>
			uint32_t message10;
			SPI_ReceiveData(SPI2,(uint8_t *)&message10,10);
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	220a      	movs	r2, #10
 8000658:	4619      	mov	r1, r3
 800065a:	4803      	ldr	r0, [pc, #12]	; (8000668 <main+0x354>)
 800065c:	f000 fc1b 	bl	8000e96 <SPI_ReceiveData>

		}

		//read 10 bytes id from the slave
		for(  i = 0 ; i < 10 ; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28
 8000664:	e019      	b.n	800069a <main+0x386>
 8000666:	bf00      	nop
 8000668:	40003800 	.word	0x40003800
 800066c:	40020000 	.word	0x40020000
 8000670:	08000f64 	.word	0x08000f64
		{
			//send dummy byte to fetch data from slave
			SPI_SendData(SPI2,&dummy_write,1);
 8000674:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000678:	2201      	movs	r2, #1
 800067a:	4619      	mov	r1, r3
 800067c:	4810      	ldr	r0, [pc, #64]	; (80006c0 <main+0x3ac>)
 800067e:	f000 fbd3 	bl	8000e28 <SPI_SendData>
			SPI_ReceiveData(SPI2,&id[i],1);
 8000682:	f107 0214 	add.w	r2, r7, #20
 8000686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000688:	4413      	add	r3, r2
 800068a:	2201      	movs	r2, #1
 800068c:	4619      	mov	r1, r3
 800068e:	480c      	ldr	r0, [pc, #48]	; (80006c0 <main+0x3ac>)
 8000690:	f000 fc01 	bl	8000e96 <SPI_ReceiveData>
		for(  i = 0 ; i < 10 ; i++)
 8000694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000696:	3301      	adds	r3, #1
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
 800069a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800069c:	2b09      	cmp	r3, #9
 800069e:	d9e9      	bls.n	8000674 <main+0x360>
		}

		/* Confirm that SPI is not busy and all the data is transferred */
		while( SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG) );
 80006a0:	bf00      	nop
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	4806      	ldr	r0, [pc, #24]	; (80006c0 <main+0x3ac>)
 80006a6:	f000 fba9 	bl	8000dfc <SPI_GetFlagStatus>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1f8      	bne.n	80006a2 <main+0x38e>

		/* Disable SPI2 peripheral */
		SPI2_CONTROL(DISABLE);
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <main+0x3ac>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a02      	ldr	r2, [pc, #8]	; (80006c0 <main+0x3ac>)
 80006b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006ba:	6013      	str	r3, [r2, #0]
	while(1){
 80006bc:	e63c      	b.n	8000338 <main+0x24>
 80006be:	bf00      	nop
 80006c0:	40003800 	.word	0x40003800

080006c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c4:	480d      	ldr	r0, [pc, #52]	; (80006fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ce:	490d      	ldr	r1, [pc, #52]	; (8000704 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d0:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <LoopForever+0xe>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e4:	4c0a      	ldr	r4, [pc, #40]	; (8000710 <LoopForever+0x16>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006f2:	f000 fc07 	bl	8000f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f6:	f7ff fe0d 	bl	8000314 <main>

080006fa <LoopForever>:

LoopForever:
  b LoopForever
 80006fa:	e7fe      	b.n	80006fa <LoopForever>
  ldr   r0, =_estack
 80006fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000704:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000708:	08000f74 	.word	0x08000f74
  ldr r2, =_sbss
 800070c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000710:	2000001c 	.word	0x2000001c

08000714 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC_IRQHandler>
	...

08000718 <GPIO_PeriClockControl>:
 * @return 			- none
 *
 * @Note			- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d162      	bne.n	80007f0 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA) {
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a64      	ldr	r2, [pc, #400]	; (80008c0 <GPIO_PeriClockControl+0x1a8>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000732:	4b64      	ldr	r3, [pc, #400]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a63      	ldr	r2, [pc, #396]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		}else if(pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}
}
 800073e:	e0b9      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a61      	ldr	r2, [pc, #388]	; (80008c8 <GPIO_PeriClockControl+0x1b0>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d106      	bne.n	8000756 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000748:	4b5e      	ldr	r3, [pc, #376]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	4a5d      	ldr	r2, [pc, #372]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 800074e:	f043 0302 	orr.w	r3, r3, #2
 8000752:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000754:	e0ae      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC) {
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a5c      	ldr	r2, [pc, #368]	; (80008cc <GPIO_PeriClockControl+0x1b4>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d106      	bne.n	800076c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800075e:	4b59      	ldr	r3, [pc, #356]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a58      	ldr	r2, [pc, #352]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
}
 800076a:	e0a3      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a58      	ldr	r2, [pc, #352]	; (80008d0 <GPIO_PeriClockControl+0x1b8>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d106      	bne.n	8000782 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000774:	4b53      	ldr	r3, [pc, #332]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	4a52      	ldr	r2, [pc, #328]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 800077a:	f043 0308 	orr.w	r3, r3, #8
 800077e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000780:	e098      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE) {
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a53      	ldr	r2, [pc, #332]	; (80008d4 <GPIO_PeriClockControl+0x1bc>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d106      	bne.n	8000798 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800078a:	4b4e      	ldr	r3, [pc, #312]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a4d      	ldr	r2, [pc, #308]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 8000790:	f043 0310 	orr.w	r3, r3, #16
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000796:	e08d      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a4f      	ldr	r2, [pc, #316]	; (80008d8 <GPIO_PeriClockControl+0x1c0>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d106      	bne.n	80007ae <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80007a0:	4b48      	ldr	r3, [pc, #288]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	4a47      	ldr	r2, [pc, #284]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 80007a6:	f043 0320 	orr.w	r3, r3, #32
 80007aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ac:	e082      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG) {
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a4a      	ldr	r2, [pc, #296]	; (80008dc <GPIO_PeriClockControl+0x1c4>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d106      	bne.n	80007c4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80007b6:	4b43      	ldr	r3, [pc, #268]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a42      	ldr	r2, [pc, #264]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 80007bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007c2:	e077      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a46      	ldr	r2, [pc, #280]	; (80008e0 <GPIO_PeriClockControl+0x1c8>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d106      	bne.n	80007da <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80007cc:	4b3d      	ldr	r3, [pc, #244]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	4a3c      	ldr	r2, [pc, #240]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 80007d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007d8:	e06c      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a41      	ldr	r2, [pc, #260]	; (80008e4 <GPIO_PeriClockControl+0x1cc>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d168      	bne.n	80008b4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80007e2:	4b38      	ldr	r3, [pc, #224]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a37      	ldr	r2, [pc, #220]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 80007e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ee:	e061      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a33      	ldr	r2, [pc, #204]	; (80008c0 <GPIO_PeriClockControl+0x1a8>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d106      	bne.n	8000806 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80007f8:	4b32      	ldr	r3, [pc, #200]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	4a31      	ldr	r2, [pc, #196]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 80007fe:	f023 0301 	bic.w	r3, r3, #1
 8000802:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000804:	e056      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB) {
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a2f      	ldr	r2, [pc, #188]	; (80008c8 <GPIO_PeriClockControl+0x1b0>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d106      	bne.n	800081c <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800080e:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a2c      	ldr	r2, [pc, #176]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 8000814:	f023 0302 	bic.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
}
 800081a:	e04b      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a2b      	ldr	r2, [pc, #172]	; (80008cc <GPIO_PeriClockControl+0x1b4>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d106      	bne.n	8000832 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000824:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	4a26      	ldr	r2, [pc, #152]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 800082a:	f023 0304 	bic.w	r3, r3, #4
 800082e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000830:	e040      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD) {
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a26      	ldr	r2, [pc, #152]	; (80008d0 <GPIO_PeriClockControl+0x1b8>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d106      	bne.n	8000848 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a21      	ldr	r2, [pc, #132]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 8000840:	f023 0308 	bic.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000846:	e035      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a22      	ldr	r2, [pc, #136]	; (80008d4 <GPIO_PeriClockControl+0x1bc>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d106      	bne.n	800085e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 8000856:	f023 0310 	bic.w	r3, r3, #16
 800085a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800085c:	e02a      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF) {
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a1d      	ldr	r2, [pc, #116]	; (80008d8 <GPIO_PeriClockControl+0x1c0>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d106      	bne.n	8000874 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 800086c:	f023 0320 	bic.w	r3, r3, #32
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000872:	e01f      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a19      	ldr	r2, [pc, #100]	; (80008dc <GPIO_PeriClockControl+0x1c4>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d106      	bne.n	800088a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 8000882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000886:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000888:	e014      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <GPIO_PeriClockControl+0x1c8>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d106      	bne.n	80008a0 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 8000898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800089e:	e009      	b.n	80008b4 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <GPIO_PeriClockControl+0x1cc>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d105      	bne.n	80008b4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <GPIO_PeriClockControl+0x1ac>)
 80008ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40020800 	.word	0x40020800
 80008d0:	40020c00 	.word	0x40020c00
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40021400 	.word	0x40021400
 80008dc:	40021800 	.word	0x40021800
 80008e0:	40021c00 	.word	0x40021c00
 80008e4:	40022000 	.word	0x40022000

080008e8 <GPIO_Init>:
 * @return 			- none
 *
 * @Note			- none
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0; // temp register
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
	uint8_t tmp_PinNumber = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	74fb      	strb	r3, [r7, #19]
	uint8_t tmp_PinMode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	795b      	ldrb	r3, [r3, #5]
 80008fe:	74bb      	strb	r3, [r7, #18]

	/* Enable the peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx,ENABLE);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2101      	movs	r1, #1
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff06 	bl	8000718 <GPIO_PeriClockControl>

	/* 1. Configure the mode of the gpio pin */
	if (tmp_PinMode <= GPIO_MODE_ANALOG){
 800090c:	7cbb      	ldrb	r3, [r7, #18]
 800090e:	2b03      	cmp	r3, #3
 8000910:	d81c      	bhi.n	800094c <GPIO_Init+0x64>
		temp = (tmp_PinMode << (2 * tmp_PinNumber));
 8000912:	7cba      	ldrb	r2, [r7, #18]
 8000914:	7cfb      	ldrb	r3, [r7, #19]
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * tmp_PinNumber));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	7cfb      	ldrb	r3, [r7, #19]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	2103      	movs	r1, #3
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	4619      	mov	r1, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	400a      	ands	r2, r1
 8000938:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	6819      	ldr	r1, [r3, #0]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	430a      	orrs	r2, r1
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	e0aa      	b.n	8000aa2 <GPIO_Init+0x1ba>
	}else{
		// this is interrupt mode
		if (tmp_PinMode <= GPIO_MODE_IT_FT){
 800094c:	7cbb      	ldrb	r3, [r7, #18]
 800094e:	2b04      	cmp	r3, #4
 8000950:	d815      	bhi.n	800097e <GPIO_Init+0x96>
			// 1. Configure the FTSR (Falling trigger selection register)
			EXTI->FTSR |= (1 << tmp_PinNumber);
 8000952:	4b9e      	ldr	r3, [pc, #632]	; (8000bcc <GPIO_Init+0x2e4>)
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	7cfa      	ldrb	r2, [r7, #19]
 8000958:	2101      	movs	r1, #1
 800095a:	fa01 f202 	lsl.w	r2, r1, r2
 800095e:	4611      	mov	r1, r2
 8000960:	4a9a      	ldr	r2, [pc, #616]	; (8000bcc <GPIO_Init+0x2e4>)
 8000962:	430b      	orrs	r3, r1
 8000964:	60d3      	str	r3, [r2, #12]
			// 1.1 To make sure Rising edge detection is not set, we cleared it.
			EXTI->RTSR &= ~(1 << tmp_PinNumber);
 8000966:	4b99      	ldr	r3, [pc, #612]	; (8000bcc <GPIO_Init+0x2e4>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	7cfa      	ldrb	r2, [r7, #19]
 800096c:	2101      	movs	r1, #1
 800096e:	fa01 f202 	lsl.w	r2, r1, r2
 8000972:	43d2      	mvns	r2, r2
 8000974:	4611      	mov	r1, r2
 8000976:	4a95      	ldr	r2, [pc, #596]	; (8000bcc <GPIO_Init+0x2e4>)
 8000978:	400b      	ands	r3, r1
 800097a:	6093      	str	r3, [r2, #8]
 800097c:	e02f      	b.n	80009de <GPIO_Init+0xf6>

		}else if(tmp_PinMode <= GPIO_MODE_IT_RT){
 800097e:	7cbb      	ldrb	r3, [r7, #18]
 8000980:	2b05      	cmp	r3, #5
 8000982:	d815      	bhi.n	80009b0 <GPIO_Init+0xc8>
			// 1. Configure the RTSR (Rising trigger selection register)
			EXTI->RTSR |= (1 << tmp_PinNumber);
 8000984:	4b91      	ldr	r3, [pc, #580]	; (8000bcc <GPIO_Init+0x2e4>)
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	7cfa      	ldrb	r2, [r7, #19]
 800098a:	2101      	movs	r1, #1
 800098c:	fa01 f202 	lsl.w	r2, r1, r2
 8000990:	4611      	mov	r1, r2
 8000992:	4a8e      	ldr	r2, [pc, #568]	; (8000bcc <GPIO_Init+0x2e4>)
 8000994:	430b      	orrs	r3, r1
 8000996:	6093      	str	r3, [r2, #8]
			// 1.1 To make sure Falling edge detection is not set, we cleared it.
			EXTI->FTSR &= ~(1 << tmp_PinNumber);
 8000998:	4b8c      	ldr	r3, [pc, #560]	; (8000bcc <GPIO_Init+0x2e4>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	7cfa      	ldrb	r2, [r7, #19]
 800099e:	2101      	movs	r1, #1
 80009a0:	fa01 f202 	lsl.w	r2, r1, r2
 80009a4:	43d2      	mvns	r2, r2
 80009a6:	4611      	mov	r1, r2
 80009a8:	4a88      	ldr	r2, [pc, #544]	; (8000bcc <GPIO_Init+0x2e4>)
 80009aa:	400b      	ands	r3, r1
 80009ac:	60d3      	str	r3, [r2, #12]
 80009ae:	e016      	b.n	80009de <GPIO_Init+0xf6>

		}else if (tmp_PinMode <= GPIO_MODE_IT_RFT){
 80009b0:	7cbb      	ldrb	r3, [r7, #18]
 80009b2:	2b06      	cmp	r3, #6
 80009b4:	d813      	bhi.n	80009de <GPIO_Init+0xf6>
			// 1. Configure both RSTR and FTSR
			EXTI->RTSR |= (1 << tmp_PinNumber);
 80009b6:	4b85      	ldr	r3, [pc, #532]	; (8000bcc <GPIO_Init+0x2e4>)
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	7cfa      	ldrb	r2, [r7, #19]
 80009bc:	2101      	movs	r1, #1
 80009be:	fa01 f202 	lsl.w	r2, r1, r2
 80009c2:	4611      	mov	r1, r2
 80009c4:	4a81      	ldr	r2, [pc, #516]	; (8000bcc <GPIO_Init+0x2e4>)
 80009c6:	430b      	orrs	r3, r1
 80009c8:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << tmp_PinNumber);
 80009ca:	4b80      	ldr	r3, [pc, #512]	; (8000bcc <GPIO_Init+0x2e4>)
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	7cfa      	ldrb	r2, [r7, #19]
 80009d0:	2101      	movs	r1, #1
 80009d2:	fa01 f202 	lsl.w	r2, r1, r2
 80009d6:	4611      	mov	r1, r2
 80009d8:	4a7c      	ldr	r2, [pc, #496]	; (8000bcc <GPIO_Init+0x2e4>)
 80009da:	430b      	orrs	r3, r1
 80009dc:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = tmp_PinNumber / 4;
 80009de:	7cfb      	ldrb	r3, [r7, #19]
 80009e0:	089b      	lsrs	r3, r3, #2
 80009e2:	747b      	strb	r3, [r7, #17]
		uint8_t temp2 = tmp_PinNumber % 4;
 80009e4:	7cfb      	ldrb	r3, [r7, #19]
 80009e6:	f003 0303 	and.w	r3, r3, #3
 80009ea:	743b      	strb	r3, [r7, #16]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a77      	ldr	r2, [pc, #476]	; (8000bd0 <GPIO_Init+0x2e8>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d032      	beq.n	8000a5c <GPIO_Init+0x174>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a76      	ldr	r2, [pc, #472]	; (8000bd4 <GPIO_Init+0x2ec>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d02b      	beq.n	8000a58 <GPIO_Init+0x170>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a74      	ldr	r2, [pc, #464]	; (8000bd8 <GPIO_Init+0x2f0>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d024      	beq.n	8000a54 <GPIO_Init+0x16c>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a73      	ldr	r2, [pc, #460]	; (8000bdc <GPIO_Init+0x2f4>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d01d      	beq.n	8000a50 <GPIO_Init+0x168>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a71      	ldr	r2, [pc, #452]	; (8000be0 <GPIO_Init+0x2f8>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d016      	beq.n	8000a4c <GPIO_Init+0x164>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a70      	ldr	r2, [pc, #448]	; (8000be4 <GPIO_Init+0x2fc>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d00f      	beq.n	8000a48 <GPIO_Init+0x160>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a6e      	ldr	r2, [pc, #440]	; (8000be8 <GPIO_Init+0x300>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d008      	beq.n	8000a44 <GPIO_Init+0x15c>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a6d      	ldr	r2, [pc, #436]	; (8000bec <GPIO_Init+0x304>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d101      	bne.n	8000a40 <GPIO_Init+0x158>
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	e00e      	b.n	8000a5e <GPIO_Init+0x176>
 8000a40:	2300      	movs	r3, #0
 8000a42:	e00c      	b.n	8000a5e <GPIO_Init+0x176>
 8000a44:	2306      	movs	r3, #6
 8000a46:	e00a      	b.n	8000a5e <GPIO_Init+0x176>
 8000a48:	2305      	movs	r3, #5
 8000a4a:	e008      	b.n	8000a5e <GPIO_Init+0x176>
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	e006      	b.n	8000a5e <GPIO_Init+0x176>
 8000a50:	2303      	movs	r3, #3
 8000a52:	e004      	b.n	8000a5e <GPIO_Init+0x176>
 8000a54:	2302      	movs	r3, #2
 8000a56:	e002      	b.n	8000a5e <GPIO_Init+0x176>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e000      	b.n	8000a5e <GPIO_Init+0x176>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]

		SYSCFG_PCLK_EN();
 8000a60:	4b63      	ldr	r3, [pc, #396]	; (8000bf0 <GPIO_Init+0x308>)
 8000a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a64:	4a62      	ldr	r2, [pc, #392]	; (8000bf0 <GPIO_Init+0x308>)
 8000a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << (4 * temp2));
 8000a6c:	4a61      	ldr	r2, [pc, #388]	; (8000bf4 <GPIO_Init+0x30c>)
 8000a6e:	7c7b      	ldrb	r3, [r7, #17]
 8000a70:	3302      	adds	r3, #2
 8000a72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a76:	7bf9      	ldrb	r1, [r7, #15]
 8000a78:	7c3b      	ldrb	r3, [r7, #16]
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a80:	4618      	mov	r0, r3
 8000a82:	495c      	ldr	r1, [pc, #368]	; (8000bf4 <GPIO_Init+0x30c>)
 8000a84:	7c7b      	ldrb	r3, [r7, #17]
 8000a86:	4302      	orrs	r2, r0
 8000a88:	3302      	adds	r3, #2
 8000a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << tmp_PinNumber);
 8000a8e:	4b4f      	ldr	r3, [pc, #316]	; (8000bcc <GPIO_Init+0x2e4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	7cfa      	ldrb	r2, [r7, #19]
 8000a94:	2101      	movs	r1, #1
 8000a96:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4a4b      	ldr	r2, [pc, #300]	; (8000bcc <GPIO_Init+0x2e4>)
 8000a9e:	430b      	orrs	r3, r1
 8000aa0:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]

	/* 2. Configure the speed */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * tmp_PinNumber));
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	799b      	ldrb	r3, [r3, #6]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	7cfb      	ldrb	r3, [r7, #19]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * tmp_PinNumber));
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	689a      	ldr	r2, [r3, #8]
 8000abc:	7cfb      	ldrb	r3, [r7, #19]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	4619      	mov	r1, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	400a      	ands	r2, r1
 8000ad0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	6899      	ldr	r1, [r3, #8]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]

	/* 2. Configure the pupd settings */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * tmp_PinNumber));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	79db      	ldrb	r3, [r3, #7]
 8000aea:	461a      	mov	r2, r3
 8000aec:	7cfb      	ldrb	r3, [r7, #19]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * tmp_PinNumber));
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	7cfb      	ldrb	r3, [r7, #19]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	2103      	movs	r1, #3
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	4619      	mov	r1, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	400a      	ands	r2, r1
 8000b10:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68d9      	ldr	r1, [r3, #12]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]

	/* 2. Configure the optype */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << tmp_PinNumber);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7a1b      	ldrb	r3, [r3, #8]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	7cfb      	ldrb	r3, [r7, #19]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << (tmp_PinNumber));
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	7cfb      	ldrb	r3, [r7, #19]
 8000b3c:	2103      	movs	r1, #3
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	4619      	mov	r1, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	400a      	ands	r2, r1
 8000b4c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6859      	ldr	r1, [r3, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	605a      	str	r2, [r3, #4]

	/* 2. Configure the alt funcionality */
	if (tmp_PinMode == GPIO_MODE_ALTFN){
 8000b5e:	7cbb      	ldrb	r3, [r7, #18]
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d12f      	bne.n	8000bc4 <GPIO_Init+0x2dc>
		uint8_t temp1 = tmp_PinNumber / 8;
 8000b64:	7cfb      	ldrb	r3, [r7, #19]
 8000b66:	08db      	lsrs	r3, r3, #3
 8000b68:	73bb      	strb	r3, [r7, #14]
		uint8_t temp2 = tmp_PinNumber % 8;
 8000b6a:	7cfb      	ldrb	r3, [r7, #19]
 8000b6c:	f003 0307 	and.w	r3, r3, #7
 8000b70:	737b      	strb	r3, [r7, #13]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	7bba      	ldrb	r2, [r7, #14]
 8000b78:	3208      	adds	r2, #8
 8000b7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b7e:	7b7b      	ldrb	r3, [r7, #13]
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	220f      	movs	r2, #15
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	7bba      	ldrb	r2, [r7, #14]
 8000b92:	4001      	ands	r1, r0
 8000b94:	3208      	adds	r2, #8
 8000b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	7bba      	ldrb	r2, [r7, #14]
 8000ba0:	3208      	adds	r2, #8
 8000ba2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	7a5b      	ldrb	r3, [r3, #9]
 8000baa:	461a      	mov	r2, r3
 8000bac:	7b7b      	ldrb	r3, [r7, #13]
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	7bba      	ldrb	r2, [r7, #14]
 8000bbc:	4301      	orrs	r1, r0
 8000bbe:	3208      	adds	r2, #8
 8000bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000bc4:	bf00      	nop
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40013c00 	.word	0x40013c00
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40020400 	.word	0x40020400
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40020c00 	.word	0x40020c00
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40021400 	.word	0x40021400
 8000be8:	40021800 	.word	0x40021800
 8000bec:	40021c00 	.word	0x40021c00
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40013800 	.word	0x40013800

08000bf8 <GPIO_ReadFromInputPin>:
 * @param[in]		- Number of the given pin
 *
 * @Note			- none
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x1);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	691a      	ldr	r2, [r3, #16]
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
	return value;
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
	...

08000c24 <SPI_PeriClockControl>:
 * @return 			- none
 *
 * @Note			- none
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d120      	bne.n	8000c78 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1) {
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a22      	ldr	r2, [pc, #136]	; (8000cc4 <SPI_PeriClockControl+0xa0>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d106      	bne.n	8000c4c <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000c3e:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a21      	ldr	r2, [pc, #132]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
			SPI2_PCLK_DI();
		}else if(pSPIx == SPI3) {
			SPI3_PCLK_DI();
		}
	}
}
 8000c4a:	e035      	b.n	8000cb8 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2) {
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <SPI_PeriClockControl+0xa8>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d106      	bne.n	8000c62 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	4a1b      	ldr	r2, [pc, #108]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c60:	e02a      	b.n	8000cb8 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3) {
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a1a      	ldr	r2, [pc, #104]	; (8000cd0 <SPI_PeriClockControl+0xac>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d126      	bne.n	8000cb8 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a16      	ldr	r2, [pc, #88]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c76:	e01f      	b.n	8000cb8 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1) {
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <SPI_PeriClockControl+0xa0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d106      	bne.n	8000c8e <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c84:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c8a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c8c:	e014      	b.n	8000cb8 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2) {
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <SPI_PeriClockControl+0xa8>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d106      	bne.n	8000ca4 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ca2:	e009      	b.n	8000cb8 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3) {
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <SPI_PeriClockControl+0xac>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d105      	bne.n	8000cb8 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000cb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000cb6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40013000 	.word	0x40013000
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40003800 	.word	0x40003800
 8000cd0:	40003c00 	.word	0x40003c00

08000cd4 <SPI_Init>:
 *
 * @Note			- none
 */


void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

	uint32_t tempReg = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]

	/* Enable the peripheral clock */
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff9c 	bl	8000c24 <SPI_PeriClockControl>

	/* 1. Configure Device mode */
	tempReg |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	791b      	ldrb	r3, [r3, #4]
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]

	/* 2. Configure Bus type */
	if ((pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_FULL_DUPLEX) || (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_SIMPLEX_TXONLY)){
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	795b      	ldrb	r3, [r3, #5]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <SPI_Init+0x36>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	795b      	ldrb	r3, [r3, #5]
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	d110      	bne.n	8000d2c <SPI_Init+0x58>
		pSPIHandle->pSPIx->CR[0] &= ~(1 << SPI_CR1_BIDIMODE);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d18:	601a      	str	r2, [r3, #0]
		pSPIHandle->pSPIx->CR[0] &= ~(1 << SPI_CR1_RXONLY);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e03d      	b.n	8000da8 <SPI_Init+0xd4>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_HALF_DUPLEX_RX){
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	795b      	ldrb	r3, [r3, #5]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d110      	bne.n	8000d56 <SPI_Init+0x82>
		pSPIHandle->pSPIx->CR[0] |= (1 << SPI_CR1_BIDIMODE);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d42:	601a      	str	r2, [r3, #0]
		pSPIHandle->pSPIx->CR[0] &= ~(1 << SPI_CR1_BIDIOE);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	e028      	b.n	8000da8 <SPI_Init+0xd4>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_HALF_DUPLEX_TX){
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	795b      	ldrb	r3, [r3, #5]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d110      	bne.n	8000d80 <SPI_Init+0xac>
		pSPIHandle->pSPIx->CR[0] |= (1 << SPI_CR1_BIDIMODE);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d6c:	601a      	str	r2, [r3, #0]
		pSPIHandle->pSPIx->CR[0] |= (1 << SPI_CR1_BIDIOE);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	e013      	b.n	8000da8 <SPI_Init+0xd4>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_SIMPLEX_RXONLY){
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	795b      	ldrb	r3, [r3, #5]
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d10f      	bne.n	8000da8 <SPI_Init+0xd4>
		pSPIHandle->pSPIx->CR[0] &= ~(1 << SPI_CR1_BIDIMODE);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d96:	601a      	str	r2, [r3, #0]
		pSPIHandle->pSPIx->CR[0] |= (1 << SPI_CR1_RXONLY);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000da6:	601a      	str	r2, [r3, #0]
	}

	/* 3. Configure clock speed	 */
	tempReg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	799b      	ldrb	r3, [r3, #6]
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	461a      	mov	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]

	/* 4. Configure Data frame format */
	tempReg |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	79db      	ldrb	r3, [r3, #7]
 8000dba:	02db      	lsls	r3, r3, #11
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]

	/* 5. Configure CPOL */
	tempReg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7a1b      	ldrb	r3, [r3, #8]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]

	/* 5. Configure CPAH */
	tempReg |= (pSPIHandle->SPIConfig.SPI_CPAH << SPI_CR1_CPAH);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7a5b      	ldrb	r3, [r3, #9]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]

	/* 5. Configure SSM */
	tempReg |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7a9b      	ldrb	r3, [r3, #10]
 8000de2:	025b      	lsls	r3, r3, #9
 8000de4:	461a      	mov	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR[0] = tempReg;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	601a      	str	r2, [r3, #0]
}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <SPI_GetFlagStatus>:
		SPI3_REG_RESET();
	}
}


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]

	uint8_t value;
	(pSPIx->SR & FlagName) ? (value = FLAG_SET) : (value = FLAG_RESET);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d002      	beq.n	8000e18 <SPI_GetFlagStatus+0x1c>
 8000e12:	2301      	movs	r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]
 8000e16:	e001      	b.n	8000e1c <SPI_GetFlagStatus+0x20>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73fb      	strb	r3, [r7, #15]
	return value;
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <SPI_SendData>:
 * @Note			- This is blocking call. Also called polling base code, polling type API because may hang permanently
 *
 */


void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]

		while(Len){
 8000e34:	e027      	b.n	8000e86 <SPI_SendData+0x5e>
			/* 1. Wait until Tx buffer is empty	*/
			while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET );		/* This loop can cause the block of the code permanently due to
 8000e36:	bf00      	nop
 8000e38:	2102      	movs	r1, #2
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f7ff ffde 	bl	8000dfc <SPI_GetFlagStatus>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f8      	beq.n	8000e38 <SPI_SendData+0x10>
																				   external problems or communication problems as well */

			/* 2. Check whether the data frame format is 8bit or 16bit	*/
			if (pSPIx->CR[0] & SPI_DFF_SEL){ 			// DFF at 1 -> 16bit
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00e      	beq.n	8000e70 <SPI_SendData+0x48>
				pSPIx->DR = *((uint16_t *) pTxBuffer);  // We typecast the value at 2 bytes and then dereference
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	60da      	str	r2, [r3, #12]
				pTxBuffer += sizeof(uint16_t);
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	3302      	adds	r3, #2
 8000e60:	60bb      	str	r3, [r7, #8]
				Len--;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
				Len--;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	e00a      	b.n	8000e86 <SPI_SendData+0x5e>
				//(uint16_t*)pTxBuffer++; // we typecast the pointer to increase the address in two bytes
			}else {										// DFF at 0 -> 8bit
				pSPIx->DR = *pTxBuffer;
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	60da      	str	r2, [r3, #12]
				Len--;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	607b      	str	r3, [r7, #4]
				pTxBuffer++;
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	3301      	adds	r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
		while(Len){
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1d4      	bne.n	8000e36 <SPI_SendData+0xe>
			}

		}
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <SPI_ReceiveData>:

	}
}*/

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
	while(Len)
 8000ea2:	e027      	b.n	8000ef4 <SPI_ReceiveData+0x5e>
		{
			//1. wait until RXNE is set
			while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );
 8000ea4:	bf00      	nop
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f7ff ffa7 	bl	8000dfc <SPI_GetFlagStatus>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0f8      	beq.n	8000ea6 <SPI_ReceiveData+0x10>

			//2. check the DFF bit in CR1
			if( (pSPIx->CR[0] & ( 1 << SPI_CR1_DFF) ) )
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00e      	beq.n	8000ede <SPI_ReceiveData+0x48>
			{
				//16 bit DFF
				//1. load the data from DR to Rxbuffer address
				 *((uint16_t*)pRxBuffer) = pSPIx->DR ;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	801a      	strh	r2, [r3, #0]
				Len--;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
				Len--;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRxBuffer++;
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	e00a      	b.n	8000ef4 <SPI_ReceiveData+0x5e>
			}else
			{
				//8 bit DFF
				*(pRxBuffer) = pSPIx->DR ;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	701a      	strb	r2, [r3, #0]
				Len--;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
	while(Len)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1d4      	bne.n	8000ea4 <SPI_ReceiveData+0xe>
			}
		}

}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <__libc_init_array>:
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	4d0d      	ldr	r5, [pc, #52]	; (8000f3c <__libc_init_array+0x38>)
 8000f08:	4c0d      	ldr	r4, [pc, #52]	; (8000f40 <__libc_init_array+0x3c>)
 8000f0a:	1b64      	subs	r4, r4, r5
 8000f0c:	10a4      	asrs	r4, r4, #2
 8000f0e:	2600      	movs	r6, #0
 8000f10:	42a6      	cmp	r6, r4
 8000f12:	d109      	bne.n	8000f28 <__libc_init_array+0x24>
 8000f14:	4d0b      	ldr	r5, [pc, #44]	; (8000f44 <__libc_init_array+0x40>)
 8000f16:	4c0c      	ldr	r4, [pc, #48]	; (8000f48 <__libc_init_array+0x44>)
 8000f18:	f000 f818 	bl	8000f4c <_init>
 8000f1c:	1b64      	subs	r4, r4, r5
 8000f1e:	10a4      	asrs	r4, r4, #2
 8000f20:	2600      	movs	r6, #0
 8000f22:	42a6      	cmp	r6, r4
 8000f24:	d105      	bne.n	8000f32 <__libc_init_array+0x2e>
 8000f26:	bd70      	pop	{r4, r5, r6, pc}
 8000f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f2c:	4798      	blx	r3
 8000f2e:	3601      	adds	r6, #1
 8000f30:	e7ee      	b.n	8000f10 <__libc_init_array+0xc>
 8000f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f36:	4798      	blx	r3
 8000f38:	3601      	adds	r6, #1
 8000f3a:	e7f2      	b.n	8000f22 <__libc_init_array+0x1e>
 8000f3c:	08000f6c 	.word	0x08000f6c
 8000f40:	08000f6c 	.word	0x08000f6c
 8000f44:	08000f6c 	.word	0x08000f6c
 8000f48:	08000f70 	.word	0x08000f70

08000f4c <_init>:
 8000f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4e:	bf00      	nop
 8000f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f52:	bc08      	pop	{r3}
 8000f54:	469e      	mov	lr, r3
 8000f56:	4770      	bx	lr

08000f58 <_fini>:
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	bf00      	nop
 8000f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5e:	bc08      	pop	{r3}
 8000f60:	469e      	mov	lr, r3
 8000f62:	4770      	bx	lr
