
stm32f407_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a28  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001bd0  08001bd0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001bd0  08001bd0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08001bd0  08001bd0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bd0  08001bd0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bd0  08001bd0  00011bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bd4  08001bd4  00011bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00000048  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000068  20000068  00020020  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   000017f6  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000576  00000000  00000000  00021840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b8  00000000  00000000  00021db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000180  00000000  00000000  00021f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002928  00000000  00000000  000220f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002007  00000000  00000000  00024a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b07e  00000000  00000000  00026a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00031a9d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000794  00000000  00000000  00031af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000020 	.word	0x20000020
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001bb8 	.word	0x08001bb8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000024 	.word	0x20000024
 80001e4:	08001bb8 	.word	0x08001bb8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_drsub>:
 80001f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001fc:	e002      	b.n	8000204 <__adddf3>
 80001fe:	bf00      	nop

08000200 <__aeabi_dsub>:
 8000200:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000204 <__adddf3>:
 8000204:	b530      	push	{r4, r5, lr}
 8000206:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800020e:	ea94 0f05 	teq	r4, r5
 8000212:	bf08      	it	eq
 8000214:	ea90 0f02 	teqeq	r0, r2
 8000218:	bf1f      	itttt	ne
 800021a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800021e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000222:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000226:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022a:	f000 80e2 	beq.w	80003f2 <__adddf3+0x1ee>
 800022e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000232:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000236:	bfb8      	it	lt
 8000238:	426d      	neglt	r5, r5
 800023a:	dd0c      	ble.n	8000256 <__adddf3+0x52>
 800023c:	442c      	add	r4, r5
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	ea82 0000 	eor.w	r0, r2, r0
 800024a:	ea83 0101 	eor.w	r1, r3, r1
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	2d36      	cmp	r5, #54	; 0x36
 8000258:	bf88      	it	hi
 800025a:	bd30      	pophi	{r4, r5, pc}
 800025c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000260:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000264:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000268:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x70>
 800026e:	4240      	negs	r0, r0
 8000270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000274:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000278:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800027c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000280:	d002      	beq.n	8000288 <__adddf3+0x84>
 8000282:	4252      	negs	r2, r2
 8000284:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000288:	ea94 0f05 	teq	r4, r5
 800028c:	f000 80a7 	beq.w	80003de <__adddf3+0x1da>
 8000290:	f1a4 0401 	sub.w	r4, r4, #1
 8000294:	f1d5 0e20 	rsbs	lr, r5, #32
 8000298:	db0d      	blt.n	80002b6 <__adddf3+0xb2>
 800029a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800029e:	fa22 f205 	lsr.w	r2, r2, r5
 80002a2:	1880      	adds	r0, r0, r2
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ac:	1880      	adds	r0, r0, r2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	4159      	adcs	r1, r3
 80002b4:	e00e      	b.n	80002d4 <__adddf3+0xd0>
 80002b6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ba:	f10e 0e20 	add.w	lr, lr, #32
 80002be:	2a01      	cmp	r2, #1
 80002c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c4:	bf28      	it	cs
 80002c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ca:	fa43 f305 	asr.w	r3, r3, r5
 80002ce:	18c0      	adds	r0, r0, r3
 80002d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d8:	d507      	bpl.n	80002ea <__adddf3+0xe6>
 80002da:	f04f 0e00 	mov.w	lr, #0
 80002de:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ee:	d31b      	bcc.n	8000328 <__adddf3+0x124>
 80002f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f4:	d30c      	bcc.n	8000310 <__adddf3+0x10c>
 80002f6:	0849      	lsrs	r1, r1, #1
 80002f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000300:	f104 0401 	add.w	r4, r4, #1
 8000304:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000308:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800030c:	f080 809a 	bcs.w	8000444 <__adddf3+0x240>
 8000310:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	ea41 0105 	orr.w	r1, r1, r5
 8000326:	bd30      	pop	{r4, r5, pc}
 8000328:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800032c:	4140      	adcs	r0, r0
 800032e:	eb41 0101 	adc.w	r1, r1, r1
 8000332:	3c01      	subs	r4, #1
 8000334:	bf28      	it	cs
 8000336:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033a:	d2e9      	bcs.n	8000310 <__adddf3+0x10c>
 800033c:	f091 0f00 	teq	r1, #0
 8000340:	bf04      	itt	eq
 8000342:	4601      	moveq	r1, r0
 8000344:	2000      	moveq	r0, #0
 8000346:	fab1 f381 	clz	r3, r1
 800034a:	bf08      	it	eq
 800034c:	3320      	addeq	r3, #32
 800034e:	f1a3 030b 	sub.w	r3, r3, #11
 8000352:	f1b3 0220 	subs.w	r2, r3, #32
 8000356:	da0c      	bge.n	8000372 <__adddf3+0x16e>
 8000358:	320c      	adds	r2, #12
 800035a:	dd08      	ble.n	800036e <__adddf3+0x16a>
 800035c:	f102 0c14 	add.w	ip, r2, #20
 8000360:	f1c2 020c 	rsb	r2, r2, #12
 8000364:	fa01 f00c 	lsl.w	r0, r1, ip
 8000368:	fa21 f102 	lsr.w	r1, r1, r2
 800036c:	e00c      	b.n	8000388 <__adddf3+0x184>
 800036e:	f102 0214 	add.w	r2, r2, #20
 8000372:	bfd8      	it	le
 8000374:	f1c2 0c20 	rsble	ip, r2, #32
 8000378:	fa01 f102 	lsl.w	r1, r1, r2
 800037c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000380:	bfdc      	itt	le
 8000382:	ea41 010c 	orrle.w	r1, r1, ip
 8000386:	4090      	lslle	r0, r2
 8000388:	1ae4      	subs	r4, r4, r3
 800038a:	bfa2      	ittt	ge
 800038c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000390:	4329      	orrge	r1, r5
 8000392:	bd30      	popge	{r4, r5, pc}
 8000394:	ea6f 0404 	mvn.w	r4, r4
 8000398:	3c1f      	subs	r4, #31
 800039a:	da1c      	bge.n	80003d6 <__adddf3+0x1d2>
 800039c:	340c      	adds	r4, #12
 800039e:	dc0e      	bgt.n	80003be <__adddf3+0x1ba>
 80003a0:	f104 0414 	add.w	r4, r4, #20
 80003a4:	f1c4 0220 	rsb	r2, r4, #32
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f302 	lsl.w	r3, r1, r2
 80003b0:	ea40 0003 	orr.w	r0, r0, r3
 80003b4:	fa21 f304 	lsr.w	r3, r1, r4
 80003b8:	ea45 0103 	orr.w	r1, r5, r3
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f1c4 040c 	rsb	r4, r4, #12
 80003c2:	f1c4 0220 	rsb	r2, r4, #32
 80003c6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ca:	fa01 f304 	lsl.w	r3, r1, r4
 80003ce:	ea40 0003 	orr.w	r0, r0, r3
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	fa21 f004 	lsr.w	r0, r1, r4
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f094 0f00 	teq	r4, #0
 80003e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003e6:	bf06      	itte	eq
 80003e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003ec:	3401      	addeq	r4, #1
 80003ee:	3d01      	subne	r5, #1
 80003f0:	e74e      	b.n	8000290 <__adddf3+0x8c>
 80003f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f6:	bf18      	it	ne
 80003f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003fc:	d029      	beq.n	8000452 <__adddf3+0x24e>
 80003fe:	ea94 0f05 	teq	r4, r5
 8000402:	bf08      	it	eq
 8000404:	ea90 0f02 	teqeq	r0, r2
 8000408:	d005      	beq.n	8000416 <__adddf3+0x212>
 800040a:	ea54 0c00 	orrs.w	ip, r4, r0
 800040e:	bf04      	itt	eq
 8000410:	4619      	moveq	r1, r3
 8000412:	4610      	moveq	r0, r2
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	ea91 0f03 	teq	r1, r3
 800041a:	bf1e      	ittt	ne
 800041c:	2100      	movne	r1, #0
 800041e:	2000      	movne	r0, #0
 8000420:	bd30      	popne	{r4, r5, pc}
 8000422:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000426:	d105      	bne.n	8000434 <__adddf3+0x230>
 8000428:	0040      	lsls	r0, r0, #1
 800042a:	4149      	adcs	r1, r1
 800042c:	bf28      	it	cs
 800042e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000432:	bd30      	pop	{r4, r5, pc}
 8000434:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000438:	bf3c      	itt	cc
 800043a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800043e:	bd30      	popcc	{r4, r5, pc}
 8000440:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000444:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000456:	bf1a      	itte	ne
 8000458:	4619      	movne	r1, r3
 800045a:	4610      	movne	r0, r2
 800045c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000460:	bf1c      	itt	ne
 8000462:	460b      	movne	r3, r1
 8000464:	4602      	movne	r2, r0
 8000466:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046a:	bf06      	itte	eq
 800046c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000470:	ea91 0f03 	teqeq	r1, r3
 8000474:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	bf00      	nop

0800047c <__aeabi_ui2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f04f 0500 	mov.w	r5, #0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e750      	b.n	800033c <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_i2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b4:	bf48      	it	mi
 80004b6:	4240      	negmi	r0, r0
 80004b8:	f04f 0100 	mov.w	r1, #0
 80004bc:	e73e      	b.n	800033c <__adddf3+0x138>
 80004be:	bf00      	nop

080004c0 <__aeabi_f2d>:
 80004c0:	0042      	lsls	r2, r0, #1
 80004c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ce:	bf1f      	itttt	ne
 80004d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004dc:	4770      	bxne	lr
 80004de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e2:	bf08      	it	eq
 80004e4:	4770      	bxeq	lr
 80004e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ea:	bf04      	itt	eq
 80004ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000500:	e71c      	b.n	800033c <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_ul2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	e00a      	b.n	800052a <__aeabi_l2d+0x16>

08000514 <__aeabi_l2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000522:	d502      	bpl.n	800052a <__aeabi_l2d+0x16>
 8000524:	4240      	negs	r0, r0
 8000526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000532:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000536:	f43f aed8 	beq.w	80002ea <__adddf3+0xe6>
 800053a:	f04f 0203 	mov.w	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000552:	f1c2 0320 	rsb	r3, r2, #32
 8000556:	fa00 fc03 	lsl.w	ip, r0, r3
 800055a:	fa20 f002 	lsr.w	r0, r0, r2
 800055e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000562:	ea40 000e 	orr.w	r0, r0, lr
 8000566:	fa21 f102 	lsr.w	r1, r1, r2
 800056a:	4414      	add	r4, r2
 800056c:	e6bd      	b.n	80002ea <__adddf3+0xe6>
 800056e:	bf00      	nop

08000570 <__aeabi_dmul>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057e:	bf1d      	ittte	ne
 8000580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000584:	ea94 0f0c 	teqne	r4, ip
 8000588:	ea95 0f0c 	teqne	r5, ip
 800058c:	f000 f8de 	bleq	800074c <__aeabi_dmul+0x1dc>
 8000590:	442c      	add	r4, r5
 8000592:	ea81 0603 	eor.w	r6, r1, r3
 8000596:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a2:	bf18      	it	ne
 80005a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b0:	d038      	beq.n	8000624 <__aeabi_dmul+0xb4>
 80005b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c6:	f04f 0600 	mov.w	r6, #0
 80005ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ce:	f09c 0f00 	teq	ip, #0
 80005d2:	bf18      	it	ne
 80005d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e4:	d204      	bcs.n	80005f0 <__aeabi_dmul+0x80>
 80005e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ea:	416d      	adcs	r5, r5
 80005ec:	eb46 0606 	adc.w	r6, r6, r6
 80005f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000600:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000604:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000608:	bf88      	it	hi
 800060a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060e:	d81e      	bhi.n	800064e <__aeabi_dmul+0xde>
 8000610:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000614:	bf08      	it	eq
 8000616:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061a:	f150 0000 	adcs.w	r0, r0, #0
 800061e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000628:	ea46 0101 	orr.w	r1, r6, r1
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	ea81 0103 	eor.w	r1, r1, r3
 8000634:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000638:	bfc2      	ittt	gt
 800063a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000642:	bd70      	popgt	{r4, r5, r6, pc}
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f04f 0e00 	mov.w	lr, #0
 800064c:	3c01      	subs	r4, #1
 800064e:	f300 80ab 	bgt.w	80007a8 <__aeabi_dmul+0x238>
 8000652:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000656:	bfde      	ittt	le
 8000658:	2000      	movle	r0, #0
 800065a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd70      	pople	{r4, r5, r6, pc}
 8000660:	f1c4 0400 	rsb	r4, r4, #0
 8000664:	3c20      	subs	r4, #32
 8000666:	da35      	bge.n	80006d4 <__aeabi_dmul+0x164>
 8000668:	340c      	adds	r4, #12
 800066a:	dc1b      	bgt.n	80006a4 <__aeabi_dmul+0x134>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f305 	lsl.w	r3, r0, r5
 8000678:	fa20 f004 	lsr.w	r0, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800068c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000690:	fa21 f604 	lsr.w	r6, r1, r4
 8000694:	eb42 0106 	adc.w	r1, r2, r6
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 040c 	rsb	r4, r4, #12
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f304 	lsl.w	r3, r0, r4
 80006b0:	fa20 f005 	lsr.w	r0, r0, r5
 80006b4:	fa01 f204 	lsl.w	r2, r1, r4
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c4:	f141 0100 	adc.w	r1, r1, #0
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f205 	lsl.w	r2, r0, r5
 80006dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e0:	fa20 f304 	lsr.w	r3, r0, r4
 80006e4:	fa01 f205 	lsl.w	r2, r1, r5
 80006e8:	ea43 0302 	orr.w	r3, r3, r2
 80006ec:	fa21 f004 	lsr.w	r0, r1, r4
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	fa21 f204 	lsr.w	r2, r1, r4
 80006f8:	ea20 0002 	bic.w	r0, r0, r2
 80006fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f094 0f00 	teq	r4, #0
 8000710:	d10f      	bne.n	8000732 <__aeabi_dmul+0x1c2>
 8000712:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000716:	0040      	lsls	r0, r0, #1
 8000718:	eb41 0101 	adc.w	r1, r1, r1
 800071c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3c01      	subeq	r4, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1a6>
 8000726:	ea41 0106 	orr.w	r1, r1, r6
 800072a:	f095 0f00 	teq	r5, #0
 800072e:	bf18      	it	ne
 8000730:	4770      	bxne	lr
 8000732:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	eb43 0303 	adc.w	r3, r3, r3
 800073c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3d01      	subeq	r5, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1c6>
 8000746:	ea43 0306 	orr.w	r3, r3, r6
 800074a:	4770      	bx	lr
 800074c:	ea94 0f0c 	teq	r4, ip
 8000750:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000754:	bf18      	it	ne
 8000756:	ea95 0f0c 	teqne	r5, ip
 800075a:	d00c      	beq.n	8000776 <__aeabi_dmul+0x206>
 800075c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000760:	bf18      	it	ne
 8000762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000766:	d1d1      	bne.n	800070c <__aeabi_dmul+0x19c>
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd70      	pop	{r4, r5, r6, pc}
 8000776:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077a:	bf06      	itte	eq
 800077c:	4610      	moveq	r0, r2
 800077e:	4619      	moveq	r1, r3
 8000780:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000784:	d019      	beq.n	80007ba <__aeabi_dmul+0x24a>
 8000786:	ea94 0f0c 	teq	r4, ip
 800078a:	d102      	bne.n	8000792 <__aeabi_dmul+0x222>
 800078c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000790:	d113      	bne.n	80007ba <__aeabi_dmul+0x24a>
 8000792:	ea95 0f0c 	teq	r5, ip
 8000796:	d105      	bne.n	80007a4 <__aeabi_dmul+0x234>
 8000798:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800079c:	bf1c      	itt	ne
 800079e:	4610      	movne	r0, r2
 80007a0:	4619      	movne	r1, r3
 80007a2:	d10a      	bne.n	80007ba <__aeabi_dmul+0x24a>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c2:	bd70      	pop	{r4, r5, r6, pc}

080007c4 <__aeabi_ddiv>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d2:	bf1d      	ittte	ne
 80007d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d8:	ea94 0f0c 	teqne	r4, ip
 80007dc:	ea95 0f0c 	teqne	r5, ip
 80007e0:	f000 f8a7 	bleq	8000932 <__aeabi_ddiv+0x16e>
 80007e4:	eba4 0405 	sub.w	r4, r4, r5
 80007e8:	ea81 0e03 	eor.w	lr, r1, r3
 80007ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f4:	f000 8088 	beq.w	8000908 <__aeabi_ddiv+0x144>
 80007f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000800:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000804:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000808:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800080c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000810:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000814:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000818:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800081c:	429d      	cmp	r5, r3
 800081e:	bf08      	it	eq
 8000820:	4296      	cmpeq	r6, r2
 8000822:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000826:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082a:	d202      	bcs.n	8000832 <__aeabi_ddiv+0x6e>
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	1ab6      	subs	r6, r6, r2
 8000834:	eb65 0503 	sbc.w	r5, r5, r3
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000842:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 000c 	orrcs.w	r0, r0, ip
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a4:	d018      	beq.n	80008d8 <__aeabi_ddiv+0x114>
 80008a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c2:	d1c0      	bne.n	8000846 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	d10b      	bne.n	80008e2 <__aeabi_ddiv+0x11e>
 80008ca:	ea41 0100 	orr.w	r1, r1, r0
 80008ce:	f04f 0000 	mov.w	r0, #0
 80008d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d6:	e7b6      	b.n	8000846 <__aeabi_ddiv+0x82>
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	bf04      	itt	eq
 80008de:	4301      	orreq	r1, r0
 80008e0:	2000      	moveq	r0, #0
 80008e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e6:	bf88      	it	hi
 80008e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008ec:	f63f aeaf 	bhi.w	800064e <__aeabi_dmul+0xde>
 80008f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f4:	bf04      	itt	eq
 80008f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fe:	f150 0000 	adcs.w	r0, r0, #0
 8000902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000906:	bd70      	pop	{r4, r5, r6, pc}
 8000908:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800090c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000910:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000914:	bfc2      	ittt	gt
 8000916:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091e:	bd70      	popgt	{r4, r5, r6, pc}
 8000920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000924:	f04f 0e00 	mov.w	lr, #0
 8000928:	3c01      	subs	r4, #1
 800092a:	e690      	b.n	800064e <__aeabi_dmul+0xde>
 800092c:	ea45 0e06 	orr.w	lr, r5, r6
 8000930:	e68d      	b.n	800064e <__aeabi_dmul+0xde>
 8000932:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000936:	ea94 0f0c 	teq	r4, ip
 800093a:	bf08      	it	eq
 800093c:	ea95 0f0c 	teqeq	r5, ip
 8000940:	f43f af3b 	beq.w	80007ba <__aeabi_dmul+0x24a>
 8000944:	ea94 0f0c 	teq	r4, ip
 8000948:	d10a      	bne.n	8000960 <__aeabi_ddiv+0x19c>
 800094a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094e:	f47f af34 	bne.w	80007ba <__aeabi_dmul+0x24a>
 8000952:	ea95 0f0c 	teq	r5, ip
 8000956:	f47f af25 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e72c      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000960:	ea95 0f0c 	teq	r5, ip
 8000964:	d106      	bne.n	8000974 <__aeabi_ddiv+0x1b0>
 8000966:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096a:	f43f aefd 	beq.w	8000768 <__aeabi_dmul+0x1f8>
 800096e:	4610      	mov	r0, r2
 8000970:	4619      	mov	r1, r3
 8000972:	e722      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000978:	bf18      	it	ne
 800097a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097e:	f47f aec5 	bne.w	800070c <__aeabi_dmul+0x19c>
 8000982:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000986:	f47f af0d 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800098a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098e:	f47f aeeb 	bne.w	8000768 <__aeabi_dmul+0x1f8>
 8000992:	e712      	b.n	80007ba <__aeabi_dmul+0x24a>

08000994 <__aeabi_d2uiz>:
 8000994:	004a      	lsls	r2, r1, #1
 8000996:	d211      	bcs.n	80009bc <__aeabi_d2uiz+0x28>
 8000998:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800099c:	d211      	bcs.n	80009c2 <__aeabi_d2uiz+0x2e>
 800099e:	d50d      	bpl.n	80009bc <__aeabi_d2uiz+0x28>
 80009a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a8:	d40e      	bmi.n	80009c8 <__aeabi_d2uiz+0x34>
 80009aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009b6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d102      	bne.n	80009ce <__aeabi_d2uiz+0x3a>
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	4770      	bx	lr
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	4770      	bx	lr

080009d4 <I2C1_GPIOInit>:

void delay(void){
	for (uint32_t i = 0; i < 500000/2; i++);
}

void I2C1_GPIOInit(){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0

	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <I2C1_GPIOInit+0x40>)
 80009dc:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009de:	2302      	movs	r3, #2
 80009e0:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80009e2:	2301      	movs	r3, #1
 80009e4:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80009e6:	2304      	movs	r3, #4
 80009e8:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80009ea:	2301      	movs	r3, #1
 80009ec:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80009ee:	2302      	movs	r3, #2
 80009f0:	72bb      	strb	r3, [r7, #10]

	// SCL pin
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80009f2:	2306      	movs	r3, #6
 80009f4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 f9df 	bl	8000dbc <GPIO_Init>

	// SDA pin
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80009fe:	2307      	movs	r3, #7
 8000a00:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f9d9 	bl	8000dbc <GPIO_Init>

}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40020400 	.word	0x40020400

08000a18 <I2C1_Inits>:

void I2C1_Inits(){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx = I2C1;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <I2C1_Inits+0x2c>)
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <I2C1_Inits+0x30>)
 8000a20:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <I2C1_Inits+0x2c>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <I2C1_Inits+0x2c>)
 8000a2a:	2269      	movs	r2, #105	; 0x69
 8000a2c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <I2C1_Inits+0x2c>)
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <I2C1_Inits+0x34>)
 8000a32:	605a      	str	r2, [r3, #4]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = 0; // not used
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <I2C1_Inits+0x2c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	729a      	strb	r2, [r3, #10]

	I2C_Init(&I2C1Handle);
 8000a3a:	4802      	ldr	r0, [pc, #8]	; (8000a44 <I2C1_Inits+0x2c>)
 8000a3c:	f000 fd00 	bl	8001440 <I2C_Init>

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000003c 	.word	0x2000003c
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	000186a0 	.word	0x000186a0

08000a50 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	/* Button pin configuration */
	GPIOBtn.pGPIOx = GPIOA;
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <GPIO_ButtonInit+0x2c>)
 8000a58:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000a62:	2302      	movs	r3, #2
 8000a64:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a66:	2300      	movs	r3, #0
 8000a68:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 f9a5 	bl	8000dbc <GPIO_Init>
}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40020000 	.word	0x40020000

08000a80 <main>:


int main(){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 8000a84:	f7ff ffe4 	bl	8000a50 <GPIO_ButtonInit>

	// I2C pin inits
	I2C1_GPIOInit();
 8000a88:	f7ff ffa4 	bl	80009d4 <I2C1_GPIOInit>

	// I2C configuration
	I2C1_Inits();
 8000a8c:	f7ff ffc4 	bl	8000a18 <I2C1_Inits>

	// I2C IRQ configurations
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 8000a90:	2101      	movs	r1, #1
 8000a92:	201f      	movs	r0, #31
 8000a94:	f000 ffec 	bl	8001a70 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 8000a98:	2101      	movs	r1, #1
 8000a9a:	2020      	movs	r0, #32
 8000a9c:	f000 ffe8 	bl	8001a70 <I2C_IRQInterruptConfig>

	I2C_SlaveEnableDisableCallbackEvents(I2C1Handle.pI2Cx, ENABLE);
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <main+0x4c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fb6c 	bl	8001184 <I2C_SlaveEnableDisableCallbackEvents>

	// Enable the I2C1 peripheral control
	I2C1_CONTROL(ENABLE);
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <main+0x50>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <main+0x50>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6013      	str	r3, [r2, #0]

	// Enable the ack
	I2C_ACK_ENDI(I2C1Handle.pI2Cx, ENABLE);
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <main+0x4c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	4b03      	ldr	r3, [pc, #12]	; (8000acc <main+0x4c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ac6:	601a      	str	r2, [r3, #0]


	while(1);
 8000ac8:	e7fe      	b.n	8000ac8 <main+0x48>
 8000aca:	bf00      	nop
 8000acc:	2000003c 	.word	0x2000003c
 8000ad0:	40005400 	.word	0x40005400

08000ad4 <I2C_ApplicationEventCallback>:

	return 0;
}

void I2C_ApplicationEventCallback(I2C_Handle_t *I2C1Handle, uint8_t AppEv){
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]

	static uint8_t commandcode = 0;
	static uint8_t cnt = 0;

	if (AppEv == I2C_EV_DATA_REQ){
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	2b08      	cmp	r3, #8
 8000ae4:	d123      	bne.n	8000b2e <I2C_ApplicationEventCallback+0x5a>
		// Master wants some data so Slave has to send it
		if (commandcode == 0x51){
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <I2C_ApplicationEventCallback+0x90>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b51      	cmp	r3, #81	; 0x51
 8000aec:	d10b      	bne.n	8000b06 <I2C_ApplicationEventCallback+0x32>
			// Send the length information to the master
			I2C_SlaveSendData(I2C1Handle->pI2Cx, strlen((char*) message));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681c      	ldr	r4, [r3, #0]
 8000af2:	481d      	ldr	r0, [pc, #116]	; (8000b68 <I2C_ApplicationEventCallback+0x94>)
 8000af4:	f7ff fb78 	bl	80001e8 <strlen>
 8000af8:	4603      	mov	r3, r0
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	4619      	mov	r1, r3
 8000afe:	4620      	mov	r0, r4
 8000b00:	f000 fdc9 	bl	8001696 <I2C_SlaveSendData>
		cnt = 0;
	}else if (AppEv == I2C_EV_STOP){
		// This happens only during slave reception.
		// Master has ended the I2C communication with the slave.
	}
}
 8000b04:	e029      	b.n	8000b5a <I2C_ApplicationEventCallback+0x86>
		}else if (commandcode == 0x52){
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <I2C_ApplicationEventCallback+0x90>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b52      	cmp	r3, #82	; 0x52
 8000b0c:	d125      	bne.n	8000b5a <I2C_ApplicationEventCallback+0x86>
			I2C_SlaveSendData(I2C1Handle->pI2Cx, message[cnt++]);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <I2C_ApplicationEventCallback+0x98>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	1c59      	adds	r1, r3, #1
 8000b18:	b2c8      	uxtb	r0, r1
 8000b1a:	4914      	ldr	r1, [pc, #80]	; (8000b6c <I2C_ApplicationEventCallback+0x98>)
 8000b1c:	7008      	strb	r0, [r1, #0]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <I2C_ApplicationEventCallback+0x94>)
 8000b22:	5c5b      	ldrb	r3, [r3, r1]
 8000b24:	4619      	mov	r1, r3
 8000b26:	4610      	mov	r0, r2
 8000b28:	f000 fdb5 	bl	8001696 <I2C_SlaveSendData>
}
 8000b2c:	e015      	b.n	8000b5a <I2C_ApplicationEventCallback+0x86>
	}else if (AppEv == I2C_EV_DATA_RCV){
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	2b09      	cmp	r3, #9
 8000b32:	d109      	bne.n	8000b48 <I2C_ApplicationEventCallback+0x74>
		commandcode = I2C_SlaveReceiveData(I2C1Handle->pI2Cx);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 fdba 	bl	80016b2 <I2C_SlaveReceiveData>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <I2C_ApplicationEventCallback+0x90>)
 8000b44:	701a      	strb	r2, [r3, #0]
}
 8000b46:	e008      	b.n	8000b5a <I2C_ApplicationEventCallback+0x86>
	}else if (AppEv == I2C_ERROR_AF){
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	2b05      	cmp	r3, #5
 8000b4c:	d105      	bne.n	8000b5a <I2C_ApplicationEventCallback+0x86>
		commandcode = 0xff;
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <I2C_ApplicationEventCallback+0x90>)
 8000b50:	22ff      	movs	r2, #255	; 0xff
 8000b52:	701a      	strb	r2, [r3, #0]
		cnt = 0;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <I2C_ApplicationEventCallback+0x98>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000064 	.word	0x20000064
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000065 	.word	0x20000065

08000b70 <I2C1_EV_IRQHandler>:

/* Runs when a data byte is received from the peripheral over I2C */
void I2C1_EV_IRQHandler(void){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <I2C1_EV_IRQHandler+0x10>)
 8000b76:	f000 fda8 	bl	80016ca <I2C_EV_IRQHandling>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000003c 	.word	0x2000003c

08000b84 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <I2C1_ER_IRQHandler+0x10>)
 8000b8a:	f000 fee4 	bl	8001956 <I2C_ER_IRQHandling>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000003c 	.word	0x2000003c

08000b98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b9a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b9c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ba2:	490d      	ldr	r1, [pc, #52]	; (8000bd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <LoopForever+0xe>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	; (8000be4 <LoopForever+0x16>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bc6:	f000 ffd3 	bl	8001b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bca:	f7ff ff59 	bl	8000a80 <main>

08000bce <LoopForever>:

LoopForever:
  b LoopForever
 8000bce:	e7fe      	b.n	8000bce <LoopForever>
  ldr   r0, =_estack
 8000bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000bdc:	08001bd8 	.word	0x08001bd8
  ldr r2, =_sbss
 8000be0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000be4:	20000068 	.word	0x20000068

08000be8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>
	...

08000bec <GPIO_PeriClockControl>:
 * @return 			- none
 *
 * @Note			- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000bf8:	78fb      	ldrb	r3, [r7, #3]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d162      	bne.n	8000cc4 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA) {
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a64      	ldr	r2, [pc, #400]	; (8000d94 <GPIO_PeriClockControl+0x1a8>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d106      	bne.n	8000c14 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000c06:	4b64      	ldr	r3, [pc, #400]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a63      	ldr	r2, [pc, #396]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		}else if(pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}
}
 8000c12:	e0b9      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a61      	ldr	r2, [pc, #388]	; (8000d9c <GPIO_PeriClockControl+0x1b0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d106      	bne.n	8000c2a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000c1c:	4b5e      	ldr	r3, [pc, #376]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	4a5d      	ldr	r2, [pc, #372]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000c22:	f043 0302 	orr.w	r3, r3, #2
 8000c26:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c28:	e0ae      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC) {
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a5c      	ldr	r2, [pc, #368]	; (8000da0 <GPIO_PeriClockControl+0x1b4>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d106      	bne.n	8000c40 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000c32:	4b59      	ldr	r3, [pc, #356]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a58      	ldr	r2, [pc, #352]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c3e:	e0a3      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a58      	ldr	r2, [pc, #352]	; (8000da4 <GPIO_PeriClockControl+0x1b8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d106      	bne.n	8000c56 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000c48:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	4a52      	ldr	r2, [pc, #328]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000c4e:	f043 0308 	orr.w	r3, r3, #8
 8000c52:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c54:	e098      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE) {
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a53      	ldr	r2, [pc, #332]	; (8000da8 <GPIO_PeriClockControl+0x1bc>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d106      	bne.n	8000c6c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000c5e:	4b4e      	ldr	r3, [pc, #312]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a4d      	ldr	r2, [pc, #308]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000c64:	f043 0310 	orr.w	r3, r3, #16
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c6a:	e08d      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a4f      	ldr	r2, [pc, #316]	; (8000dac <GPIO_PeriClockControl+0x1c0>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d106      	bne.n	8000c82 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000c74:	4b48      	ldr	r3, [pc, #288]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	4a47      	ldr	r2, [pc, #284]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000c7a:	f043 0320 	orr.w	r3, r3, #32
 8000c7e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c80:	e082      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG) {
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a4a      	ldr	r2, [pc, #296]	; (8000db0 <GPIO_PeriClockControl+0x1c4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d106      	bne.n	8000c98 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000c8a:	4b43      	ldr	r3, [pc, #268]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a42      	ldr	r2, [pc, #264]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c96:	e077      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a46      	ldr	r2, [pc, #280]	; (8000db4 <GPIO_PeriClockControl+0x1c8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d106      	bne.n	8000cae <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000ca0:	4b3d      	ldr	r3, [pc, #244]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	4a3c      	ldr	r2, [pc, #240]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000caa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cac:	e06c      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI) {
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a41      	ldr	r2, [pc, #260]	; (8000db8 <GPIO_PeriClockControl+0x1cc>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d168      	bne.n	8000d88 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000cb6:	4b38      	ldr	r3, [pc, #224]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a37      	ldr	r2, [pc, #220]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cc2:	e061      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a33      	ldr	r2, [pc, #204]	; (8000d94 <GPIO_PeriClockControl+0x1a8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d106      	bne.n	8000cda <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000ccc:	4b32      	ldr	r3, [pc, #200]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	4a31      	ldr	r2, [pc, #196]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000cd2:	f023 0301 	bic.w	r3, r3, #1
 8000cd6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cd8:	e056      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB) {
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a2f      	ldr	r2, [pc, #188]	; (8000d9c <GPIO_PeriClockControl+0x1b0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d106      	bne.n	8000cf0 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a2c      	ldr	r2, [pc, #176]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000ce8:	f023 0302 	bic.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cee:	e04b      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a2b      	ldr	r2, [pc, #172]	; (8000da0 <GPIO_PeriClockControl+0x1b4>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d106      	bne.n	8000d06 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000cf8:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	4a26      	ldr	r2, [pc, #152]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000cfe:	f023 0304 	bic.w	r3, r3, #4
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d04:	e040      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD) {
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a26      	ldr	r2, [pc, #152]	; (8000da4 <GPIO_PeriClockControl+0x1b8>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d106      	bne.n	8000d1c <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a21      	ldr	r2, [pc, #132]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000d14:	f023 0308 	bic.w	r3, r3, #8
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d1a:	e035      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a22      	ldr	r2, [pc, #136]	; (8000da8 <GPIO_PeriClockControl+0x1bc>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d106      	bne.n	8000d32 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000d2a:	f023 0310 	bic.w	r3, r3, #16
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d30:	e02a      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF) {
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <GPIO_PeriClockControl+0x1c0>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d106      	bne.n	8000d48 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a16      	ldr	r2, [pc, #88]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000d40:	f023 0320 	bic.w	r3, r3, #32
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d46:	e01f      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <GPIO_PeriClockControl+0x1c4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d106      	bne.n	8000d5e <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d5a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d5c:	e014      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH) {
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <GPIO_PeriClockControl+0x1c8>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d106      	bne.n	8000d74 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d72:	e009      	b.n	8000d88 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <GPIO_PeriClockControl+0x1cc>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d105      	bne.n	8000d88 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <GPIO_PeriClockControl+0x1ac>)
 8000d82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020400 	.word	0x40020400
 8000da0:	40020800 	.word	0x40020800
 8000da4:	40020c00 	.word	0x40020c00
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40021400 	.word	0x40021400
 8000db0:	40021800 	.word	0x40021800
 8000db4:	40021c00 	.word	0x40021c00
 8000db8:	40022000 	.word	0x40022000

08000dbc <GPIO_Init>:
 * @return 			- none
 *
 * @Note			- none
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0; // temp register
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
	uint8_t tmp_PinNumber = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	791b      	ldrb	r3, [r3, #4]
 8000dcc:	74fb      	strb	r3, [r7, #19]
	uint8_t tmp_PinMode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	795b      	ldrb	r3, [r3, #5]
 8000dd2:	74bb      	strb	r3, [r7, #18]

	/* Enable the peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx,ENABLE);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff06 	bl	8000bec <GPIO_PeriClockControl>

	/* 1. Configure the mode of the gpio pin */
	if (tmp_PinMode <= GPIO_MODE_ANALOG){
 8000de0:	7cbb      	ldrb	r3, [r7, #18]
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d81c      	bhi.n	8000e20 <GPIO_Init+0x64>
		temp = (tmp_PinMode << (2 * tmp_PinNumber));
 8000de6:	7cba      	ldrb	r2, [r7, #18]
 8000de8:	7cfb      	ldrb	r3, [r7, #19]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * tmp_PinNumber));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	7cfb      	ldrb	r3, [r7, #19]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	4619      	mov	r1, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6819      	ldr	r1, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e0aa      	b.n	8000f76 <GPIO_Init+0x1ba>
	}else{
		// this is interrupt mode
		if (tmp_PinMode <= GPIO_MODE_IT_FT){
 8000e20:	7cbb      	ldrb	r3, [r7, #18]
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d815      	bhi.n	8000e52 <GPIO_Init+0x96>
			// 1. Configure the FTSR (Falling trigger selection register)
			EXTI->FTSR |= (1 << tmp_PinNumber);
 8000e26:	4b9e      	ldr	r3, [pc, #632]	; (80010a0 <GPIO_Init+0x2e4>)
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	7cfa      	ldrb	r2, [r7, #19]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e32:	4611      	mov	r1, r2
 8000e34:	4a9a      	ldr	r2, [pc, #616]	; (80010a0 <GPIO_Init+0x2e4>)
 8000e36:	430b      	orrs	r3, r1
 8000e38:	60d3      	str	r3, [r2, #12]
			// 1.1 To make sure Rising edge detection is not set, we cleared it.
			EXTI->RTSR &= ~(1 << tmp_PinNumber);
 8000e3a:	4b99      	ldr	r3, [pc, #612]	; (80010a0 <GPIO_Init+0x2e4>)
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	7cfa      	ldrb	r2, [r7, #19]
 8000e40:	2101      	movs	r1, #1
 8000e42:	fa01 f202 	lsl.w	r2, r1, r2
 8000e46:	43d2      	mvns	r2, r2
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4a95      	ldr	r2, [pc, #596]	; (80010a0 <GPIO_Init+0x2e4>)
 8000e4c:	400b      	ands	r3, r1
 8000e4e:	6093      	str	r3, [r2, #8]
 8000e50:	e02f      	b.n	8000eb2 <GPIO_Init+0xf6>

		}else if(tmp_PinMode <= GPIO_MODE_IT_RT){
 8000e52:	7cbb      	ldrb	r3, [r7, #18]
 8000e54:	2b05      	cmp	r3, #5
 8000e56:	d815      	bhi.n	8000e84 <GPIO_Init+0xc8>
			// 1. Configure the RTSR (Rising trigger selection register)
			EXTI->RTSR |= (1 << tmp_PinNumber);
 8000e58:	4b91      	ldr	r3, [pc, #580]	; (80010a0 <GPIO_Init+0x2e4>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	7cfa      	ldrb	r2, [r7, #19]
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fa01 f202 	lsl.w	r2, r1, r2
 8000e64:	4611      	mov	r1, r2
 8000e66:	4a8e      	ldr	r2, [pc, #568]	; (80010a0 <GPIO_Init+0x2e4>)
 8000e68:	430b      	orrs	r3, r1
 8000e6a:	6093      	str	r3, [r2, #8]
			// 1.1 To make sure Falling edge detection is not set, we cleared it.
			EXTI->FTSR &= ~(1 << tmp_PinNumber);
 8000e6c:	4b8c      	ldr	r3, [pc, #560]	; (80010a0 <GPIO_Init+0x2e4>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	7cfa      	ldrb	r2, [r7, #19]
 8000e72:	2101      	movs	r1, #1
 8000e74:	fa01 f202 	lsl.w	r2, r1, r2
 8000e78:	43d2      	mvns	r2, r2
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4a88      	ldr	r2, [pc, #544]	; (80010a0 <GPIO_Init+0x2e4>)
 8000e7e:	400b      	ands	r3, r1
 8000e80:	60d3      	str	r3, [r2, #12]
 8000e82:	e016      	b.n	8000eb2 <GPIO_Init+0xf6>

		}else if (tmp_PinMode <= GPIO_MODE_IT_RFT){
 8000e84:	7cbb      	ldrb	r3, [r7, #18]
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d813      	bhi.n	8000eb2 <GPIO_Init+0xf6>
			// 1. Configure both RSTR and FTSR
			EXTI->RTSR |= (1 << tmp_PinNumber);
 8000e8a:	4b85      	ldr	r3, [pc, #532]	; (80010a0 <GPIO_Init+0x2e4>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	7cfa      	ldrb	r2, [r7, #19]
 8000e90:	2101      	movs	r1, #1
 8000e92:	fa01 f202 	lsl.w	r2, r1, r2
 8000e96:	4611      	mov	r1, r2
 8000e98:	4a81      	ldr	r2, [pc, #516]	; (80010a0 <GPIO_Init+0x2e4>)
 8000e9a:	430b      	orrs	r3, r1
 8000e9c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << tmp_PinNumber);
 8000e9e:	4b80      	ldr	r3, [pc, #512]	; (80010a0 <GPIO_Init+0x2e4>)
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	7cfa      	ldrb	r2, [r7, #19]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4a7c      	ldr	r2, [pc, #496]	; (80010a0 <GPIO_Init+0x2e4>)
 8000eae:	430b      	orrs	r3, r1
 8000eb0:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = tmp_PinNumber / 4;
 8000eb2:	7cfb      	ldrb	r3, [r7, #19]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	747b      	strb	r3, [r7, #17]
		uint8_t temp2 = tmp_PinNumber % 4;
 8000eb8:	7cfb      	ldrb	r3, [r7, #19]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	743b      	strb	r3, [r7, #16]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a77      	ldr	r2, [pc, #476]	; (80010a4 <GPIO_Init+0x2e8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d032      	beq.n	8000f30 <GPIO_Init+0x174>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a76      	ldr	r2, [pc, #472]	; (80010a8 <GPIO_Init+0x2ec>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d02b      	beq.n	8000f2c <GPIO_Init+0x170>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a74      	ldr	r2, [pc, #464]	; (80010ac <GPIO_Init+0x2f0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d024      	beq.n	8000f28 <GPIO_Init+0x16c>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a73      	ldr	r2, [pc, #460]	; (80010b0 <GPIO_Init+0x2f4>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d01d      	beq.n	8000f24 <GPIO_Init+0x168>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a71      	ldr	r2, [pc, #452]	; (80010b4 <GPIO_Init+0x2f8>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d016      	beq.n	8000f20 <GPIO_Init+0x164>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a70      	ldr	r2, [pc, #448]	; (80010b8 <GPIO_Init+0x2fc>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d00f      	beq.n	8000f1c <GPIO_Init+0x160>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a6e      	ldr	r2, [pc, #440]	; (80010bc <GPIO_Init+0x300>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d008      	beq.n	8000f18 <GPIO_Init+0x15c>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a6d      	ldr	r2, [pc, #436]	; (80010c0 <GPIO_Init+0x304>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d101      	bne.n	8000f14 <GPIO_Init+0x158>
 8000f10:	2307      	movs	r3, #7
 8000f12:	e00e      	b.n	8000f32 <GPIO_Init+0x176>
 8000f14:	2300      	movs	r3, #0
 8000f16:	e00c      	b.n	8000f32 <GPIO_Init+0x176>
 8000f18:	2306      	movs	r3, #6
 8000f1a:	e00a      	b.n	8000f32 <GPIO_Init+0x176>
 8000f1c:	2305      	movs	r3, #5
 8000f1e:	e008      	b.n	8000f32 <GPIO_Init+0x176>
 8000f20:	2304      	movs	r3, #4
 8000f22:	e006      	b.n	8000f32 <GPIO_Init+0x176>
 8000f24:	2303      	movs	r3, #3
 8000f26:	e004      	b.n	8000f32 <GPIO_Init+0x176>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e002      	b.n	8000f32 <GPIO_Init+0x176>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <GPIO_Init+0x176>
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]

		SYSCFG_PCLK_EN();
 8000f34:	4b63      	ldr	r3, [pc, #396]	; (80010c4 <GPIO_Init+0x308>)
 8000f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f38:	4a62      	ldr	r2, [pc, #392]	; (80010c4 <GPIO_Init+0x308>)
 8000f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << (4 * temp2));
 8000f40:	4a61      	ldr	r2, [pc, #388]	; (80010c8 <GPIO_Init+0x30c>)
 8000f42:	7c7b      	ldrb	r3, [r7, #17]
 8000f44:	3302      	adds	r3, #2
 8000f46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f4a:	7bf9      	ldrb	r1, [r7, #15]
 8000f4c:	7c3b      	ldrb	r3, [r7, #16]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	495c      	ldr	r1, [pc, #368]	; (80010c8 <GPIO_Init+0x30c>)
 8000f58:	7c7b      	ldrb	r3, [r7, #17]
 8000f5a:	4302      	orrs	r2, r0
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << tmp_PinNumber);
 8000f62:	4b4f      	ldr	r3, [pc, #316]	; (80010a0 <GPIO_Init+0x2e4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	7cfa      	ldrb	r2, [r7, #19]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6e:	4611      	mov	r1, r2
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <GPIO_Init+0x2e4>)
 8000f72:	430b      	orrs	r3, r1
 8000f74:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]

	/* 2. Configure the speed */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * tmp_PinNumber));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	799b      	ldrb	r3, [r3, #6]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	7cfb      	ldrb	r3, [r7, #19]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * tmp_PinNumber));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	7cfb      	ldrb	r3, [r7, #19]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2103      	movs	r1, #3
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	400a      	ands	r2, r1
 8000fa4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6899      	ldr	r1, [r3, #8]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]

	/* 2. Configure the pupd settings */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * tmp_PinNumber));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	79db      	ldrb	r3, [r3, #7]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	7cfb      	ldrb	r3, [r7, #19]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * tmp_PinNumber));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	7cfb      	ldrb	r3, [r7, #19]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	4619      	mov	r1, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	400a      	ands	r2, r1
 8000fe4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68d9      	ldr	r1, [r3, #12]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]

	/* 2. Configure the optype */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << tmp_PinNumber);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7a1b      	ldrb	r3, [r3, #8]
 8000ffe:	461a      	mov	r2, r3
 8001000:	7cfb      	ldrb	r3, [r7, #19]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << (tmp_PinNumber));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	7cfb      	ldrb	r3, [r7, #19]
 8001010:	2103      	movs	r1, #3
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	4619      	mov	r1, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	400a      	ands	r2, r1
 8001020:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6859      	ldr	r1, [r3, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	430a      	orrs	r2, r1
 8001030:	605a      	str	r2, [r3, #4]

	/* 2. Configure the alt funcionality */
	if (tmp_PinMode == GPIO_MODE_ALTFN){
 8001032:	7cbb      	ldrb	r3, [r7, #18]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d12f      	bne.n	8001098 <GPIO_Init+0x2dc>
		uint8_t temp1 = tmp_PinNumber / 8;
 8001038:	7cfb      	ldrb	r3, [r7, #19]
 800103a:	08db      	lsrs	r3, r3, #3
 800103c:	73bb      	strb	r3, [r7, #14]
		uint8_t temp2 = tmp_PinNumber % 8;
 800103e:	7cfb      	ldrb	r3, [r7, #19]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	737b      	strb	r3, [r7, #13]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	7bba      	ldrb	r2, [r7, #14]
 800104c:	3208      	adds	r2, #8
 800104e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001052:	7b7b      	ldrb	r3, [r7, #13]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	7bba      	ldrb	r2, [r7, #14]
 8001066:	4001      	ands	r1, r0
 8001068:	3208      	adds	r2, #8
 800106a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	7bba      	ldrb	r2, [r7, #14]
 8001074:	3208      	adds	r2, #8
 8001076:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7a5b      	ldrb	r3, [r3, #9]
 800107e:	461a      	mov	r2, r3
 8001080:	7b7b      	ldrb	r3, [r7, #13]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	4618      	mov	r0, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	7bba      	ldrb	r2, [r7, #14]
 8001090:	4301      	orrs	r1, r0
 8001092:	3208      	adds	r2, #8
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8001098:	bf00      	nop
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40013c00 	.word	0x40013c00
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020c00 	.word	0x40020c00
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40021400 	.word	0x40021400
 80010bc:	40021800 	.word	0x40021800
 80010c0:	40021c00 	.word	0x40021c00
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40013800 	.word	0x40013800

080010cc <I2C_ExecuteAddressPhase>:
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t ReadWrite);
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);

static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t ReadWrite){
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	70fb      	strb	r3, [r7, #3]
 80010d8:	4613      	mov	r3, r2
 80010da:	70bb      	strb	r3, [r7, #2]

	SlaveAddr = SlaveAddr << 1; // We shift to the right to make space for the R/nW bit
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	70fb      	strb	r3, [r7, #3]

	if (ReadWrite == MASTER_WRITE){
 80010e2:	78bb      	ldrb	r3, [r7, #2]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d104      	bne.n	80010f2 <I2C_ExecuteAddressPhase+0x26>
		SlaveAddr &= ~(1); // Set r/nw bit to 0
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	f023 0301 	bic.w	r3, r3, #1
 80010ee:	70fb      	strb	r3, [r7, #3]
 80010f0:	e006      	b.n	8001100 <I2C_ExecuteAddressPhase+0x34>
	}else if (ReadWrite == MASTER_READ){
 80010f2:	78bb      	ldrb	r3, [r7, #2]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d103      	bne.n	8001100 <I2C_ExecuteAddressPhase+0x34>
		SlaveAddr |= (1); // // Set r/nw bit to 1
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	70fb      	strb	r3, [r7, #3]
	}

	pI2Cx->DR = SlaveAddr;
 8001100:	78fa      	ldrb	r2, [r7, #3]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	611a      	str	r2, [r3, #16]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

	uint32_t dummyRead;

	// Check for device mode
	if ( (pI2CHandle->pI2Cx->SR[1] >> I2C_SR2_MSL) & 1){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d021      	beq.n	800116a <I2C_ClearADDRFlag+0x5a>
		// Device is in Master mode
		if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7f1b      	ldrb	r3, [r3, #28]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d114      	bne.n	8001158 <I2C_ClearADDRFlag+0x48>
			if(pI2CHandle->RxSize == 1){
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d121      	bne.n	800117a <I2C_ClearADDRFlag+0x6a>
				// Disable the ACK
				I2C_ACK_ENDI(pI2CHandle->pI2Cx, DISABLE);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001144:	601a      	str	r2, [r3, #0]

				// Clear the ADDR flag
				dummyRead = pI2CHandle->pI2Cx->SR[0];
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR[1];
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR[1];
		(void)dummyRead;  // This is to avoid warnings because of unused variables

	}

}
 8001156:	e010      	b.n	800117a <I2C_ClearADDRFlag+0x6a>
			dummyRead = pI2CHandle->pI2Cx->SR[0];
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR[1];
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	60fb      	str	r3, [r7, #12]
}
 8001168:	e007      	b.n	800117a <I2C_ClearADDRFlag+0x6a>
		dummyRead = pI2CHandle->pI2Cx->SR[0];
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR[1];
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	60fb      	str	r3, [r7, #12]
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <I2C_SlaveEnableDisableCallbackEvents>:

void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d112      	bne.n	80011bc <I2C_SlaveEnableDisableCallbackEvents+0x38>
		pI2Cx->CR[1] |= (1 << I2C_CR2_ITEVTEN);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	605a      	str	r2, [r3, #4]
		pI2Cx->CR[1] |= (1 << I2C_CR2_ITBUFEN);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	605a      	str	r2, [r3, #4]
		pI2Cx->CR[1] |= (1 << I2C_CR2_ITERREN);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	605a      	str	r2, [r3, #4]
	}else {
		pI2Cx->CR[1] &= ~(1 << I2C_CR2_ITEVTEN);
		pI2Cx->CR[1] &= ~(1 << I2C_CR2_ITBUFEN);
		pI2Cx->CR[1] &= ~(1 << I2C_CR2_ITERREN);
	}
}
 80011ba:	e011      	b.n	80011e0 <I2C_SlaveEnableDisableCallbackEvents+0x5c>
		pI2Cx->CR[1] &= ~(1 << I2C_CR2_ITEVTEN);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	605a      	str	r2, [r3, #4]
		pI2Cx->CR[1] &= ~(1 << I2C_CR2_ITBUFEN);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	605a      	str	r2, [r3, #4]
		pI2Cx->CR[1] &= ~(1 << I2C_CR2_ITERREN);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	605a      	str	r2, [r3, #4]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
	...

080011ec <I2C_PeriClockControl>:
 * @return 			- none
 *
 * @Note			- none
 */

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d120      	bne.n	8001240 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1) {
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a22      	ldr	r2, [pc, #136]	; (800128c <I2C_PeriClockControl+0xa0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d106      	bne.n	8001214 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <I2C_PeriClockControl+0xa4>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a21      	ldr	r2, [pc, #132]	; (8001290 <I2C_PeriClockControl+0xa4>)
 800120c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		}else if(pI2Cx == I2C3) {
			I2C3_PCLK_DI();
		}
	}
}
 8001212:	e035      	b.n	8001280 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <I2C_PeriClockControl+0xa8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d106      	bne.n	800122a <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 800121c:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <I2C_PeriClockControl+0xa4>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <I2C_PeriClockControl+0xa4>)
 8001222:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001226:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001228:	e02a      	b.n	8001280 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3) {
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a1a      	ldr	r2, [pc, #104]	; (8001298 <I2C_PeriClockControl+0xac>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d126      	bne.n	8001280 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <I2C_PeriClockControl+0xa4>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a16      	ldr	r2, [pc, #88]	; (8001290 <I2C_PeriClockControl+0xa4>)
 8001238:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800123e:	e01f      	b.n	8001280 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <I2C_PeriClockControl+0xa0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d106      	bne.n	8001256 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <I2C_PeriClockControl+0xa4>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	4a10      	ldr	r2, [pc, #64]	; (8001290 <I2C_PeriClockControl+0xa4>)
 800124e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001252:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001254:	e014      	b.n	8001280 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2) {
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <I2C_PeriClockControl+0xa8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d106      	bne.n	800126c <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <I2C_PeriClockControl+0xa4>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <I2C_PeriClockControl+0xa4>)
 8001264:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
}
 800126a:	e009      	b.n	8001280 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <I2C_PeriClockControl+0xac>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d105      	bne.n	8001280 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <I2C_PeriClockControl+0xa4>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	4a05      	ldr	r2, [pc, #20]	; (8001290 <I2C_PeriClockControl+0xa4>)
 800127a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800127e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40005400 	.word	0x40005400
 8001290:	40023800 	.word	0x40023800
 8001294:	40005800 	.word	0x40005800
 8001298:	4000c400 	.word	0x4000c400

0800129c <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void){
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
	uint32_t pclk1;
	uint8_t clkValue = 0, ahbPres = 0, apb1Pres = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	70fb      	strb	r3, [r7, #3]
 80012a6:	2300      	movs	r3, #0
 80012a8:	70bb      	strb	r3, [r7, #2]
 80012aa:	2300      	movs	r3, #0
 80012ac:	707b      	strb	r3, [r7, #1]

	clkValue = (RCC->CFGR >> 2) & 0x3;
 80012ae:	4b61      	ldr	r3, [pc, #388]	; (8001434 <RCC_GetPCLK1Value+0x198>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	70fb      	strb	r3, [r7, #3]
	ahbPres = (RCC->CFGR >> 4) & 0xf;
 80012bc:	4b5d      	ldr	r3, [pc, #372]	; (8001434 <RCC_GetPCLK1Value+0x198>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f003 030f 	and.w	r3, r3, #15
 80012c8:	70bb      	strb	r3, [r7, #2]
	apb1Pres = (RCC->CFGR >> 10) & 0x7;
 80012ca:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <RCC_GetPCLK1Value+0x198>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	0a9b      	lsrs	r3, r3, #10
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	707b      	strb	r3, [r7, #1]

	if (clkValue == 0){
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d150      	bne.n	8001380 <RCC_GetPCLK1Value+0xe4>
		pclk1 = (16000000 / AHB_PRESCALER(ahbPres)) / APB1_PRESCALER(apb1Pres);
 80012de:	78bb      	ldrb	r3, [r7, #2]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d02b      	beq.n	800133c <RCC_GetPCLK1Value+0xa0>
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d026      	beq.n	8001338 <RCC_GetPCLK1Value+0x9c>
 80012ea:	78bb      	ldrb	r3, [r7, #2]
 80012ec:	2b09      	cmp	r3, #9
 80012ee:	d021      	beq.n	8001334 <RCC_GetPCLK1Value+0x98>
 80012f0:	78bb      	ldrb	r3, [r7, #2]
 80012f2:	2b0a      	cmp	r3, #10
 80012f4:	d01c      	beq.n	8001330 <RCC_GetPCLK1Value+0x94>
 80012f6:	78bb      	ldrb	r3, [r7, #2]
 80012f8:	2b0b      	cmp	r3, #11
 80012fa:	d017      	beq.n	800132c <RCC_GetPCLK1Value+0x90>
 80012fc:	78bb      	ldrb	r3, [r7, #2]
 80012fe:	2b0c      	cmp	r3, #12
 8001300:	d012      	beq.n	8001328 <RCC_GetPCLK1Value+0x8c>
 8001302:	78bb      	ldrb	r3, [r7, #2]
 8001304:	2b0d      	cmp	r3, #13
 8001306:	d00d      	beq.n	8001324 <RCC_GetPCLK1Value+0x88>
 8001308:	78bb      	ldrb	r3, [r7, #2]
 800130a:	2b0e      	cmp	r3, #14
 800130c:	d007      	beq.n	800131e <RCC_GetPCLK1Value+0x82>
 800130e:	78bb      	ldrb	r3, [r7, #2]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d102      	bne.n	800131a <RCC_GetPCLK1Value+0x7e>
 8001314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001318:	e011      	b.n	800133e <RCC_GetPCLK1Value+0xa2>
 800131a:	2300      	movs	r3, #0
 800131c:	e00f      	b.n	800133e <RCC_GetPCLK1Value+0xa2>
 800131e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001322:	e00c      	b.n	800133e <RCC_GetPCLK1Value+0xa2>
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	e00a      	b.n	800133e <RCC_GetPCLK1Value+0xa2>
 8001328:	2340      	movs	r3, #64	; 0x40
 800132a:	e008      	b.n	800133e <RCC_GetPCLK1Value+0xa2>
 800132c:	2310      	movs	r3, #16
 800132e:	e006      	b.n	800133e <RCC_GetPCLK1Value+0xa2>
 8001330:	2308      	movs	r3, #8
 8001332:	e004      	b.n	800133e <RCC_GetPCLK1Value+0xa2>
 8001334:	2304      	movs	r3, #4
 8001336:	e002      	b.n	800133e <RCC_GetPCLK1Value+0xa2>
 8001338:	2302      	movs	r3, #2
 800133a:	e000      	b.n	800133e <RCC_GetPCLK1Value+0xa2>
 800133c:	2301      	movs	r3, #1
 800133e:	4a3e      	ldr	r2, [pc, #248]	; (8001438 <RCC_GetPCLK1Value+0x19c>)
 8001340:	fb92 f2f3 	sdiv	r2, r2, r3
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d015      	beq.n	8001376 <RCC_GetPCLK1Value+0xda>
 800134a:	787b      	ldrb	r3, [r7, #1]
 800134c:	2b04      	cmp	r3, #4
 800134e:	d010      	beq.n	8001372 <RCC_GetPCLK1Value+0xd6>
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b05      	cmp	r3, #5
 8001354:	d00b      	beq.n	800136e <RCC_GetPCLK1Value+0xd2>
 8001356:	787b      	ldrb	r3, [r7, #1]
 8001358:	2b06      	cmp	r3, #6
 800135a:	d006      	beq.n	800136a <RCC_GetPCLK1Value+0xce>
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b07      	cmp	r3, #7
 8001360:	d101      	bne.n	8001366 <RCC_GetPCLK1Value+0xca>
 8001362:	2310      	movs	r3, #16
 8001364:	e008      	b.n	8001378 <RCC_GetPCLK1Value+0xdc>
 8001366:	2300      	movs	r3, #0
 8001368:	e006      	b.n	8001378 <RCC_GetPCLK1Value+0xdc>
 800136a:	2308      	movs	r3, #8
 800136c:	e004      	b.n	8001378 <RCC_GetPCLK1Value+0xdc>
 800136e:	2304      	movs	r3, #4
 8001370:	e002      	b.n	8001378 <RCC_GetPCLK1Value+0xdc>
 8001372:	2302      	movs	r3, #2
 8001374:	e000      	b.n	8001378 <RCC_GetPCLK1Value+0xdc>
 8001376:	2301      	movs	r3, #1
 8001378:	fb92 f3f3 	sdiv	r3, r2, r3
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	e052      	b.n	8001426 <RCC_GetPCLK1Value+0x18a>
	}else if (clkValue == 1){
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d14f      	bne.n	8001426 <RCC_GetPCLK1Value+0x18a>
		pclk1 = (8000000 / AHB_PRESCALER(ahbPres)) / APB1_PRESCALER(apb1Pres);
 8001386:	78bb      	ldrb	r3, [r7, #2]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d02b      	beq.n	80013e4 <RCC_GetPCLK1Value+0x148>
 800138c:	78bb      	ldrb	r3, [r7, #2]
 800138e:	2b08      	cmp	r3, #8
 8001390:	d026      	beq.n	80013e0 <RCC_GetPCLK1Value+0x144>
 8001392:	78bb      	ldrb	r3, [r7, #2]
 8001394:	2b09      	cmp	r3, #9
 8001396:	d021      	beq.n	80013dc <RCC_GetPCLK1Value+0x140>
 8001398:	78bb      	ldrb	r3, [r7, #2]
 800139a:	2b0a      	cmp	r3, #10
 800139c:	d01c      	beq.n	80013d8 <RCC_GetPCLK1Value+0x13c>
 800139e:	78bb      	ldrb	r3, [r7, #2]
 80013a0:	2b0b      	cmp	r3, #11
 80013a2:	d017      	beq.n	80013d4 <RCC_GetPCLK1Value+0x138>
 80013a4:	78bb      	ldrb	r3, [r7, #2]
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	d012      	beq.n	80013d0 <RCC_GetPCLK1Value+0x134>
 80013aa:	78bb      	ldrb	r3, [r7, #2]
 80013ac:	2b0d      	cmp	r3, #13
 80013ae:	d00d      	beq.n	80013cc <RCC_GetPCLK1Value+0x130>
 80013b0:	78bb      	ldrb	r3, [r7, #2]
 80013b2:	2b0e      	cmp	r3, #14
 80013b4:	d007      	beq.n	80013c6 <RCC_GetPCLK1Value+0x12a>
 80013b6:	78bb      	ldrb	r3, [r7, #2]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d102      	bne.n	80013c2 <RCC_GetPCLK1Value+0x126>
 80013bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c0:	e011      	b.n	80013e6 <RCC_GetPCLK1Value+0x14a>
 80013c2:	2300      	movs	r3, #0
 80013c4:	e00f      	b.n	80013e6 <RCC_GetPCLK1Value+0x14a>
 80013c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ca:	e00c      	b.n	80013e6 <RCC_GetPCLK1Value+0x14a>
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	e00a      	b.n	80013e6 <RCC_GetPCLK1Value+0x14a>
 80013d0:	2340      	movs	r3, #64	; 0x40
 80013d2:	e008      	b.n	80013e6 <RCC_GetPCLK1Value+0x14a>
 80013d4:	2310      	movs	r3, #16
 80013d6:	e006      	b.n	80013e6 <RCC_GetPCLK1Value+0x14a>
 80013d8:	2308      	movs	r3, #8
 80013da:	e004      	b.n	80013e6 <RCC_GetPCLK1Value+0x14a>
 80013dc:	2304      	movs	r3, #4
 80013de:	e002      	b.n	80013e6 <RCC_GetPCLK1Value+0x14a>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e000      	b.n	80013e6 <RCC_GetPCLK1Value+0x14a>
 80013e4:	2301      	movs	r3, #1
 80013e6:	4a15      	ldr	r2, [pc, #84]	; (800143c <RCC_GetPCLK1Value+0x1a0>)
 80013e8:	fb92 f2f3 	sdiv	r2, r2, r3
 80013ec:	787b      	ldrb	r3, [r7, #1]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d015      	beq.n	800141e <RCC_GetPCLK1Value+0x182>
 80013f2:	787b      	ldrb	r3, [r7, #1]
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d010      	beq.n	800141a <RCC_GetPCLK1Value+0x17e>
 80013f8:	787b      	ldrb	r3, [r7, #1]
 80013fa:	2b05      	cmp	r3, #5
 80013fc:	d00b      	beq.n	8001416 <RCC_GetPCLK1Value+0x17a>
 80013fe:	787b      	ldrb	r3, [r7, #1]
 8001400:	2b06      	cmp	r3, #6
 8001402:	d006      	beq.n	8001412 <RCC_GetPCLK1Value+0x176>
 8001404:	787b      	ldrb	r3, [r7, #1]
 8001406:	2b07      	cmp	r3, #7
 8001408:	d101      	bne.n	800140e <RCC_GetPCLK1Value+0x172>
 800140a:	2310      	movs	r3, #16
 800140c:	e008      	b.n	8001420 <RCC_GetPCLK1Value+0x184>
 800140e:	2300      	movs	r3, #0
 8001410:	e006      	b.n	8001420 <RCC_GetPCLK1Value+0x184>
 8001412:	2308      	movs	r3, #8
 8001414:	e004      	b.n	8001420 <RCC_GetPCLK1Value+0x184>
 8001416:	2304      	movs	r3, #4
 8001418:	e002      	b.n	8001420 <RCC_GetPCLK1Value+0x184>
 800141a:	2302      	movs	r3, #2
 800141c:	e000      	b.n	8001420 <RCC_GetPCLK1Value+0x184>
 800141e:	2301      	movs	r3, #1
 8001420:	fb92 f3f3 	sdiv	r3, r2, r3
 8001424:	607b      	str	r3, [r7, #4]
	}else if (clkValue == 2){
		// PLL function not implemented
	}

	return pclk1;
 8001426:	687b      	ldr	r3, [r7, #4]
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	00f42400 	.word	0x00f42400
 800143c:	007a1200 	.word	0x007a1200

08001440 <I2C_Init>:
 * @return 			- none
 *
 * @Note			- none
 */

void I2C_Init(I2C_Handle_t *pI2CHandle){
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

	// Enable the clock for I2C peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2101      	movs	r1, #1
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fecc 	bl	80011ec <I2C_PeriClockControl>

	// Configure the ACK control
	pI2CHandle->pI2Cx->CR[0] |= (pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7a5b      	ldrb	r3, [r3, #9]
 800145e:	029b      	lsls	r3, r3, #10
 8001460:	4619      	mov	r1, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	601a      	str	r2, [r3, #0]

	// Configure the frequency of the used clock
	uint32_t freq = RCC_GetPCLK1Value() / 1000000U;
 800146a:	f7ff ff17 	bl	800129c <RCC_GetPCLK1Value>
 800146e:	4603      	mov	r3, r0
 8001470:	4a51      	ldr	r2, [pc, #324]	; (80015b8 <I2C_Init+0x178>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	0c9b      	lsrs	r3, r3, #18
 8001478:	61bb      	str	r3, [r7, #24]
	pI2CHandle->pI2Cx->CR[1] |= ( freq << I2C_CR2_FREQ);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6859      	ldr	r1, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]

	// Program the device own address
	pI2CHandle->pI2Cx->OAR[0] |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << I2C_OAR_ADD);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7a1b      	ldrb	r3, [r3, #8]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4619      	mov	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	609a      	str	r2, [r3, #8]
	// RM indicate to keep this bit at 1
	pI2CHandle->pI2Cx->OAR[0] |= (1 << 14);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014ae:	609a      	str	r2, [r3, #8]

	// CCR calculation
	uint16_t ccrValue = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	83fb      	strh	r3, [r7, #30]
	uint32_t fpclk = RCC_GetPCLK1Value();
 80014b4:	f7ff fef2 	bl	800129c <RCC_GetPCLK1Value>
 80014b8:	6178      	str	r0, [r7, #20]
	uint32_t fscl = pI2CHandle->I2C_Config.I2C_SCLSpeed;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	613b      	str	r3, [r7, #16]
	uint8_t dutyCycle = pI2CHandle->I2C_Config.I2C_FMDutyCycle;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7a9b      	ldrb	r3, [r3, #10]
 80014c4:	73fb      	strb	r3, [r7, #15]

	if (fscl <= I2C_SCL_SPEED_SM){
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4a3c      	ldr	r2, [pc, #240]	; (80015bc <I2C_Init+0x17c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d806      	bhi.n	80014dc <I2C_Init+0x9c>
		ccrValue = (uint16_t) (fpclk / (2 * fscl));
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d8:	83fb      	strh	r3, [r7, #30]
 80014da:	e02a      	b.n	8001532 <I2C_Init+0xf2>
	}else {
		pI2CHandle->pI2Cx->CCR |= (1 << I2C_CCR_FS);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	69da      	ldr	r2, [r3, #28]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ea:	61da      	str	r2, [r3, #28]
		pI2CHandle->pI2Cx->CCR |= (dutyCycle << I2C_CCR_DUTY);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	69da      	ldr	r2, [r3, #28]
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	039b      	lsls	r3, r3, #14
 80014f6:	4619      	mov	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	61da      	str	r2, [r3, #28]
		if (dutyCycle == I2C_FM_DUTY_2){
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d108      	bne.n	8001518 <I2C_Init+0xd8>
			ccrValue = fpclk / (3 * fscl);
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	fbb2 f3f3 	udiv	r3, r2, r3
 8001514:	83fb      	strh	r3, [r7, #30]
 8001516:	e00c      	b.n	8001532 <I2C_Init+0xf2>
		}else if (dutyCycle == I2C_FM_DUTY_16_9){
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d109      	bne.n	8001532 <I2C_Init+0xf2>
			ccrValue = fpclk / (25 * fscl);
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	009a      	lsls	r2, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001530:	83fb      	strh	r3, [r7, #30]
		}
	}
	pI2CHandle->pI2Cx->CCR |= (ccrValue << I2C_CCR);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	69d9      	ldr	r1, [r3, #28]
 8001538:	8bfa      	ldrh	r2, [r7, #30]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	61da      	str	r2, [r3, #28]

	// Trise calculation
	uint8_t trise = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	777b      	strb	r3, [r7, #29]
	if (fscl <= I2C_SCL_SPEED_SM){
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <I2C_Init+0x17c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d804      	bhi.n	8001558 <I2C_Init+0x118>
		//trise = (uint8_t) ((1 / (1/freq)) + 1);
		trise = (uint8_t) (freq + 1);
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	3301      	adds	r3, #1
 8001554:	777b      	strb	r3, [r7, #29]
 8001556:	e01e      	b.n	8001596 <I2C_Init+0x156>
	}else {
		trise = (0.3 / (1/freq)) + 1;
 8001558:	2201      	movs	r2, #1
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ff8b 	bl	800047c <__aeabi_ui2d>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	a111      	add	r1, pc, #68	; (adr r1, 80015b0 <I2C_Init+0x170>)
 800156c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001570:	f7ff f928 	bl	80007c4 <__aeabi_ddiv>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <I2C_Init+0x180>)
 8001582:	f7fe fe3f 	bl	8000204 <__adddf3>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fa01 	bl	8000994 <__aeabi_d2uiz>
 8001592:	4603      	mov	r3, r0
 8001594:	777b      	strb	r3, [r7, #29]
	}
	pI2CHandle->pI2Cx->TRISE = (trise & 0x3F);
 8001596:	7f7a      	ldrb	r2, [r7, #29]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80015a0:	621a      	str	r2, [r3, #32]



}
 80015a2:	bf00      	nop
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	f3af 8000 	nop.w
 80015b0:	33333333 	.word	0x33333333
 80015b4:	3fd33333 	.word	0x3fd33333
 80015b8:	431bde83 	.word	0x431bde83
 80015bc:	000186a0 	.word	0x000186a0
 80015c0:	3ff00000 	.word	0x3ff00000

080015c4 <I2C_MasterHandleTXEInterrupt>:

	return busyState;

}

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle){
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxLen > 0){
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00f      	beq.n	80015f4 <I2C_MasterHandleTXEInterrupt+0x30>
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	611a      	str	r2, [r3, #16]
		pI2CHandle->TxLen--;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	1e5a      	subs	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	615a      	str	r2, [r3, #20]
		pI2CHandle->pTxBuffer++;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	60da      	str	r2, [r3, #12]
	}
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <I2C_MasterHandleRXNEInterrupt>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle){
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->RxSize == 1){
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d10b      	bne.n	8001626 <I2C_MasterHandleRXNEInterrupt+0x28>
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	1e5a      	subs	r2, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxSize > 1){
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d91c      	bls.n	8001668 <I2C_MasterHandleRXNEInterrupt+0x6a>
		if (pI2CHandle->RxLen == 2){
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d107      	bne.n	8001646 <I2C_MasterHandleRXNEInterrupt+0x48>
			I2C_ACK_ENDI(pI2CHandle->pI2Cx, DISABLE);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001644:	601a      	str	r2, [r3, #0]
		}
		// Read DR
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	1e5a      	subs	r2, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	619a      	str	r2, [r3, #24]
		pI2CHandle->pRxBuffer++;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	611a      	str	r2, [r3, #16]
	}

	if (pI2CHandle->RxLen == 0){
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10e      	bne.n	800168e <I2C_MasterHandleRXNEInterrupt+0x90>
		// Close the I2C data reception and notify the application
		I2C_CloseReceiveData(pI2CHandle);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f920 	bl	80018b6 <I2C_CloseReceiveData>

		// 1. Generate STOP condition
		I2C_STOP_CONDITION(pI2CHandle->pI2Cx);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001684:	601a      	str	r2, [r3, #0]

		// 2. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 8001686:	2101      	movs	r1, #1
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff fa23 	bl	8000ad4 <I2C_ApplicationEventCallback>
	}
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <I2C_SlaveSendData>:
*
* @Note			-
*
*/

void I2C_SlaveSendData(I2C_RegDef_t *pI2C,uint8_t data){
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	460b      	mov	r3, r1
 80016a0:	70fb      	strb	r3, [r7, #3]

	pI2C->DR = data;
 80016a2:	78fa      	ldrb	r2, [r7, #3]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	611a      	str	r2, [r3, #16]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <I2C_SlaveReceiveData>:
*
* @Note			-
*
*/

uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C){
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
	return (uint8_t) pI2C->DR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	b2db      	uxtb	r3, r3
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <I2C_EV_IRQHandling>:
*
* @Note			-
*
*/

void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle){
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]

	// We have to decode which flag event has occurred

	uint32_t temp1, temp2, temp3;

	temp1 = (pI2CHandle->pI2Cx->CR[1] >> I2C_CR2_ITEVTEN) & 0x1;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	0a5b      	lsrs	r3, r3, #9
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	617b      	str	r3, [r7, #20]
	temp2 = (pI2CHandle->pI2Cx->CR[1] >> I2C_CR2_ITBUFEN) & 0x1;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	0a9b      	lsrs	r3, r3, #10
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	613b      	str	r3, [r7, #16]


	temp3 = (pI2CHandle->pI2Cx->SR[0] >> I2C_SR1_SB) & 0x1;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
	// 1. Handle for interrupt generated by SB event
	// 	Note: SB flag only applicable in master mode
	if (temp1 && temp3){
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01b      	beq.n	8001738 <I2C_EV_IRQHandling+0x6e>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d018      	beq.n	8001738 <I2C_EV_IRQHandling+0x6e>
		if (pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7f1b      	ldrb	r3, [r3, #28]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d108      	bne.n	8001720 <I2C_EV_IRQHandling+0x56>
			I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr, MASTER_WRITE);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7f5b      	ldrb	r3, [r3, #29]
 8001716:	2200      	movs	r2, #0
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff fcd7 	bl	80010cc <I2C_ExecuteAddressPhase>
 800171e:	e00b      	b.n	8001738 <I2C_EV_IRQHandling+0x6e>
		}else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7f1b      	ldrb	r3, [r3, #28]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d107      	bne.n	8001738 <I2C_EV_IRQHandling+0x6e>
			I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr, MASTER_READ);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7f5b      	ldrb	r3, [r3, #29]
 8001730:	2201      	movs	r2, #1
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff fcca 	bl	80010cc <I2C_ExecuteAddressPhase>
		}
	}

	temp3 = (pI2CHandle->pI2Cx->SR[0] >> I2C_SR1_ADDR) & 0x1;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	085b      	lsrs	r3, r3, #1
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
	// 2. Handle for interrupt generated by ADDR event
	// 	Note: When master mode : Address is sent
	//	      When Slave mode: Address matched with own address
	if (temp1 && temp3){
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <I2C_EV_IRQHandling+0x8e>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <I2C_EV_IRQHandling+0x8e>
		I2C_ClearADDRFlag(pI2CHandle);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fcdc 	bl	8001110 <I2C_ClearADDRFlag>
	}

	temp3 = (pI2CHandle->pI2Cx->SR[0] >> I2C_SR1_BTF) & 0x1;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
	// 3. Handle for interrupt generated by BTF event
	if (temp1 && temp3){
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d033      	beq.n	80017d4 <I2C_EV_IRQHandling+0x10a>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d030      	beq.n	80017d4 <I2C_EV_IRQHandling+0x10a>
		if (pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7f1b      	ldrb	r3, [r3, #28]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d120      	bne.n	80017bc <I2C_EV_IRQHandling+0xf2>
			if ( (pI2CHandle->pI2Cx->SR[0] >> I2C_SR1_TxE) & 0x1){
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	09db      	lsrs	r3, r3, #7
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d024      	beq.n	80017d4 <I2C_EV_IRQHandling+0x10a>
				if(pI2CHandle->TxLen == 0){
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d120      	bne.n	80017d4 <I2C_EV_IRQHandling+0x10a>
					// BTF and TxE = 1
					// 1. Generate STOP condition
					if (pI2CHandle->Sr == I2C_DISABLE_SR){
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001798:	2b00      	cmp	r3, #0
 800179a:	d107      	bne.n	80017ac <I2C_EV_IRQHandling+0xe2>
						I2C_STOP_CONDITION(pI2CHandle->pI2Cx);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017aa:	601a      	str	r2, [r3, #0]
					}

					// 2. Reset all the member elements of the handle structure
					I2C_CloseSendData(pI2CHandle);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f8b3 	bl	8001918 <I2C_CloseSendData>

					// 3. Notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 80017b2:	2100      	movs	r1, #0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff f98d 	bl	8000ad4 <I2C_ApplicationEventCallback>
 80017ba:	e00b      	b.n	80017d4 <I2C_EV_IRQHandling+0x10a>
				}

			}
		}else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7f1b      	ldrb	r3, [r3, #28]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d107      	bne.n	80017d4 <I2C_EV_IRQHandling+0x10a>
			I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr, MASTER_READ);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7f5b      	ldrb	r3, [r3, #29]
 80017cc:	2201      	movs	r2, #1
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff fc7c 	bl	80010cc <I2C_ExecuteAddressPhase>
		}
	}

	temp3 = (pI2CHandle->pI2Cx->SR[0] >> I2C_SR1_STOPF) & 0x1;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	091b      	lsrs	r3, r3, #4
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	60fb      	str	r3, [r7, #12]
	// 4. Handle for interrupt generated by STOPF event
	// 	Note: Stop detection flag is applicable only slave mode: For master this flag
	if (temp1 && temp3){
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00c      	beq.n	8001802 <I2C_EV_IRQHandling+0x138>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <I2C_EV_IRQHandling+0x138>
		// Clear the STOPF. As per RM we have to read SR1 and write to CR1
		// We read SR1 with temp3 so we have to write to CR1 now
		pI2CHandle->pI2Cx->CR[0] |= 0x0000;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	601a      	str	r2, [r3, #0]

		// Notify the application that STOP is generated by master
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 80017fa:	2102      	movs	r1, #2
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff f969 	bl	8000ad4 <I2C_ApplicationEventCallback>
	}

	temp3 = (pI2CHandle->pI2Cx->SR[0] >> I2C_SR1_TxE) & 0x1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	09db      	lsrs	r3, r3, #7
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
	// 5. Handle for interrupt generated by TXE event
	if (temp1 && temp3 && temp2){
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d020      	beq.n	8001858 <I2C_EV_IRQHandling+0x18e>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d01d      	beq.n	8001858 <I2C_EV_IRQHandling+0x18e>
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d01a      	beq.n	8001858 <I2C_EV_IRQHandling+0x18e>
		// Check for device mode
		if ( (pI2CHandle->pI2Cx->SR[1] >> I2C_SR2_MSL) & 0x1){
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d007      	beq.n	8001840 <I2C_EV_IRQHandling+0x176>
			if (pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7f1b      	ldrb	r3, [r3, #28]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d10f      	bne.n	8001858 <I2C_EV_IRQHandling+0x18e>
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff fec3 	bl	80015c4 <I2C_MasterHandleTXEInterrupt>
 800183e:	e00b      	b.n	8001858 <I2C_EV_IRQHandling+0x18e>
			}
		}else {
			// Slave mode
			// Make sure the slave is in transmitter mode
			if( (pI2CHandle->pI2Cx->SR[1] >> I2C_SR2_TRA) & 0x1 ){
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <I2C_EV_IRQHandling+0x18e>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 8001850:	2108      	movs	r1, #8
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff f93e 	bl	8000ad4 <I2C_ApplicationEventCallback>
			}
		}
	}

	temp3 = (pI2CHandle->pI2Cx->SR[0] >> I2C_SR1_RxNE) & 0x1;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	099b      	lsrs	r3, r3, #6
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
	// 6. Handle for interrupt generated by RXNE event
	if (temp1 && temp3 && temp2){
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <I2C_EV_IRQHandling+0x1e4>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d01d      	beq.n	80018ae <I2C_EV_IRQHandling+0x1e4>
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d01a      	beq.n	80018ae <I2C_EV_IRQHandling+0x1e4>
		// Device Mode
		if ( (pI2CHandle->pI2Cx->SR[1] >> I2C_SR2_MSL) & 0x1){
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <I2C_EV_IRQHandling+0x1cc>
			// Master
			// RxNE flag is set
			if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7f1b      	ldrb	r3, [r3, #28]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d10f      	bne.n	80018ae <I2C_EV_IRQHandling+0x1e4>
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff feb5 	bl	80015fe <I2C_MasterHandleRXNEInterrupt>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
			}
		}
	}

}
 8001894:	e00b      	b.n	80018ae <I2C_EV_IRQHandling+0x1e4>
			if( (pI2CHandle->pI2Cx->SR[1] >> I2C_SR2_TRA) & 0x1 ){
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <I2C_EV_IRQHandling+0x1e4>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 80018a6:	2109      	movs	r1, #9
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff f913 	bl	8000ad4 <I2C_ApplicationEventCallback>
}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <I2C_CloseReceiveData>:
 *
 * @Note			-
 *
 */

void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle){
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
	// Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR[1] &= ~( 1 << I2C_CR2_ITBUFEN);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018cc:	605a      	str	r2, [r3, #4]

	// Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR[1] &= ~( 1 << I2C_CR2_ITEVTEN);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018dc:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	621a      	str	r2, [r3, #32]

	if (pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	7a5b      	ldrb	r3, [r3, #9]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d107      	bne.n	800190e <I2C_CloseReceiveData+0x58>
		I2C_ACK_ENDI(pI2CHandle->pI2Cx, ENABLE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800190c:	601a      	str	r2, [r3, #0]
	}
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <I2C_CloseSendData>:
 *
 * @Note			-
 *
 */

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle){
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	// Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR[1] &= ~( 1 << I2C_CR2_ITBUFEN);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800192e:	605a      	str	r2, [r3, #4]

	// Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR[1] &= ~( 1 << I2C_CR2_ITEVTEN);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800193e:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	60da      	str	r2, [r3, #12]

}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <I2C_ER_IRQHandling>:
 *
 * @Note			-
 *
 */

void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle){
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
	uint32_t temp1,temp2;

	// Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR[1] >> I2C_CR2_ITERREN) & 1;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR[0] >> I2C_SR1_BERR) & 1;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 ){
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00e      	beq.n	800199e <I2C_ER_IRQHandling+0x48>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <I2C_ER_IRQHandling+0x48>
		// This is Bus error

		// Clear the bus error flag
		pI2CHandle->pI2Cx->SR[0] &= ~( 1 << I2C_SR1_BERR);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001994:	615a      	str	r2, [r3, #20]

		// Notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_BERR);
 8001996:	2103      	movs	r1, #3
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff f89b 	bl	8000ad4 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR[0] >> I2C_SR1_ARLO) & 1;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	0a5b      	lsrs	r3, r3, #9
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00e      	beq.n	80019d0 <I2C_ER_IRQHandling+0x7a>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00b      	beq.n	80019d0 <I2C_ER_IRQHandling+0x7a>
	{
		// This is arbitration lost error

		// Clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR[0] &= ~( 1 << I2C_SR1_ARLO);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019c6:	615a      	str	r2, [r3, #20]

		// Notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_ARLO);
 80019c8:	2104      	movs	r1, #4
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff f882 	bl	8000ad4 <I2C_ApplicationEventCallback>

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR[0] >> I2C_SR1_AF) & 1;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	0a9b      	lsrs	r3, r3, #10
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00e      	beq.n	8001a02 <I2C_ER_IRQHandling+0xac>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00b      	beq.n	8001a02 <I2C_ER_IRQHandling+0xac>
	{
		// This is ACK failure error

		// Clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR[0] &= ~( 1 << I2C_SR1_AF);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019f8:	615a      	str	r2, [r3, #20]

		// Notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_AF);
 80019fa:	2105      	movs	r1, #5
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff f869 	bl	8000ad4 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR[0] >> I2C_SR1_OVR) & 1;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	0adb      	lsrs	r3, r3, #11
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00e      	beq.n	8001a34 <I2C_ER_IRQHandling+0xde>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00b      	beq.n	8001a34 <I2C_ER_IRQHandling+0xde>
	{
		// This is Overrun/underrun

		// Clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR[0] &= ~( 1 << I2C_SR1_OVR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2a:	615a      	str	r2, [r3, #20]

		// Notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_OVR);
 8001a2c:	2106      	movs	r1, #6
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff f850 	bl	8000ad4 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR[0] >> I2C_SR1_TIMEOUT) & 1;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	0b9b      	lsrs	r3, r3, #14
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00e      	beq.n	8001a66 <I2C_ER_IRQHandling+0x110>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00b      	beq.n	8001a66 <I2C_ER_IRQHandling+0x110>
	{
		// This is Time out error

		// Clear the Time out error flag
		pI2CHandle->pI2Cx->SR[0] &= ~( 1 << I2C_SR1_TIMEOUT);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a5c:	615a      	str	r2, [r3, #20]

		// Notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_TIMEOUT);
 8001a5e:	2107      	movs	r1, #7
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff f837 	bl	8000ad4 <I2C_ApplicationEventCallback>
	}
}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <I2C_IRQInterruptConfig>:
 * @return 			- none
 *
 * @Note			-
 *
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	460a      	mov	r2, r1
 8001a7a:	71fb      	strb	r3, [r7, #7]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE){
 8001a80:	79bb      	ldrb	r3, [r7, #6]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d131      	bne.n	8001aea <I2C_IRQInterruptConfig+0x7a>
		if (IRQNumber <= 31){
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b1f      	cmp	r3, #31
 8001a8a:	d80a      	bhi.n	8001aa2 <I2C_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= ( 1 << IRQNumber);
 8001a8c:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <I2C_IRQInterruptConfig+0xe8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	79fa      	ldrb	r2, [r7, #7]
 8001a92:	2101      	movs	r1, #1
 8001a94:	fa01 f202 	lsl.w	r2, r1, r2
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4a2f      	ldr	r2, [pc, #188]	; (8001b58 <I2C_IRQInterruptConfig+0xe8>)
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	6013      	str	r3, [r2, #0]

		}else if ((IRQNumber > 64) && (IRQNumber < 96)){
			*NVIC_ICER2 |= ( 1 << (IRQNumber - 64));
		}
	}
}
 8001aa0:	e055      	b.n	8001b4e <I2C_IRQInterruptConfig+0xde>
		}else if ((IRQNumber > 31) && (IRQNumber < 64)){
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	2b1f      	cmp	r3, #31
 8001aa6:	d90e      	bls.n	8001ac6 <I2C_IRQInterruptConfig+0x56>
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	2b3f      	cmp	r3, #63	; 0x3f
 8001aac:	d80b      	bhi.n	8001ac6 <I2C_IRQInterruptConfig+0x56>
			*NVIC_ISER1 |= ( 1 << (IRQNumber - 32));
 8001aae:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <I2C_IRQInterruptConfig+0xec>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	79fa      	ldrb	r2, [r7, #7]
 8001ab4:	3a20      	subs	r2, #32
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8001abc:	4611      	mov	r1, r2
 8001abe:	4a27      	ldr	r2, [pc, #156]	; (8001b5c <I2C_IRQInterruptConfig+0xec>)
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	e043      	b.n	8001b4e <I2C_IRQInterruptConfig+0xde>
		}else if ((IRQNumber > 64) && (IRQNumber < 96)){
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b40      	cmp	r3, #64	; 0x40
 8001aca:	d940      	bls.n	8001b4e <I2C_IRQInterruptConfig+0xde>
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	2b5f      	cmp	r3, #95	; 0x5f
 8001ad0:	d83d      	bhi.n	8001b4e <I2C_IRQInterruptConfig+0xde>
			*NVIC_ISER2 |= ( 1 << (IRQNumber - 64));
 8001ad2:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <I2C_IRQInterruptConfig+0xf0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	79fa      	ldrb	r2, [r7, #7]
 8001ad8:	3a40      	subs	r2, #64	; 0x40
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <I2C_IRQInterruptConfig+0xf0>)
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	e031      	b.n	8001b4e <I2C_IRQInterruptConfig+0xde>
		if (IRQNumber <= 31){
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	2b1f      	cmp	r3, #31
 8001aee:	d80a      	bhi.n	8001b06 <I2C_IRQInterruptConfig+0x96>
			*NVIC_ICER0 |= ( 1 << IRQNumber);
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <I2C_IRQInterruptConfig+0xf4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	79fa      	ldrb	r2, [r7, #7]
 8001af6:	2101      	movs	r1, #1
 8001af8:	fa01 f202 	lsl.w	r2, r1, r2
 8001afc:	4611      	mov	r1, r2
 8001afe:	4a19      	ldr	r2, [pc, #100]	; (8001b64 <I2C_IRQInterruptConfig+0xf4>)
 8001b00:	430b      	orrs	r3, r1
 8001b02:	6013      	str	r3, [r2, #0]
}
 8001b04:	e023      	b.n	8001b4e <I2C_IRQInterruptConfig+0xde>
		}else if ((IRQNumber > 31) && (IRQNumber < 64)){
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b1f      	cmp	r3, #31
 8001b0a:	d90e      	bls.n	8001b2a <I2C_IRQInterruptConfig+0xba>
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b3f      	cmp	r3, #63	; 0x3f
 8001b10:	d80b      	bhi.n	8001b2a <I2C_IRQInterruptConfig+0xba>
			*NVIC_ICER1 |= ( 1 << (IRQNumber - 32));
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <I2C_IRQInterruptConfig+0xf8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	79fa      	ldrb	r2, [r7, #7]
 8001b18:	3a20      	subs	r2, #32
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b20:	4611      	mov	r1, r2
 8001b22:	4a11      	ldr	r2, [pc, #68]	; (8001b68 <I2C_IRQInterruptConfig+0xf8>)
 8001b24:	430b      	orrs	r3, r1
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e011      	b.n	8001b4e <I2C_IRQInterruptConfig+0xde>
		}else if ((IRQNumber > 64) && (IRQNumber < 96)){
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b40      	cmp	r3, #64	; 0x40
 8001b2e:	d90e      	bls.n	8001b4e <I2C_IRQInterruptConfig+0xde>
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	2b5f      	cmp	r3, #95	; 0x5f
 8001b34:	d80b      	bhi.n	8001b4e <I2C_IRQInterruptConfig+0xde>
			*NVIC_ICER2 |= ( 1 << (IRQNumber - 64));
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <I2C_IRQInterruptConfig+0xfc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	79fa      	ldrb	r2, [r7, #7]
 8001b3c:	3a40      	subs	r2, #64	; 0x40
 8001b3e:	2101      	movs	r1, #1
 8001b40:	fa01 f202 	lsl.w	r2, r1, r2
 8001b44:	4611      	mov	r1, r2
 8001b46:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <I2C_IRQInterruptConfig+0xfc>)
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	e7ff      	b.n	8001b4e <I2C_IRQInterruptConfig+0xde>
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	e000e100 	.word	0xe000e100
 8001b5c:	e000e104 	.word	0xe000e104
 8001b60:	e000e108 	.word	0xe000e108
 8001b64:	e000e180 	.word	0xe000e180
 8001b68:	e000e184 	.word	0xe000e184
 8001b6c:	e000e188 	.word	0xe000e188

08001b70 <__libc_init_array>:
 8001b70:	b570      	push	{r4, r5, r6, lr}
 8001b72:	4d0d      	ldr	r5, [pc, #52]	; (8001ba8 <__libc_init_array+0x38>)
 8001b74:	4c0d      	ldr	r4, [pc, #52]	; (8001bac <__libc_init_array+0x3c>)
 8001b76:	1b64      	subs	r4, r4, r5
 8001b78:	10a4      	asrs	r4, r4, #2
 8001b7a:	2600      	movs	r6, #0
 8001b7c:	42a6      	cmp	r6, r4
 8001b7e:	d109      	bne.n	8001b94 <__libc_init_array+0x24>
 8001b80:	4d0b      	ldr	r5, [pc, #44]	; (8001bb0 <__libc_init_array+0x40>)
 8001b82:	4c0c      	ldr	r4, [pc, #48]	; (8001bb4 <__libc_init_array+0x44>)
 8001b84:	f000 f818 	bl	8001bb8 <_init>
 8001b88:	1b64      	subs	r4, r4, r5
 8001b8a:	10a4      	asrs	r4, r4, #2
 8001b8c:	2600      	movs	r6, #0
 8001b8e:	42a6      	cmp	r6, r4
 8001b90:	d105      	bne.n	8001b9e <__libc_init_array+0x2e>
 8001b92:	bd70      	pop	{r4, r5, r6, pc}
 8001b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b98:	4798      	blx	r3
 8001b9a:	3601      	adds	r6, #1
 8001b9c:	e7ee      	b.n	8001b7c <__libc_init_array+0xc>
 8001b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ba2:	4798      	blx	r3
 8001ba4:	3601      	adds	r6, #1
 8001ba6:	e7f2      	b.n	8001b8e <__libc_init_array+0x1e>
 8001ba8:	08001bd0 	.word	0x08001bd0
 8001bac:	08001bd0 	.word	0x08001bd0
 8001bb0:	08001bd0 	.word	0x08001bd0
 8001bb4:	08001bd4 	.word	0x08001bd4

08001bb8 <_init>:
 8001bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bba:	bf00      	nop
 8001bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bbe:	bc08      	pop	{r3}
 8001bc0:	469e      	mov	lr, r3
 8001bc2:	4770      	bx	lr

08001bc4 <_fini>:
 8001bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc6:	bf00      	nop
 8001bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bca:	bc08      	pop	{r3}
 8001bcc:	469e      	mov	lr, r3
 8001bce:	4770      	bx	lr
