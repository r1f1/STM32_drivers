
stm32f407_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001468  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001610  08001610  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001610  08001610  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001610  08001610  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001610  08001610  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001610  08001610  00011610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001614  08001614  00011614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000028  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000040  20000040  00020018  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013aa  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000524  00000000  00000000  000213ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  00021910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000128  00000000  00000000  00021a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002874  00000000  00000000  00021b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b2e  00000000  00000000  0002440c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000aec0  00000000  00000000  00025f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00030dfa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005f4  00000000  00000000  00030e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000018 	.word	0x20000018
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080015f8 	.word	0x080015f8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	080015f8 	.word	0x080015f8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_drsub>:
 80001f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001fc:	e002      	b.n	8000204 <__adddf3>
 80001fe:	bf00      	nop

08000200 <__aeabi_dsub>:
 8000200:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000204 <__adddf3>:
 8000204:	b530      	push	{r4, r5, lr}
 8000206:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800020e:	ea94 0f05 	teq	r4, r5
 8000212:	bf08      	it	eq
 8000214:	ea90 0f02 	teqeq	r0, r2
 8000218:	bf1f      	itttt	ne
 800021a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800021e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000222:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000226:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022a:	f000 80e2 	beq.w	80003f2 <__adddf3+0x1ee>
 800022e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000232:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000236:	bfb8      	it	lt
 8000238:	426d      	neglt	r5, r5
 800023a:	dd0c      	ble.n	8000256 <__adddf3+0x52>
 800023c:	442c      	add	r4, r5
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	ea82 0000 	eor.w	r0, r2, r0
 800024a:	ea83 0101 	eor.w	r1, r3, r1
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	2d36      	cmp	r5, #54	; 0x36
 8000258:	bf88      	it	hi
 800025a:	bd30      	pophi	{r4, r5, pc}
 800025c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000260:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000264:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000268:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x70>
 800026e:	4240      	negs	r0, r0
 8000270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000274:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000278:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800027c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000280:	d002      	beq.n	8000288 <__adddf3+0x84>
 8000282:	4252      	negs	r2, r2
 8000284:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000288:	ea94 0f05 	teq	r4, r5
 800028c:	f000 80a7 	beq.w	80003de <__adddf3+0x1da>
 8000290:	f1a4 0401 	sub.w	r4, r4, #1
 8000294:	f1d5 0e20 	rsbs	lr, r5, #32
 8000298:	db0d      	blt.n	80002b6 <__adddf3+0xb2>
 800029a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800029e:	fa22 f205 	lsr.w	r2, r2, r5
 80002a2:	1880      	adds	r0, r0, r2
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ac:	1880      	adds	r0, r0, r2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	4159      	adcs	r1, r3
 80002b4:	e00e      	b.n	80002d4 <__adddf3+0xd0>
 80002b6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ba:	f10e 0e20 	add.w	lr, lr, #32
 80002be:	2a01      	cmp	r2, #1
 80002c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c4:	bf28      	it	cs
 80002c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ca:	fa43 f305 	asr.w	r3, r3, r5
 80002ce:	18c0      	adds	r0, r0, r3
 80002d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d8:	d507      	bpl.n	80002ea <__adddf3+0xe6>
 80002da:	f04f 0e00 	mov.w	lr, #0
 80002de:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ee:	d31b      	bcc.n	8000328 <__adddf3+0x124>
 80002f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f4:	d30c      	bcc.n	8000310 <__adddf3+0x10c>
 80002f6:	0849      	lsrs	r1, r1, #1
 80002f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000300:	f104 0401 	add.w	r4, r4, #1
 8000304:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000308:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800030c:	f080 809a 	bcs.w	8000444 <__adddf3+0x240>
 8000310:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	ea41 0105 	orr.w	r1, r1, r5
 8000326:	bd30      	pop	{r4, r5, pc}
 8000328:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800032c:	4140      	adcs	r0, r0
 800032e:	eb41 0101 	adc.w	r1, r1, r1
 8000332:	3c01      	subs	r4, #1
 8000334:	bf28      	it	cs
 8000336:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033a:	d2e9      	bcs.n	8000310 <__adddf3+0x10c>
 800033c:	f091 0f00 	teq	r1, #0
 8000340:	bf04      	itt	eq
 8000342:	4601      	moveq	r1, r0
 8000344:	2000      	moveq	r0, #0
 8000346:	fab1 f381 	clz	r3, r1
 800034a:	bf08      	it	eq
 800034c:	3320      	addeq	r3, #32
 800034e:	f1a3 030b 	sub.w	r3, r3, #11
 8000352:	f1b3 0220 	subs.w	r2, r3, #32
 8000356:	da0c      	bge.n	8000372 <__adddf3+0x16e>
 8000358:	320c      	adds	r2, #12
 800035a:	dd08      	ble.n	800036e <__adddf3+0x16a>
 800035c:	f102 0c14 	add.w	ip, r2, #20
 8000360:	f1c2 020c 	rsb	r2, r2, #12
 8000364:	fa01 f00c 	lsl.w	r0, r1, ip
 8000368:	fa21 f102 	lsr.w	r1, r1, r2
 800036c:	e00c      	b.n	8000388 <__adddf3+0x184>
 800036e:	f102 0214 	add.w	r2, r2, #20
 8000372:	bfd8      	it	le
 8000374:	f1c2 0c20 	rsble	ip, r2, #32
 8000378:	fa01 f102 	lsl.w	r1, r1, r2
 800037c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000380:	bfdc      	itt	le
 8000382:	ea41 010c 	orrle.w	r1, r1, ip
 8000386:	4090      	lslle	r0, r2
 8000388:	1ae4      	subs	r4, r4, r3
 800038a:	bfa2      	ittt	ge
 800038c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000390:	4329      	orrge	r1, r5
 8000392:	bd30      	popge	{r4, r5, pc}
 8000394:	ea6f 0404 	mvn.w	r4, r4
 8000398:	3c1f      	subs	r4, #31
 800039a:	da1c      	bge.n	80003d6 <__adddf3+0x1d2>
 800039c:	340c      	adds	r4, #12
 800039e:	dc0e      	bgt.n	80003be <__adddf3+0x1ba>
 80003a0:	f104 0414 	add.w	r4, r4, #20
 80003a4:	f1c4 0220 	rsb	r2, r4, #32
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f302 	lsl.w	r3, r1, r2
 80003b0:	ea40 0003 	orr.w	r0, r0, r3
 80003b4:	fa21 f304 	lsr.w	r3, r1, r4
 80003b8:	ea45 0103 	orr.w	r1, r5, r3
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f1c4 040c 	rsb	r4, r4, #12
 80003c2:	f1c4 0220 	rsb	r2, r4, #32
 80003c6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ca:	fa01 f304 	lsl.w	r3, r1, r4
 80003ce:	ea40 0003 	orr.w	r0, r0, r3
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	fa21 f004 	lsr.w	r0, r1, r4
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f094 0f00 	teq	r4, #0
 80003e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003e6:	bf06      	itte	eq
 80003e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003ec:	3401      	addeq	r4, #1
 80003ee:	3d01      	subne	r5, #1
 80003f0:	e74e      	b.n	8000290 <__adddf3+0x8c>
 80003f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f6:	bf18      	it	ne
 80003f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003fc:	d029      	beq.n	8000452 <__adddf3+0x24e>
 80003fe:	ea94 0f05 	teq	r4, r5
 8000402:	bf08      	it	eq
 8000404:	ea90 0f02 	teqeq	r0, r2
 8000408:	d005      	beq.n	8000416 <__adddf3+0x212>
 800040a:	ea54 0c00 	orrs.w	ip, r4, r0
 800040e:	bf04      	itt	eq
 8000410:	4619      	moveq	r1, r3
 8000412:	4610      	moveq	r0, r2
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	ea91 0f03 	teq	r1, r3
 800041a:	bf1e      	ittt	ne
 800041c:	2100      	movne	r1, #0
 800041e:	2000      	movne	r0, #0
 8000420:	bd30      	popne	{r4, r5, pc}
 8000422:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000426:	d105      	bne.n	8000434 <__adddf3+0x230>
 8000428:	0040      	lsls	r0, r0, #1
 800042a:	4149      	adcs	r1, r1
 800042c:	bf28      	it	cs
 800042e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000432:	bd30      	pop	{r4, r5, pc}
 8000434:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000438:	bf3c      	itt	cc
 800043a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800043e:	bd30      	popcc	{r4, r5, pc}
 8000440:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000444:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000456:	bf1a      	itte	ne
 8000458:	4619      	movne	r1, r3
 800045a:	4610      	movne	r0, r2
 800045c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000460:	bf1c      	itt	ne
 8000462:	460b      	movne	r3, r1
 8000464:	4602      	movne	r2, r0
 8000466:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046a:	bf06      	itte	eq
 800046c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000470:	ea91 0f03 	teqeq	r1, r3
 8000474:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	bf00      	nop

0800047c <__aeabi_ui2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f04f 0500 	mov.w	r5, #0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e750      	b.n	800033c <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_i2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b4:	bf48      	it	mi
 80004b6:	4240      	negmi	r0, r0
 80004b8:	f04f 0100 	mov.w	r1, #0
 80004bc:	e73e      	b.n	800033c <__adddf3+0x138>
 80004be:	bf00      	nop

080004c0 <__aeabi_f2d>:
 80004c0:	0042      	lsls	r2, r0, #1
 80004c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ce:	bf1f      	itttt	ne
 80004d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004dc:	4770      	bxne	lr
 80004de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e2:	bf08      	it	eq
 80004e4:	4770      	bxeq	lr
 80004e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ea:	bf04      	itt	eq
 80004ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000500:	e71c      	b.n	800033c <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_ul2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	e00a      	b.n	800052a <__aeabi_l2d+0x16>

08000514 <__aeabi_l2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000522:	d502      	bpl.n	800052a <__aeabi_l2d+0x16>
 8000524:	4240      	negs	r0, r0
 8000526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000532:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000536:	f43f aed8 	beq.w	80002ea <__adddf3+0xe6>
 800053a:	f04f 0203 	mov.w	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000552:	f1c2 0320 	rsb	r3, r2, #32
 8000556:	fa00 fc03 	lsl.w	ip, r0, r3
 800055a:	fa20 f002 	lsr.w	r0, r0, r2
 800055e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000562:	ea40 000e 	orr.w	r0, r0, lr
 8000566:	fa21 f102 	lsr.w	r1, r1, r2
 800056a:	4414      	add	r4, r2
 800056c:	e6bd      	b.n	80002ea <__adddf3+0xe6>
 800056e:	bf00      	nop

08000570 <__aeabi_dmul>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057e:	bf1d      	ittte	ne
 8000580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000584:	ea94 0f0c 	teqne	r4, ip
 8000588:	ea95 0f0c 	teqne	r5, ip
 800058c:	f000 f8de 	bleq	800074c <__aeabi_dmul+0x1dc>
 8000590:	442c      	add	r4, r5
 8000592:	ea81 0603 	eor.w	r6, r1, r3
 8000596:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a2:	bf18      	it	ne
 80005a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b0:	d038      	beq.n	8000624 <__aeabi_dmul+0xb4>
 80005b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c6:	f04f 0600 	mov.w	r6, #0
 80005ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ce:	f09c 0f00 	teq	ip, #0
 80005d2:	bf18      	it	ne
 80005d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e4:	d204      	bcs.n	80005f0 <__aeabi_dmul+0x80>
 80005e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ea:	416d      	adcs	r5, r5
 80005ec:	eb46 0606 	adc.w	r6, r6, r6
 80005f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000600:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000604:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000608:	bf88      	it	hi
 800060a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060e:	d81e      	bhi.n	800064e <__aeabi_dmul+0xde>
 8000610:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000614:	bf08      	it	eq
 8000616:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061a:	f150 0000 	adcs.w	r0, r0, #0
 800061e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000628:	ea46 0101 	orr.w	r1, r6, r1
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	ea81 0103 	eor.w	r1, r1, r3
 8000634:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000638:	bfc2      	ittt	gt
 800063a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000642:	bd70      	popgt	{r4, r5, r6, pc}
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f04f 0e00 	mov.w	lr, #0
 800064c:	3c01      	subs	r4, #1
 800064e:	f300 80ab 	bgt.w	80007a8 <__aeabi_dmul+0x238>
 8000652:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000656:	bfde      	ittt	le
 8000658:	2000      	movle	r0, #0
 800065a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd70      	pople	{r4, r5, r6, pc}
 8000660:	f1c4 0400 	rsb	r4, r4, #0
 8000664:	3c20      	subs	r4, #32
 8000666:	da35      	bge.n	80006d4 <__aeabi_dmul+0x164>
 8000668:	340c      	adds	r4, #12
 800066a:	dc1b      	bgt.n	80006a4 <__aeabi_dmul+0x134>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f305 	lsl.w	r3, r0, r5
 8000678:	fa20 f004 	lsr.w	r0, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800068c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000690:	fa21 f604 	lsr.w	r6, r1, r4
 8000694:	eb42 0106 	adc.w	r1, r2, r6
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 040c 	rsb	r4, r4, #12
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f304 	lsl.w	r3, r0, r4
 80006b0:	fa20 f005 	lsr.w	r0, r0, r5
 80006b4:	fa01 f204 	lsl.w	r2, r1, r4
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c4:	f141 0100 	adc.w	r1, r1, #0
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f205 	lsl.w	r2, r0, r5
 80006dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e0:	fa20 f304 	lsr.w	r3, r0, r4
 80006e4:	fa01 f205 	lsl.w	r2, r1, r5
 80006e8:	ea43 0302 	orr.w	r3, r3, r2
 80006ec:	fa21 f004 	lsr.w	r0, r1, r4
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	fa21 f204 	lsr.w	r2, r1, r4
 80006f8:	ea20 0002 	bic.w	r0, r0, r2
 80006fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f094 0f00 	teq	r4, #0
 8000710:	d10f      	bne.n	8000732 <__aeabi_dmul+0x1c2>
 8000712:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000716:	0040      	lsls	r0, r0, #1
 8000718:	eb41 0101 	adc.w	r1, r1, r1
 800071c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3c01      	subeq	r4, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1a6>
 8000726:	ea41 0106 	orr.w	r1, r1, r6
 800072a:	f095 0f00 	teq	r5, #0
 800072e:	bf18      	it	ne
 8000730:	4770      	bxne	lr
 8000732:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	eb43 0303 	adc.w	r3, r3, r3
 800073c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3d01      	subeq	r5, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1c6>
 8000746:	ea43 0306 	orr.w	r3, r3, r6
 800074a:	4770      	bx	lr
 800074c:	ea94 0f0c 	teq	r4, ip
 8000750:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000754:	bf18      	it	ne
 8000756:	ea95 0f0c 	teqne	r5, ip
 800075a:	d00c      	beq.n	8000776 <__aeabi_dmul+0x206>
 800075c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000760:	bf18      	it	ne
 8000762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000766:	d1d1      	bne.n	800070c <__aeabi_dmul+0x19c>
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd70      	pop	{r4, r5, r6, pc}
 8000776:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077a:	bf06      	itte	eq
 800077c:	4610      	moveq	r0, r2
 800077e:	4619      	moveq	r1, r3
 8000780:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000784:	d019      	beq.n	80007ba <__aeabi_dmul+0x24a>
 8000786:	ea94 0f0c 	teq	r4, ip
 800078a:	d102      	bne.n	8000792 <__aeabi_dmul+0x222>
 800078c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000790:	d113      	bne.n	80007ba <__aeabi_dmul+0x24a>
 8000792:	ea95 0f0c 	teq	r5, ip
 8000796:	d105      	bne.n	80007a4 <__aeabi_dmul+0x234>
 8000798:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800079c:	bf1c      	itt	ne
 800079e:	4610      	movne	r0, r2
 80007a0:	4619      	movne	r1, r3
 80007a2:	d10a      	bne.n	80007ba <__aeabi_dmul+0x24a>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c2:	bd70      	pop	{r4, r5, r6, pc}

080007c4 <__aeabi_ddiv>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d2:	bf1d      	ittte	ne
 80007d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d8:	ea94 0f0c 	teqne	r4, ip
 80007dc:	ea95 0f0c 	teqne	r5, ip
 80007e0:	f000 f8a7 	bleq	8000932 <__aeabi_ddiv+0x16e>
 80007e4:	eba4 0405 	sub.w	r4, r4, r5
 80007e8:	ea81 0e03 	eor.w	lr, r1, r3
 80007ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f4:	f000 8088 	beq.w	8000908 <__aeabi_ddiv+0x144>
 80007f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000800:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000804:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000808:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800080c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000810:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000814:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000818:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800081c:	429d      	cmp	r5, r3
 800081e:	bf08      	it	eq
 8000820:	4296      	cmpeq	r6, r2
 8000822:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000826:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082a:	d202      	bcs.n	8000832 <__aeabi_ddiv+0x6e>
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	1ab6      	subs	r6, r6, r2
 8000834:	eb65 0503 	sbc.w	r5, r5, r3
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000842:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 000c 	orrcs.w	r0, r0, ip
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a4:	d018      	beq.n	80008d8 <__aeabi_ddiv+0x114>
 80008a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c2:	d1c0      	bne.n	8000846 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	d10b      	bne.n	80008e2 <__aeabi_ddiv+0x11e>
 80008ca:	ea41 0100 	orr.w	r1, r1, r0
 80008ce:	f04f 0000 	mov.w	r0, #0
 80008d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d6:	e7b6      	b.n	8000846 <__aeabi_ddiv+0x82>
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	bf04      	itt	eq
 80008de:	4301      	orreq	r1, r0
 80008e0:	2000      	moveq	r0, #0
 80008e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e6:	bf88      	it	hi
 80008e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008ec:	f63f aeaf 	bhi.w	800064e <__aeabi_dmul+0xde>
 80008f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f4:	bf04      	itt	eq
 80008f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fe:	f150 0000 	adcs.w	r0, r0, #0
 8000902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000906:	bd70      	pop	{r4, r5, r6, pc}
 8000908:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800090c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000910:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000914:	bfc2      	ittt	gt
 8000916:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091e:	bd70      	popgt	{r4, r5, r6, pc}
 8000920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000924:	f04f 0e00 	mov.w	lr, #0
 8000928:	3c01      	subs	r4, #1
 800092a:	e690      	b.n	800064e <__aeabi_dmul+0xde>
 800092c:	ea45 0e06 	orr.w	lr, r5, r6
 8000930:	e68d      	b.n	800064e <__aeabi_dmul+0xde>
 8000932:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000936:	ea94 0f0c 	teq	r4, ip
 800093a:	bf08      	it	eq
 800093c:	ea95 0f0c 	teqeq	r5, ip
 8000940:	f43f af3b 	beq.w	80007ba <__aeabi_dmul+0x24a>
 8000944:	ea94 0f0c 	teq	r4, ip
 8000948:	d10a      	bne.n	8000960 <__aeabi_ddiv+0x19c>
 800094a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094e:	f47f af34 	bne.w	80007ba <__aeabi_dmul+0x24a>
 8000952:	ea95 0f0c 	teq	r5, ip
 8000956:	f47f af25 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e72c      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000960:	ea95 0f0c 	teq	r5, ip
 8000964:	d106      	bne.n	8000974 <__aeabi_ddiv+0x1b0>
 8000966:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096a:	f43f aefd 	beq.w	8000768 <__aeabi_dmul+0x1f8>
 800096e:	4610      	mov	r0, r2
 8000970:	4619      	mov	r1, r3
 8000972:	e722      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000978:	bf18      	it	ne
 800097a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097e:	f47f aec5 	bne.w	800070c <__aeabi_dmul+0x19c>
 8000982:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000986:	f47f af0d 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800098a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098e:	f47f aeeb 	bne.w	8000768 <__aeabi_dmul+0x1f8>
 8000992:	e712      	b.n	80007ba <__aeabi_dmul+0x24a>

08000994 <__aeabi_d2uiz>:
 8000994:	004a      	lsls	r2, r1, #1
 8000996:	d211      	bcs.n	80009bc <__aeabi_d2uiz+0x28>
 8000998:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800099c:	d211      	bcs.n	80009c2 <__aeabi_d2uiz+0x2e>
 800099e:	d50d      	bpl.n	80009bc <__aeabi_d2uiz+0x28>
 80009a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a8:	d40e      	bmi.n	80009c8 <__aeabi_d2uiz+0x34>
 80009aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009b6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d102      	bne.n	80009ce <__aeabi_d2uiz+0x3a>
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	4770      	bx	lr
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	4770      	bx	lr

080009d4 <delay>:
uint8_t data[] = "Perro sanchez hijoputa\n";

#define MY_ADDR			0x61
#define SLAVE_ADDR		0x68

void delay(void){
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000/2; i++);
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	e002      	b.n	80009e6 <delay+0x12>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3301      	adds	r3, #1
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a04      	ldr	r2, [pc, #16]	; (80009fc <delay+0x28>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d9f8      	bls.n	80009e0 <delay+0xc>
}
 80009ee:	bf00      	nop
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	0003d08f 	.word	0x0003d08f

08000a00 <I2C1_GPIOInit>:

void I2C1_GPIOInit(){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0

	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <I2C1_GPIOInit+0x40>)
 8000a08:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000a12:	2304      	movs	r3, #4
 8000a14:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000a16:	2301      	movs	r3, #1
 8000a18:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	72bb      	strb	r3, [r7, #10]

	// SCL pin
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000a1e:	2306      	movs	r3, #6
 8000a20:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 f987 	bl	8000d38 <GPIO_Init>

	// SDA pin
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f981 	bl	8000d38 <GPIO_Init>

}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40020400 	.word	0x40020400

08000a44 <I2C1_Inits>:

void I2C1_Inits(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx = I2C1;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <I2C1_Inits+0x2c>)
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <I2C1_Inits+0x30>)
 8000a4c:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <I2C1_Inits+0x2c>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR; // Not necessary in master mode
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <I2C1_Inits+0x2c>)
 8000a56:	2261      	movs	r2, #97	; 0x61
 8000a58:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <I2C1_Inits+0x2c>)
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <I2C1_Inits+0x34>)
 8000a5e:	605a      	str	r2, [r3, #4]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = 0; // not used
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <I2C1_Inits+0x2c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	729a      	strb	r2, [r3, #10]

	I2C_Init(&I2C1Handle);
 8000a66:	4802      	ldr	r0, [pc, #8]	; (8000a70 <I2C1_Inits+0x2c>)
 8000a68:	f000 fc5e 	bl	8001328 <I2C_Init>

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000034 	.word	0x20000034
 8000a74:	40005400 	.word	0x40005400
 8000a78:	000186a0 	.word	0x000186a0

08000a7c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	/* Button pin configuration */
	GPIOBtn.pGPIOx = GPIOA;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <GPIO_ButtonInit+0x2c>)
 8000a84:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a92:	2300      	movs	r3, #0
 8000a94:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 f94d 	bl	8000d38 <GPIO_Init>
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40020000 	.word	0x40020000

08000aac <main>:


int main(){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af02      	add	r7, sp, #8

	GPIO_ButtonInit();
 8000ab2:	f7ff ffe3 	bl	8000a7c <GPIO_ButtonInit>

	// I2C pin inits
	I2C1_GPIOInit();
 8000ab6:	f7ff ffa3 	bl	8000a00 <I2C1_GPIOInit>

	// I2C configuration
	I2C1_Inits();
 8000aba:	f7ff ffc3 	bl	8000a44 <I2C1_Inits>

	// Enable the I2C1 peripheral control
	I2C1_CONTROL(ENABLE);
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <main+0x4c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <main+0x4c>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6013      	str	r3, [r2, #0]

	while(1){
		// Wait for the button pressed
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000aca:	bf00      	nop
 8000acc:	2100      	movs	r1, #0
 8000ace:	480b      	ldr	r0, [pc, #44]	; (8000afc <main+0x50>)
 8000ad0:	f000 faba 	bl	8001048 <GPIO_ReadFromInputPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d0f8      	beq.n	8000acc <main+0x20>

		delay();
 8000ada:	f7ff ff7b 	bl	80009d4 <delay>

		// Send the data
		I2C_MasterSendData(&I2C1Handle, data, strlen((char*)data), SLAVE_ADDR, I2C_DISABLE_SR);
 8000ade:	4808      	ldr	r0, [pc, #32]	; (8000b00 <main+0x54>)
 8000ae0:	f7ff fb82 	bl	80001e8 <strlen>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2368      	movs	r3, #104	; 0x68
 8000aec:	4904      	ldr	r1, [pc, #16]	; (8000b00 <main+0x54>)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <main+0x58>)
 8000af0:	f000 fcf2 	bl	80014d8 <I2C_MasterSendData>
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000af4:	e7e9      	b.n	8000aca <main+0x1e>
 8000af6:	bf00      	nop
 8000af8:	40005400 	.word	0x40005400
 8000afc:	40020000 	.word	0x40020000
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000034 	.word	0x20000034

08000b08 <EXTI9_5_IRQHandler>:
/* Runs when a data byte is received from the peripheral over I2C */
void I2C1_IRQHandler(void){

}

void EXTI9_5_IRQHandler(void){
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b18:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	; (8000b54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <LoopForever+0xe>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	; (8000b60 <LoopForever+0x16>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b42:	f000 fd35 	bl	80015b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b46:	f7ff ffb1 	bl	8000aac <main>

08000b4a <LoopForever>:

LoopForever:
  b LoopForever
 8000b4a:	e7fe      	b.n	8000b4a <LoopForever>
  ldr   r0, =_estack
 8000b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000b58:	08001618 	.word	0x08001618
  ldr r2, =_sbss
 8000b5c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000b60:	20000040 	.word	0x20000040

08000b64 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <GPIO_PeriClockControl>:
 * @return 			- none
 *
 * @Note			- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000b74:	78fb      	ldrb	r3, [r7, #3]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d162      	bne.n	8000c40 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA) {
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a64      	ldr	r2, [pc, #400]	; (8000d10 <GPIO_PeriClockControl+0x1a8>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d106      	bne.n	8000b90 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000b82:	4b64      	ldr	r3, [pc, #400]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a63      	ldr	r2, [pc, #396]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		}else if(pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}
}
 8000b8e:	e0b9      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a61      	ldr	r2, [pc, #388]	; (8000d18 <GPIO_PeriClockControl+0x1b0>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d106      	bne.n	8000ba6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000b98:	4b5e      	ldr	r3, [pc, #376]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a5d      	ldr	r2, [pc, #372]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ba4:	e0ae      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC) {
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a5c      	ldr	r2, [pc, #368]	; (8000d1c <GPIO_PeriClockControl+0x1b4>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d106      	bne.n	8000bbc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000bae:	4b59      	ldr	r3, [pc, #356]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a58      	ldr	r2, [pc, #352]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bba:	e0a3      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD) {
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a58      	ldr	r2, [pc, #352]	; (8000d20 <GPIO_PeriClockControl+0x1b8>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d106      	bne.n	8000bd2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000bc4:	4b53      	ldr	r3, [pc, #332]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a52      	ldr	r2, [pc, #328]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000bca:	f043 0308 	orr.w	r3, r3, #8
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bd0:	e098      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE) {
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a53      	ldr	r2, [pc, #332]	; (8000d24 <GPIO_PeriClockControl+0x1bc>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d106      	bne.n	8000be8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000bda:	4b4e      	ldr	r3, [pc, #312]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a4d      	ldr	r2, [pc, #308]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000be0:	f043 0310 	orr.w	r3, r3, #16
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000be6:	e08d      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF) {
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a4f      	ldr	r2, [pc, #316]	; (8000d28 <GPIO_PeriClockControl+0x1c0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d106      	bne.n	8000bfe <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000bf0:	4b48      	ldr	r3, [pc, #288]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	4a47      	ldr	r2, [pc, #284]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000bf6:	f043 0320 	orr.w	r3, r3, #32
 8000bfa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bfc:	e082      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG) {
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a4a      	ldr	r2, [pc, #296]	; (8000d2c <GPIO_PeriClockControl+0x1c4>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d106      	bne.n	8000c14 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000c06:	4b43      	ldr	r3, [pc, #268]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a42      	ldr	r2, [pc, #264]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c12:	e077      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a46      	ldr	r2, [pc, #280]	; (8000d30 <GPIO_PeriClockControl+0x1c8>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d106      	bne.n	8000c2a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000c1c:	4b3d      	ldr	r3, [pc, #244]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	4a3c      	ldr	r2, [pc, #240]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c26:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c28:	e06c      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI) {
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a41      	ldr	r2, [pc, #260]	; (8000d34 <GPIO_PeriClockControl+0x1cc>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d168      	bne.n	8000d04 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000c32:	4b38      	ldr	r3, [pc, #224]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a37      	ldr	r2, [pc, #220]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c3e:	e061      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a33      	ldr	r2, [pc, #204]	; (8000d10 <GPIO_PeriClockControl+0x1a8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d106      	bne.n	8000c56 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000c48:	4b32      	ldr	r3, [pc, #200]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	4a31      	ldr	r2, [pc, #196]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000c4e:	f023 0301 	bic.w	r3, r3, #1
 8000c52:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c54:	e056      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB) {
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a2f      	ldr	r2, [pc, #188]	; (8000d18 <GPIO_PeriClockControl+0x1b0>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d106      	bne.n	8000c6c <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a2c      	ldr	r2, [pc, #176]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000c64:	f023 0302 	bic.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c6a:	e04b      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a2b      	ldr	r2, [pc, #172]	; (8000d1c <GPIO_PeriClockControl+0x1b4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d106      	bne.n	8000c82 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	4a26      	ldr	r2, [pc, #152]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000c7a:	f023 0304 	bic.w	r3, r3, #4
 8000c7e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c80:	e040      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD) {
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <GPIO_PeriClockControl+0x1b8>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d106      	bne.n	8000c98 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000c8a:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000c90:	f023 0308 	bic.w	r3, r3, #8
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c96:	e035      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a22      	ldr	r2, [pc, #136]	; (8000d24 <GPIO_PeriClockControl+0x1bc>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d106      	bne.n	8000cae <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000ca6:	f023 0310 	bic.w	r3, r3, #16
 8000caa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cac:	e02a      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF) {
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a1d      	ldr	r2, [pc, #116]	; (8000d28 <GPIO_PeriClockControl+0x1c0>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d106      	bne.n	8000cc4 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000cbc:	f023 0320 	bic.w	r3, r3, #32
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cc2:	e01f      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <GPIO_PeriClockControl+0x1c4>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d106      	bne.n	8000cda <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cd6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cd8:	e014      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH) {
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <GPIO_PeriClockControl+0x1c8>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d106      	bne.n	8000cf0 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cee:	e009      	b.n	8000d04 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <GPIO_PeriClockControl+0x1cc>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d105      	bne.n	8000d04 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <GPIO_PeriClockControl+0x1ac>)
 8000cfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40020000 	.word	0x40020000
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020400 	.word	0x40020400
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	40020c00 	.word	0x40020c00
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40021400 	.word	0x40021400
 8000d2c:	40021800 	.word	0x40021800
 8000d30:	40021c00 	.word	0x40021c00
 8000d34:	40022000 	.word	0x40022000

08000d38 <GPIO_Init>:
 * @return 			- none
 *
 * @Note			- none
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0; // temp register
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
	uint8_t tmp_PinNumber = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	791b      	ldrb	r3, [r3, #4]
 8000d48:	74fb      	strb	r3, [r7, #19]
	uint8_t tmp_PinMode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	795b      	ldrb	r3, [r3, #5]
 8000d4e:	74bb      	strb	r3, [r7, #18]

	/* Enable the peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx,ENABLE);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2101      	movs	r1, #1
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff06 	bl	8000b68 <GPIO_PeriClockControl>

	/* 1. Configure the mode of the gpio pin */
	if (tmp_PinMode <= GPIO_MODE_ANALOG){
 8000d5c:	7cbb      	ldrb	r3, [r7, #18]
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d81c      	bhi.n	8000d9c <GPIO_Init+0x64>
		temp = (tmp_PinMode << (2 * tmp_PinNumber));
 8000d62:	7cba      	ldrb	r2, [r7, #18]
 8000d64:	7cfb      	ldrb	r3, [r7, #19]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * tmp_PinNumber));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	7cfb      	ldrb	r3, [r7, #19]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2103      	movs	r1, #3
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	4619      	mov	r1, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	400a      	ands	r2, r1
 8000d88:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6819      	ldr	r1, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	e0aa      	b.n	8000ef2 <GPIO_Init+0x1ba>
	}else{
		// this is interrupt mode
		if (tmp_PinMode <= GPIO_MODE_IT_FT){
 8000d9c:	7cbb      	ldrb	r3, [r7, #18]
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	d815      	bhi.n	8000dce <GPIO_Init+0x96>
			// 1. Configure the FTSR (Falling trigger selection register)
			EXTI->FTSR |= (1 << tmp_PinNumber);
 8000da2:	4b9e      	ldr	r3, [pc, #632]	; (800101c <GPIO_Init+0x2e4>)
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	7cfa      	ldrb	r2, [r7, #19]
 8000da8:	2101      	movs	r1, #1
 8000daa:	fa01 f202 	lsl.w	r2, r1, r2
 8000dae:	4611      	mov	r1, r2
 8000db0:	4a9a      	ldr	r2, [pc, #616]	; (800101c <GPIO_Init+0x2e4>)
 8000db2:	430b      	orrs	r3, r1
 8000db4:	60d3      	str	r3, [r2, #12]
			// 1.1 To make sure Rising edge detection is not set, we cleared it.
			EXTI->RTSR &= ~(1 << tmp_PinNumber);
 8000db6:	4b99      	ldr	r3, [pc, #612]	; (800101c <GPIO_Init+0x2e4>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	7cfa      	ldrb	r2, [r7, #19]
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc2:	43d2      	mvns	r2, r2
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4a95      	ldr	r2, [pc, #596]	; (800101c <GPIO_Init+0x2e4>)
 8000dc8:	400b      	ands	r3, r1
 8000dca:	6093      	str	r3, [r2, #8]
 8000dcc:	e02f      	b.n	8000e2e <GPIO_Init+0xf6>

		}else if(tmp_PinMode <= GPIO_MODE_IT_RT){
 8000dce:	7cbb      	ldrb	r3, [r7, #18]
 8000dd0:	2b05      	cmp	r3, #5
 8000dd2:	d815      	bhi.n	8000e00 <GPIO_Init+0xc8>
			// 1. Configure the RTSR (Rising trigger selection register)
			EXTI->RTSR |= (1 << tmp_PinNumber);
 8000dd4:	4b91      	ldr	r3, [pc, #580]	; (800101c <GPIO_Init+0x2e4>)
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	7cfa      	ldrb	r2, [r7, #19]
 8000dda:	2101      	movs	r1, #1
 8000ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8000de0:	4611      	mov	r1, r2
 8000de2:	4a8e      	ldr	r2, [pc, #568]	; (800101c <GPIO_Init+0x2e4>)
 8000de4:	430b      	orrs	r3, r1
 8000de6:	6093      	str	r3, [r2, #8]
			// 1.1 To make sure Falling edge detection is not set, we cleared it.
			EXTI->FTSR &= ~(1 << tmp_PinNumber);
 8000de8:	4b8c      	ldr	r3, [pc, #560]	; (800101c <GPIO_Init+0x2e4>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	7cfa      	ldrb	r2, [r7, #19]
 8000dee:	2101      	movs	r1, #1
 8000df0:	fa01 f202 	lsl.w	r2, r1, r2
 8000df4:	43d2      	mvns	r2, r2
 8000df6:	4611      	mov	r1, r2
 8000df8:	4a88      	ldr	r2, [pc, #544]	; (800101c <GPIO_Init+0x2e4>)
 8000dfa:	400b      	ands	r3, r1
 8000dfc:	60d3      	str	r3, [r2, #12]
 8000dfe:	e016      	b.n	8000e2e <GPIO_Init+0xf6>

		}else if (tmp_PinMode <= GPIO_MODE_IT_RFT){
 8000e00:	7cbb      	ldrb	r3, [r7, #18]
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d813      	bhi.n	8000e2e <GPIO_Init+0xf6>
			// 1. Configure both RSTR and FTSR
			EXTI->RTSR |= (1 << tmp_PinNumber);
 8000e06:	4b85      	ldr	r3, [pc, #532]	; (800101c <GPIO_Init+0x2e4>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	7cfa      	ldrb	r2, [r7, #19]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e12:	4611      	mov	r1, r2
 8000e14:	4a81      	ldr	r2, [pc, #516]	; (800101c <GPIO_Init+0x2e4>)
 8000e16:	430b      	orrs	r3, r1
 8000e18:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << tmp_PinNumber);
 8000e1a:	4b80      	ldr	r3, [pc, #512]	; (800101c <GPIO_Init+0x2e4>)
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	7cfa      	ldrb	r2, [r7, #19]
 8000e20:	2101      	movs	r1, #1
 8000e22:	fa01 f202 	lsl.w	r2, r1, r2
 8000e26:	4611      	mov	r1, r2
 8000e28:	4a7c      	ldr	r2, [pc, #496]	; (800101c <GPIO_Init+0x2e4>)
 8000e2a:	430b      	orrs	r3, r1
 8000e2c:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = tmp_PinNumber / 4;
 8000e2e:	7cfb      	ldrb	r3, [r7, #19]
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	747b      	strb	r3, [r7, #17]
		uint8_t temp2 = tmp_PinNumber % 4;
 8000e34:	7cfb      	ldrb	r3, [r7, #19]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	743b      	strb	r3, [r7, #16]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a77      	ldr	r2, [pc, #476]	; (8001020 <GPIO_Init+0x2e8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d032      	beq.n	8000eac <GPIO_Init+0x174>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a76      	ldr	r2, [pc, #472]	; (8001024 <GPIO_Init+0x2ec>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d02b      	beq.n	8000ea8 <GPIO_Init+0x170>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a74      	ldr	r2, [pc, #464]	; (8001028 <GPIO_Init+0x2f0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d024      	beq.n	8000ea4 <GPIO_Init+0x16c>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a73      	ldr	r2, [pc, #460]	; (800102c <GPIO_Init+0x2f4>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d01d      	beq.n	8000ea0 <GPIO_Init+0x168>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a71      	ldr	r2, [pc, #452]	; (8001030 <GPIO_Init+0x2f8>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d016      	beq.n	8000e9c <GPIO_Init+0x164>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a70      	ldr	r2, [pc, #448]	; (8001034 <GPIO_Init+0x2fc>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d00f      	beq.n	8000e98 <GPIO_Init+0x160>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a6e      	ldr	r2, [pc, #440]	; (8001038 <GPIO_Init+0x300>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d008      	beq.n	8000e94 <GPIO_Init+0x15c>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a6d      	ldr	r2, [pc, #436]	; (800103c <GPIO_Init+0x304>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d101      	bne.n	8000e90 <GPIO_Init+0x158>
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	e00e      	b.n	8000eae <GPIO_Init+0x176>
 8000e90:	2300      	movs	r3, #0
 8000e92:	e00c      	b.n	8000eae <GPIO_Init+0x176>
 8000e94:	2306      	movs	r3, #6
 8000e96:	e00a      	b.n	8000eae <GPIO_Init+0x176>
 8000e98:	2305      	movs	r3, #5
 8000e9a:	e008      	b.n	8000eae <GPIO_Init+0x176>
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	e006      	b.n	8000eae <GPIO_Init+0x176>
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e004      	b.n	8000eae <GPIO_Init+0x176>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e002      	b.n	8000eae <GPIO_Init+0x176>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <GPIO_Init+0x176>
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]

		SYSCFG_PCLK_EN();
 8000eb0:	4b63      	ldr	r3, [pc, #396]	; (8001040 <GPIO_Init+0x308>)
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb4:	4a62      	ldr	r2, [pc, #392]	; (8001040 <GPIO_Init+0x308>)
 8000eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eba:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << (4 * temp2));
 8000ebc:	4a61      	ldr	r2, [pc, #388]	; (8001044 <GPIO_Init+0x30c>)
 8000ebe:	7c7b      	ldrb	r3, [r7, #17]
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ec6:	7bf9      	ldrb	r1, [r7, #15]
 8000ec8:	7c3b      	ldrb	r3, [r7, #16]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	495c      	ldr	r1, [pc, #368]	; (8001044 <GPIO_Init+0x30c>)
 8000ed4:	7c7b      	ldrb	r3, [r7, #17]
 8000ed6:	4302      	orrs	r2, r0
 8000ed8:	3302      	adds	r3, #2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << tmp_PinNumber);
 8000ede:	4b4f      	ldr	r3, [pc, #316]	; (800101c <GPIO_Init+0x2e4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	7cfa      	ldrb	r2, [r7, #19]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eea:	4611      	mov	r1, r2
 8000eec:	4a4b      	ldr	r2, [pc, #300]	; (800101c <GPIO_Init+0x2e4>)
 8000eee:	430b      	orrs	r3, r1
 8000ef0:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]

	/* 2. Configure the speed */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * tmp_PinNumber));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	799b      	ldrb	r3, [r3, #6]
 8000efa:	461a      	mov	r2, r3
 8000efc:	7cfb      	ldrb	r3, [r7, #19]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * tmp_PinNumber));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	7cfb      	ldrb	r3, [r7, #19]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2103      	movs	r1, #3
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	4619      	mov	r1, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	400a      	ands	r2, r1
 8000f20:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6899      	ldr	r1, [r3, #8]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]

	/* 2. Configure the pupd settings */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * tmp_PinNumber));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	79db      	ldrb	r3, [r3, #7]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	7cfb      	ldrb	r3, [r7, #19]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * tmp_PinNumber));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	7cfb      	ldrb	r3, [r7, #19]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2103      	movs	r1, #3
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	4619      	mov	r1, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	400a      	ands	r2, r1
 8000f60:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68d9      	ldr	r1, [r3, #12]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]

	/* 2. Configure the optype */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << tmp_PinNumber);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7a1b      	ldrb	r3, [r3, #8]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	7cfb      	ldrb	r3, [r7, #19]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << (tmp_PinNumber));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	7cfb      	ldrb	r3, [r7, #19]
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	4619      	mov	r1, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	400a      	ands	r2, r1
 8000f9c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6859      	ldr	r1, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	430a      	orrs	r2, r1
 8000fac:	605a      	str	r2, [r3, #4]

	/* 2. Configure the alt funcionality */
	if (tmp_PinMode == GPIO_MODE_ALTFN){
 8000fae:	7cbb      	ldrb	r3, [r7, #18]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d12f      	bne.n	8001014 <GPIO_Init+0x2dc>
		uint8_t temp1 = tmp_PinNumber / 8;
 8000fb4:	7cfb      	ldrb	r3, [r7, #19]
 8000fb6:	08db      	lsrs	r3, r3, #3
 8000fb8:	73bb      	strb	r3, [r7, #14]
		uint8_t temp2 = tmp_PinNumber % 8;
 8000fba:	7cfb      	ldrb	r3, [r7, #19]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	737b      	strb	r3, [r7, #13]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	7bba      	ldrb	r2, [r7, #14]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000fce:	7b7b      	ldrb	r3, [r7, #13]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	7bba      	ldrb	r2, [r7, #14]
 8000fe2:	4001      	ands	r1, r0
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	7bba      	ldrb	r2, [r7, #14]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	7a5b      	ldrb	r3, [r3, #9]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	7b7b      	ldrb	r3, [r7, #13]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	4618      	mov	r0, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	7bba      	ldrb	r2, [r7, #14]
 800100c:	4301      	orrs	r1, r0
 800100e:	3208      	adds	r2, #8
 8001010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8001014:	bf00      	nop
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40013c00 	.word	0x40013c00
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400
 8001028:	40020800 	.word	0x40020800
 800102c:	40020c00 	.word	0x40020c00
 8001030:	40021000 	.word	0x40021000
 8001034:	40021400 	.word	0x40021400
 8001038:	40021800 	.word	0x40021800
 800103c:	40021c00 	.word	0x40021c00
 8001040:	40023800 	.word	0x40023800
 8001044:	40013800 	.word	0x40013800

08001048 <GPIO_ReadFromInputPin>:
 * @param[in]		- Number of the given pin
 *
 * @Note			- none
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x1);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	fa22 f303 	lsr.w	r3, r2, r3
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
	return value;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <I2C_ExecuteAddressPhase>:
#include "stm32f407xx_i2c_driver.h"

static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t ReadWrite);
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx);

static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t ReadWrite){
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	70fb      	strb	r3, [r7, #3]
 800107e:	4613      	mov	r3, r2
 8001080:	70bb      	strb	r3, [r7, #2]

	SlaveAddr = SlaveAddr << 1; // We shift to the right to make space for the R/nW bit
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	70fb      	strb	r3, [r7, #3]

	if (ReadWrite == MASTER_WRITE){
 8001088:	78bb      	ldrb	r3, [r7, #2]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d104      	bne.n	8001098 <I2C_ExecuteAddressPhase+0x26>
		SlaveAddr &= ~(1); // Set r/nw bit to 0
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	f023 0301 	bic.w	r3, r3, #1
 8001094:	70fb      	strb	r3, [r7, #3]
 8001096:	e006      	b.n	80010a6 <I2C_ExecuteAddressPhase+0x34>
	}else if (ReadWrite == MASTER_READ){
 8001098:	78bb      	ldrb	r3, [r7, #2]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d103      	bne.n	80010a6 <I2C_ExecuteAddressPhase+0x34>
		SlaveAddr |= (1); // // Set r/nw bit to 1
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	70fb      	strb	r3, [r7, #3]
	}

	pI2Cx->DR = SlaveAddr;
 80010a6:	78fa      	ldrb	r2, [r7, #3]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	611a      	str	r2, [r3, #16]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx){
 80010b6:	b480      	push	{r7}
 80010b8:	b085      	sub	sp, #20
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]

	// As per RM we have to read SR register in order to clear ADDR flag
	uint32_t dummyRead = pI2Cx->SR[0];
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR[1];
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	60fb      	str	r3, [r7, #12]
	(void)dummyRead; // This is to avoid warnings because of unused variables
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <I2C_PeriClockControl>:
 * @return 			- none
 *
 * @Note			- none
 */

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d120      	bne.n	8001128 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1) {
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a22      	ldr	r2, [pc, #136]	; (8001174 <I2C_PeriClockControl+0xa0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d106      	bne.n	80010fc <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <I2C_PeriClockControl+0xa4>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	4a21      	ldr	r2, [pc, #132]	; (8001178 <I2C_PeriClockControl+0xa4>)
 80010f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010f8:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		}else if(pI2Cx == I2C3) {
			I2C3_PCLK_DI();
		}
	}
}
 80010fa:	e035      	b.n	8001168 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a1f      	ldr	r2, [pc, #124]	; (800117c <I2C_PeriClockControl+0xa8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d106      	bne.n	8001112 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <I2C_PeriClockControl+0xa4>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <I2C_PeriClockControl+0xa4>)
 800110a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001110:	e02a      	b.n	8001168 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3) {
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a1a      	ldr	r2, [pc, #104]	; (8001180 <I2C_PeriClockControl+0xac>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d126      	bne.n	8001168 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <I2C_PeriClockControl+0xa4>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a16      	ldr	r2, [pc, #88]	; (8001178 <I2C_PeriClockControl+0xa4>)
 8001120:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001126:	e01f      	b.n	8001168 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <I2C_PeriClockControl+0xa0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d106      	bne.n	800113e <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <I2C_PeriClockControl+0xa4>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	4a10      	ldr	r2, [pc, #64]	; (8001178 <I2C_PeriClockControl+0xa4>)
 8001136:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800113c:	e014      	b.n	8001168 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2) {
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a0e      	ldr	r2, [pc, #56]	; (800117c <I2C_PeriClockControl+0xa8>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d106      	bne.n	8001154 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <I2C_PeriClockControl+0xa4>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <I2C_PeriClockControl+0xa4>)
 800114c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001150:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001152:	e009      	b.n	8001168 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <I2C_PeriClockControl+0xac>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d105      	bne.n	8001168 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <I2C_PeriClockControl+0xa4>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	4a05      	ldr	r2, [pc, #20]	; (8001178 <I2C_PeriClockControl+0xa4>)
 8001162:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001166:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40005400 	.word	0x40005400
 8001178:	40023800 	.word	0x40023800
 800117c:	40005800 	.word	0x40005800
 8001180:	4000c400 	.word	0x4000c400

08001184 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void){
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
	uint32_t pclk1;
	uint8_t clkValue = 0, ahbPres = 0, apb1Pres = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	70fb      	strb	r3, [r7, #3]
 800118e:	2300      	movs	r3, #0
 8001190:	70bb      	strb	r3, [r7, #2]
 8001192:	2300      	movs	r3, #0
 8001194:	707b      	strb	r3, [r7, #1]

	clkValue = (RCC->CFGR >> 2) & 0x3;
 8001196:	4b61      	ldr	r3, [pc, #388]	; (800131c <RCC_GetPCLK1Value+0x198>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	70fb      	strb	r3, [r7, #3]
	ahbPres = (RCC->CFGR >> 4) & 0xf;
 80011a4:	4b5d      	ldr	r3, [pc, #372]	; (800131c <RCC_GetPCLK1Value+0x198>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	70bb      	strb	r3, [r7, #2]
	apb1Pres = (RCC->CFGR >> 10) & 0x7;
 80011b2:	4b5a      	ldr	r3, [pc, #360]	; (800131c <RCC_GetPCLK1Value+0x198>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	0a9b      	lsrs	r3, r3, #10
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	707b      	strb	r3, [r7, #1]

	if (clkValue == 0){
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d150      	bne.n	8001268 <RCC_GetPCLK1Value+0xe4>
		pclk1 = (16000000 / AHB_PRESCALER(ahbPres)) / APB1_PRESCALER(apb1Pres);
 80011c6:	78bb      	ldrb	r3, [r7, #2]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d02b      	beq.n	8001224 <RCC_GetPCLK1Value+0xa0>
 80011cc:	78bb      	ldrb	r3, [r7, #2]
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d026      	beq.n	8001220 <RCC_GetPCLK1Value+0x9c>
 80011d2:	78bb      	ldrb	r3, [r7, #2]
 80011d4:	2b09      	cmp	r3, #9
 80011d6:	d021      	beq.n	800121c <RCC_GetPCLK1Value+0x98>
 80011d8:	78bb      	ldrb	r3, [r7, #2]
 80011da:	2b0a      	cmp	r3, #10
 80011dc:	d01c      	beq.n	8001218 <RCC_GetPCLK1Value+0x94>
 80011de:	78bb      	ldrb	r3, [r7, #2]
 80011e0:	2b0b      	cmp	r3, #11
 80011e2:	d017      	beq.n	8001214 <RCC_GetPCLK1Value+0x90>
 80011e4:	78bb      	ldrb	r3, [r7, #2]
 80011e6:	2b0c      	cmp	r3, #12
 80011e8:	d012      	beq.n	8001210 <RCC_GetPCLK1Value+0x8c>
 80011ea:	78bb      	ldrb	r3, [r7, #2]
 80011ec:	2b0d      	cmp	r3, #13
 80011ee:	d00d      	beq.n	800120c <RCC_GetPCLK1Value+0x88>
 80011f0:	78bb      	ldrb	r3, [r7, #2]
 80011f2:	2b0e      	cmp	r3, #14
 80011f4:	d007      	beq.n	8001206 <RCC_GetPCLK1Value+0x82>
 80011f6:	78bb      	ldrb	r3, [r7, #2]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d102      	bne.n	8001202 <RCC_GetPCLK1Value+0x7e>
 80011fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001200:	e011      	b.n	8001226 <RCC_GetPCLK1Value+0xa2>
 8001202:	2300      	movs	r3, #0
 8001204:	e00f      	b.n	8001226 <RCC_GetPCLK1Value+0xa2>
 8001206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800120a:	e00c      	b.n	8001226 <RCC_GetPCLK1Value+0xa2>
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	e00a      	b.n	8001226 <RCC_GetPCLK1Value+0xa2>
 8001210:	2340      	movs	r3, #64	; 0x40
 8001212:	e008      	b.n	8001226 <RCC_GetPCLK1Value+0xa2>
 8001214:	2310      	movs	r3, #16
 8001216:	e006      	b.n	8001226 <RCC_GetPCLK1Value+0xa2>
 8001218:	2308      	movs	r3, #8
 800121a:	e004      	b.n	8001226 <RCC_GetPCLK1Value+0xa2>
 800121c:	2304      	movs	r3, #4
 800121e:	e002      	b.n	8001226 <RCC_GetPCLK1Value+0xa2>
 8001220:	2302      	movs	r3, #2
 8001222:	e000      	b.n	8001226 <RCC_GetPCLK1Value+0xa2>
 8001224:	2301      	movs	r3, #1
 8001226:	4a3e      	ldr	r2, [pc, #248]	; (8001320 <RCC_GetPCLK1Value+0x19c>)
 8001228:	fb92 f2f3 	sdiv	r2, r2, r3
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d015      	beq.n	800125e <RCC_GetPCLK1Value+0xda>
 8001232:	787b      	ldrb	r3, [r7, #1]
 8001234:	2b04      	cmp	r3, #4
 8001236:	d010      	beq.n	800125a <RCC_GetPCLK1Value+0xd6>
 8001238:	787b      	ldrb	r3, [r7, #1]
 800123a:	2b05      	cmp	r3, #5
 800123c:	d00b      	beq.n	8001256 <RCC_GetPCLK1Value+0xd2>
 800123e:	787b      	ldrb	r3, [r7, #1]
 8001240:	2b06      	cmp	r3, #6
 8001242:	d006      	beq.n	8001252 <RCC_GetPCLK1Value+0xce>
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	2b07      	cmp	r3, #7
 8001248:	d101      	bne.n	800124e <RCC_GetPCLK1Value+0xca>
 800124a:	2310      	movs	r3, #16
 800124c:	e008      	b.n	8001260 <RCC_GetPCLK1Value+0xdc>
 800124e:	2300      	movs	r3, #0
 8001250:	e006      	b.n	8001260 <RCC_GetPCLK1Value+0xdc>
 8001252:	2308      	movs	r3, #8
 8001254:	e004      	b.n	8001260 <RCC_GetPCLK1Value+0xdc>
 8001256:	2304      	movs	r3, #4
 8001258:	e002      	b.n	8001260 <RCC_GetPCLK1Value+0xdc>
 800125a:	2302      	movs	r3, #2
 800125c:	e000      	b.n	8001260 <RCC_GetPCLK1Value+0xdc>
 800125e:	2301      	movs	r3, #1
 8001260:	fb92 f3f3 	sdiv	r3, r2, r3
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	e052      	b.n	800130e <RCC_GetPCLK1Value+0x18a>
	}else if (clkValue == 1){
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d14f      	bne.n	800130e <RCC_GetPCLK1Value+0x18a>
		pclk1 = (8000000 / AHB_PRESCALER(ahbPres)) / APB1_PRESCALER(apb1Pres);
 800126e:	78bb      	ldrb	r3, [r7, #2]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d02b      	beq.n	80012cc <RCC_GetPCLK1Value+0x148>
 8001274:	78bb      	ldrb	r3, [r7, #2]
 8001276:	2b08      	cmp	r3, #8
 8001278:	d026      	beq.n	80012c8 <RCC_GetPCLK1Value+0x144>
 800127a:	78bb      	ldrb	r3, [r7, #2]
 800127c:	2b09      	cmp	r3, #9
 800127e:	d021      	beq.n	80012c4 <RCC_GetPCLK1Value+0x140>
 8001280:	78bb      	ldrb	r3, [r7, #2]
 8001282:	2b0a      	cmp	r3, #10
 8001284:	d01c      	beq.n	80012c0 <RCC_GetPCLK1Value+0x13c>
 8001286:	78bb      	ldrb	r3, [r7, #2]
 8001288:	2b0b      	cmp	r3, #11
 800128a:	d017      	beq.n	80012bc <RCC_GetPCLK1Value+0x138>
 800128c:	78bb      	ldrb	r3, [r7, #2]
 800128e:	2b0c      	cmp	r3, #12
 8001290:	d012      	beq.n	80012b8 <RCC_GetPCLK1Value+0x134>
 8001292:	78bb      	ldrb	r3, [r7, #2]
 8001294:	2b0d      	cmp	r3, #13
 8001296:	d00d      	beq.n	80012b4 <RCC_GetPCLK1Value+0x130>
 8001298:	78bb      	ldrb	r3, [r7, #2]
 800129a:	2b0e      	cmp	r3, #14
 800129c:	d007      	beq.n	80012ae <RCC_GetPCLK1Value+0x12a>
 800129e:	78bb      	ldrb	r3, [r7, #2]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d102      	bne.n	80012aa <RCC_GetPCLK1Value+0x126>
 80012a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a8:	e011      	b.n	80012ce <RCC_GetPCLK1Value+0x14a>
 80012aa:	2300      	movs	r3, #0
 80012ac:	e00f      	b.n	80012ce <RCC_GetPCLK1Value+0x14a>
 80012ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b2:	e00c      	b.n	80012ce <RCC_GetPCLK1Value+0x14a>
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	e00a      	b.n	80012ce <RCC_GetPCLK1Value+0x14a>
 80012b8:	2340      	movs	r3, #64	; 0x40
 80012ba:	e008      	b.n	80012ce <RCC_GetPCLK1Value+0x14a>
 80012bc:	2310      	movs	r3, #16
 80012be:	e006      	b.n	80012ce <RCC_GetPCLK1Value+0x14a>
 80012c0:	2308      	movs	r3, #8
 80012c2:	e004      	b.n	80012ce <RCC_GetPCLK1Value+0x14a>
 80012c4:	2304      	movs	r3, #4
 80012c6:	e002      	b.n	80012ce <RCC_GetPCLK1Value+0x14a>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e000      	b.n	80012ce <RCC_GetPCLK1Value+0x14a>
 80012cc:	2301      	movs	r3, #1
 80012ce:	4a15      	ldr	r2, [pc, #84]	; (8001324 <RCC_GetPCLK1Value+0x1a0>)
 80012d0:	fb92 f2f3 	sdiv	r2, r2, r3
 80012d4:	787b      	ldrb	r3, [r7, #1]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d015      	beq.n	8001306 <RCC_GetPCLK1Value+0x182>
 80012da:	787b      	ldrb	r3, [r7, #1]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d010      	beq.n	8001302 <RCC_GetPCLK1Value+0x17e>
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b05      	cmp	r3, #5
 80012e4:	d00b      	beq.n	80012fe <RCC_GetPCLK1Value+0x17a>
 80012e6:	787b      	ldrb	r3, [r7, #1]
 80012e8:	2b06      	cmp	r3, #6
 80012ea:	d006      	beq.n	80012fa <RCC_GetPCLK1Value+0x176>
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	2b07      	cmp	r3, #7
 80012f0:	d101      	bne.n	80012f6 <RCC_GetPCLK1Value+0x172>
 80012f2:	2310      	movs	r3, #16
 80012f4:	e008      	b.n	8001308 <RCC_GetPCLK1Value+0x184>
 80012f6:	2300      	movs	r3, #0
 80012f8:	e006      	b.n	8001308 <RCC_GetPCLK1Value+0x184>
 80012fa:	2308      	movs	r3, #8
 80012fc:	e004      	b.n	8001308 <RCC_GetPCLK1Value+0x184>
 80012fe:	2304      	movs	r3, #4
 8001300:	e002      	b.n	8001308 <RCC_GetPCLK1Value+0x184>
 8001302:	2302      	movs	r3, #2
 8001304:	e000      	b.n	8001308 <RCC_GetPCLK1Value+0x184>
 8001306:	2301      	movs	r3, #1
 8001308:	fb92 f3f3 	sdiv	r3, r2, r3
 800130c:	607b      	str	r3, [r7, #4]
	}else if (clkValue == 2){
		// PLL function not implemented
	}

	return pclk1;
 800130e:	687b      	ldr	r3, [r7, #4]
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	00f42400 	.word	0x00f42400
 8001324:	007a1200 	.word	0x007a1200

08001328 <I2C_Init>:
 * @return 			- none
 *
 * @Note			- none
 */

void I2C_Init(I2C_Handle_t *pI2CHandle){
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

	// Enable the clock for I2C peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2101      	movs	r1, #1
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fecc 	bl	80010d4 <I2C_PeriClockControl>

	// Configure the ACK control
	pI2CHandle->pI2Cx->CR[0] |= (pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7a5b      	ldrb	r3, [r3, #9]
 8001346:	029b      	lsls	r3, r3, #10
 8001348:	4619      	mov	r1, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	601a      	str	r2, [r3, #0]

	// Configure the frequency of the used clock
	uint32_t freq = RCC_GetPCLK1Value() / 1000000U;
 8001352:	f7ff ff17 	bl	8001184 <RCC_GetPCLK1Value>
 8001356:	4603      	mov	r3, r0
 8001358:	4a51      	ldr	r2, [pc, #324]	; (80014a0 <I2C_Init+0x178>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	0c9b      	lsrs	r3, r3, #18
 8001360:	61bb      	str	r3, [r7, #24]
	pI2CHandle->pI2Cx->CR[1] |= ( freq << I2C_CR2_FREQ);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6859      	ldr	r1, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	430a      	orrs	r2, r1
 8001370:	605a      	str	r2, [r3, #4]

	// Program the device own address
	pI2CHandle->pI2Cx->OAR[0] |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << I2C_OAR_ADD);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7a1b      	ldrb	r3, [r3, #8]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4619      	mov	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	609a      	str	r2, [r3, #8]
	// RM indicate to keep this bit at 1
	pI2CHandle->pI2Cx->OAR[0] |= (1 << 14);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001396:	609a      	str	r2, [r3, #8]

	// CCR calculation
	uint16_t ccrValue = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	83fb      	strh	r3, [r7, #30]
	uint32_t fpclk = RCC_GetPCLK1Value();
 800139c:	f7ff fef2 	bl	8001184 <RCC_GetPCLK1Value>
 80013a0:	6178      	str	r0, [r7, #20]
	uint32_t fscl = pI2CHandle->I2C_Config.I2C_SCLSpeed;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	613b      	str	r3, [r7, #16]
	uint8_t dutyCycle = pI2CHandle->I2C_Config.I2C_FMDutyCycle;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7a9b      	ldrb	r3, [r3, #10]
 80013ac:	73fb      	strb	r3, [r7, #15]

	if (fscl <= I2C_SCL_SPEED_SM){
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4a3c      	ldr	r2, [pc, #240]	; (80014a4 <I2C_Init+0x17c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d806      	bhi.n	80013c4 <I2C_Init+0x9c>
		ccrValue = (uint16_t) (fpclk / (2 * fscl));
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c0:	83fb      	strh	r3, [r7, #30]
 80013c2:	e02a      	b.n	800141a <I2C_Init+0xf2>
	}else {
		pI2CHandle->pI2Cx->CCR |= (1 << I2C_CCR_FS);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	69da      	ldr	r2, [r3, #28]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013d2:	61da      	str	r2, [r3, #28]
		pI2CHandle->pI2Cx->CCR |= (dutyCycle << I2C_CCR_DUTY);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	69da      	ldr	r2, [r3, #28]
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	039b      	lsls	r3, r3, #14
 80013de:	4619      	mov	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	61da      	str	r2, [r3, #28]
		if (dutyCycle == I2C_FM_DUTY_2){
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d108      	bne.n	8001400 <I2C_Init+0xd8>
			ccrValue = fpclk / (3 * fscl);
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fc:	83fb      	strh	r3, [r7, #30]
 80013fe:	e00c      	b.n	800141a <I2C_Init+0xf2>
		}else if (dutyCycle == I2C_FM_DUTY_16_9){
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d109      	bne.n	800141a <I2C_Init+0xf2>
			ccrValue = fpclk / (25 * fscl);
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	009a      	lsls	r2, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	fbb2 f3f3 	udiv	r3, r2, r3
 8001418:	83fb      	strh	r3, [r7, #30]
		}
	}
	pI2CHandle->pI2Cx->CCR |= (ccrValue << I2C_CCR);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	69d9      	ldr	r1, [r3, #28]
 8001420:	8bfa      	ldrh	r2, [r7, #30]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	61da      	str	r2, [r3, #28]

	// Trise calculation
	uint8_t trise = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	777b      	strb	r3, [r7, #29]
	if (fscl <= I2C_SCL_SPEED_SM){
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <I2C_Init+0x17c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d804      	bhi.n	8001440 <I2C_Init+0x118>
		//trise = (uint8_t) ((1 / (1/freq)) + 1);
		trise = (uint8_t) (freq + 1);
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	3301      	adds	r3, #1
 800143c:	777b      	strb	r3, [r7, #29]
 800143e:	e01e      	b.n	800147e <I2C_Init+0x156>
	}else {
		trise = (0.3 / (1/freq)) + 1;
 8001440:	2201      	movs	r2, #1
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	fbb2 f3f3 	udiv	r3, r2, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f817 	bl	800047c <__aeabi_ui2d>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	a111      	add	r1, pc, #68	; (adr r1, 8001498 <I2C_Init+0x170>)
 8001454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001458:	f7ff f9b4 	bl	80007c4 <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <I2C_Init+0x180>)
 800146a:	f7fe fecb 	bl	8000204 <__adddf3>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fa8d 	bl	8000994 <__aeabi_d2uiz>
 800147a:	4603      	mov	r3, r0
 800147c:	777b      	strb	r3, [r7, #29]
	}
	pI2CHandle->pI2Cx->TRISE = (trise & 0x3F);
 800147e:	7f7a      	ldrb	r2, [r7, #29]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001488:	621a      	str	r2, [r3, #32]



}
 800148a:	bf00      	nop
 800148c:	3720      	adds	r7, #32
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	f3af 8000 	nop.w
 8001498:	33333333 	.word	0x33333333
 800149c:	3fd33333 	.word	0x3fd33333
 80014a0:	431bde83 	.word	0x431bde83
 80014a4:	000186a0 	.word	0x000186a0
 80014a8:	3ff00000 	.word	0x3ff00000

080014ac <I2C_GetFlagStatus>:
 *
 * @Note			-
 *
 */

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]

	uint8_t value;
	(pI2Cx->SR[0] & FlagName) ? (value = FLAG_SET) : (value = FLAG_RESET);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <I2C_GetFlagStatus+0x1c>
 80014c2:	2301      	movs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	e001      	b.n	80014cc <I2C_GetFlagStatus+0x20>
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]
	return value;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <I2C_MasterSendData>:
 *
 * @Note			-
 *
 */

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	70fb      	strb	r3, [r7, #3]

	// 1. Generate the Start condition
	I2C_START_CONDITION(pI2CHandle->pI2Cx);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014f4:	601a      	str	r2, [r3, #0]
	//I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

	// 2.Confirm that start generation is completed by checking the SB flag i the SR1
	// 		Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG) );
 80014f6:	bf00      	nop
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2101      	movs	r1, #1
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ffd4 	bl	80014ac <I2C_GetFlagStatus>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f6      	beq.n	80014f8 <I2C_MasterSendData+0x20>

	// 3. Send the address of the slave with the r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr, MASTER_WRITE);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	78f9      	ldrb	r1, [r7, #3]
 8001510:	2200      	movs	r2, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fdad 	bl	8001072 <I2C_ExecuteAddressPhase>

	// 4. Confirm that the address phase is completed by checking the ADDR flag in the SR1
	while( !I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG) );
 8001518:	bf00      	nop
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2102      	movs	r1, #2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ffc3 	bl	80014ac <I2C_GetFlagStatus>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f6      	beq.n	800151a <I2C_MasterSendData+0x42>

	// 5. Clear the ADDR flag according to its software sequence
	//		Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fdc0 	bl	80010b6 <I2C_ClearADDRFlag>

	//6. Send data until lenght becomes 0
	while(Len){
 8001536:	e014      	b.n	8001562 <I2C_MasterSendData+0x8a>
		while( !I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG) );
 8001538:	bf00      	nop
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2180      	movs	r1, #128	; 0x80
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ffb3 	bl	80014ac <I2C_GetFlagStatus>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f6      	beq.n	800153a <I2C_MasterSendData+0x62>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	781a      	ldrb	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	3301      	adds	r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
		Len--;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
	while(Len){
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1e7      	bne.n	8001538 <I2C_MasterSendData+0x60>
	}

	// 7. When Len becomes 0 wait for TxE=1 and BTF=1 before generating the STOP condition
	//		Note: TxE=1 and BTF=1 means that both SR and DR are empty and next transmission should begin
	//		when BTF=1 SCL will be stretched (pulled to LOW)
	while( !I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG));
 8001568:	bf00      	nop
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2180      	movs	r1, #128	; 0x80
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff9b 	bl	80014ac <I2C_GetFlagStatus>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f6      	beq.n	800156a <I2C_MasterSendData+0x92>
	while( !I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG));
 800157c:	bf00      	nop
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2104      	movs	r1, #4
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff91 	bl	80014ac <I2C_GetFlagStatus>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f6      	beq.n	800157e <I2C_MasterSendData+0xa6>

	// 8. Generate the STOP condition and master need not to wait for completion of stop condition
	// 		Note: Generating STOP, automatically clears the BTF
	if (Sr == I2C_DISABLE_SR){
 8001590:	7e3b      	ldrb	r3, [r7, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d107      	bne.n	80015a6 <I2C_MasterSendData+0xce>
		I2C_STOP_CONDITION(pI2CHandle->pI2Cx);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015a4:	601a      	str	r2, [r3, #0]
	}



}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <__libc_init_array>:
 80015b0:	b570      	push	{r4, r5, r6, lr}
 80015b2:	4d0d      	ldr	r5, [pc, #52]	; (80015e8 <__libc_init_array+0x38>)
 80015b4:	4c0d      	ldr	r4, [pc, #52]	; (80015ec <__libc_init_array+0x3c>)
 80015b6:	1b64      	subs	r4, r4, r5
 80015b8:	10a4      	asrs	r4, r4, #2
 80015ba:	2600      	movs	r6, #0
 80015bc:	42a6      	cmp	r6, r4
 80015be:	d109      	bne.n	80015d4 <__libc_init_array+0x24>
 80015c0:	4d0b      	ldr	r5, [pc, #44]	; (80015f0 <__libc_init_array+0x40>)
 80015c2:	4c0c      	ldr	r4, [pc, #48]	; (80015f4 <__libc_init_array+0x44>)
 80015c4:	f000 f818 	bl	80015f8 <_init>
 80015c8:	1b64      	subs	r4, r4, r5
 80015ca:	10a4      	asrs	r4, r4, #2
 80015cc:	2600      	movs	r6, #0
 80015ce:	42a6      	cmp	r6, r4
 80015d0:	d105      	bne.n	80015de <__libc_init_array+0x2e>
 80015d2:	bd70      	pop	{r4, r5, r6, pc}
 80015d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80015d8:	4798      	blx	r3
 80015da:	3601      	adds	r6, #1
 80015dc:	e7ee      	b.n	80015bc <__libc_init_array+0xc>
 80015de:	f855 3b04 	ldr.w	r3, [r5], #4
 80015e2:	4798      	blx	r3
 80015e4:	3601      	adds	r6, #1
 80015e6:	e7f2      	b.n	80015ce <__libc_init_array+0x1e>
 80015e8:	08001610 	.word	0x08001610
 80015ec:	08001610 	.word	0x08001610
 80015f0:	08001610 	.word	0x08001610
 80015f4:	08001614 	.word	0x08001614

080015f8 <_init>:
 80015f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fa:	bf00      	nop
 80015fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015fe:	bc08      	pop	{r3}
 8001600:	469e      	mov	lr, r3
 8001602:	4770      	bx	lr

08001604 <_fini>:
 8001604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001606:	bf00      	nop
 8001608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800160a:	bc08      	pop	{r3}
 800160c:	469e      	mov	lr, r3
 800160e:	4770      	bx	lr
