
tutor_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e40  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08001ff0  08001ff0  00011ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002094  08002094  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002094  08002094  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002094  08002094  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002094  08002094  00012094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002098  08002098  00012098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800209c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000078  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000244d  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008c3  00000000  00000000  000224ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002c0  00000000  00000000  00022db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000258  00000000  00000000  00023078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000213a  00000000  00000000  000232d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000ca2  00000000  00000000  0002540a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000260ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001228  00000000  00000000  000260fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001fd8 	.word	0x08001fd8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08001fd8 	.word	0x08001fd8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:
#define MY_ADDR 0x61;

#define SLAVE_ADDR  0x68

void delay(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	0003d08f 	.word	0x0003d08f

080002bc <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <I2C1_GPIOInits+0x40>)
 80002c4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002c6:	2302      	movs	r3, #2
 80002c8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002ca:	2301      	movs	r3, #1
 80002cc:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002ce:	2301      	movs	r3, #1
 80002d0:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002d2:	2304      	movs	r3, #4
 80002d4:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002d6:	2302      	movs	r3, #2
 80002d8:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002da:	2306      	movs	r3, #6
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fa09 	bl	80006f8 <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002e6:	2307      	movs	r3, #7
 80002e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fa03 	bl	80006f8 <GPIO_Init>


}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40020400 	.word	0x40020400

08000300 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <I2C1_Inits+0x2c>)
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <I2C1_Inits+0x30>)
 8000308:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <I2C1_Inits+0x2c>)
 800030c:	2201      	movs	r2, #1
 800030e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <I2C1_Inits+0x2c>)
 8000312:	2261      	movs	r2, #97	; 0x61
 8000314:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <I2C1_Inits+0x2c>)
 8000318:	2200      	movs	r2, #0
 800031a:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <I2C1_Inits+0x2c>)
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <I2C1_Inits+0x34>)
 8000320:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000322:	4802      	ldr	r0, [pc, #8]	; (800032c <I2C1_Inits+0x2c>)
 8000324:	f000 fc6a 	bl	8000bfc <I2C_Init>

}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000094 	.word	0x20000094
 8000330:	40005400 	.word	0x40005400
 8000334:	000186a0 	.word	0x000186a0

08000338 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <GPIO_ButtonInit+0x2c>)
 8000340:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000342:	2300      	movs	r3, #0
 8000344:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000346:	2300      	movs	r3, #0
 8000348:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800034a:	2302      	movs	r3, #2
 800034c:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800034e:	2300      	movs	r3, #0
 8000350:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f000 f9cf 	bl	80006f8 <GPIO_Init>

}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40020000 	.word	0x40020000

08000368 <main>:


int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af02      	add	r7, sp, #8

	//initialise_monitor_handles();

	//printf("Application is running\n");

	GPIO_ButtonInit();
 800036e:	f7ff ffe3 	bl	8000338 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 8000372:	f7ff ffa3 	bl	80002bc <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 8000376:	f7ff ffc3 	bl	8000300 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 800037a:	2101      	movs	r1, #1
 800037c:	481f      	ldr	r0, [pc, #124]	; (80003fc <main+0x94>)
 800037e:	f000 fbeb 	bl	8000b58 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 8000382:	2101      	movs	r1, #1
 8000384:	481d      	ldr	r0, [pc, #116]	; (80003fc <main+0x94>)
 8000386:	f000 fdf3 	bl	8000f70 <I2C_ManageAcking>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800038a:	bf00      	nop
 800038c:	2100      	movs	r1, #0
 800038e:	481c      	ldr	r0, [pc, #112]	; (8000400 <main+0x98>)
 8000390:	f000 fb4e 	bl	8000a30 <GPIO_ReadFromInputPin>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f8      	beq.n	800038c <main+0x24>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800039a:	f7ff ff79 	bl	8000290 <delay>

		commandcode = 0x51;
 800039e:	2351      	movs	r3, #81	; 0x51
 80003a0:	71fb      	strb	r3, [r7, #7]

		I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR);
 80003a2:	1df9      	adds	r1, r7, #7
 80003a4:	2301      	movs	r3, #1
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	2368      	movs	r3, #104	; 0x68
 80003aa:	2201      	movs	r2, #1
 80003ac:	4815      	ldr	r0, [pc, #84]	; (8000404 <main+0x9c>)
 80003ae:	f000 fcea 	bl	8000d86 <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle,&len,1,SLAVE_ADDR,I2C_ENABLE_SR);
 80003b2:	1db9      	adds	r1, r7, #6
 80003b4:	2301      	movs	r3, #1
 80003b6:	9300      	str	r3, [sp, #0]
 80003b8:	2368      	movs	r3, #104	; 0x68
 80003ba:	2201      	movs	r2, #1
 80003bc:	4811      	ldr	r0, [pc, #68]	; (8000404 <main+0x9c>)
 80003be:	f000 fd45 	bl	8000e4c <I2C_MasterReceiveData>

		commandcode = 0x52;
 80003c2:	2352      	movs	r3, #82	; 0x52
 80003c4:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR);
 80003c6:	1df9      	adds	r1, r7, #7
 80003c8:	2301      	movs	r3, #1
 80003ca:	9300      	str	r3, [sp, #0]
 80003cc:	2368      	movs	r3, #104	; 0x68
 80003ce:	2201      	movs	r2, #1
 80003d0:	480c      	ldr	r0, [pc, #48]	; (8000404 <main+0x9c>)
 80003d2:	f000 fcd8 	bl	8000d86 <I2C_MasterSendData>


		I2C_MasterReceiveData(&I2C1Handle,rcv_buf,len,SLAVE_ADDR,I2C_DISABLE_SR);
 80003d6:	79ba      	ldrb	r2, [r7, #6]
 80003d8:	2300      	movs	r3, #0
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	2368      	movs	r3, #104	; 0x68
 80003de:	490a      	ldr	r1, [pc, #40]	; (8000408 <main+0xa0>)
 80003e0:	4808      	ldr	r0, [pc, #32]	; (8000404 <main+0x9c>)
 80003e2:	f000 fd33 	bl	8000e4c <I2C_MasterReceiveData>

		rcv_buf[len+1] = '\0';
 80003e6:	79bb      	ldrb	r3, [r7, #6]
 80003e8:	3301      	adds	r3, #1
 80003ea:	4a07      	ldr	r2, [pc, #28]	; (8000408 <main+0xa0>)
 80003ec:	2100      	movs	r1, #0
 80003ee:	54d1      	strb	r1, [r2, r3]

		printf("Data : %s",rcv_buf);
 80003f0:	4905      	ldr	r1, [pc, #20]	; (8000408 <main+0xa0>)
 80003f2:	4806      	ldr	r0, [pc, #24]	; (800040c <main+0xa4>)
 80003f4:	f000 fe6a 	bl	80010cc <iprintf>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80003f8:	e7c7      	b.n	800038a <main+0x22>
 80003fa:	bf00      	nop
 80003fc:	40005400 	.word	0x40005400
 8000400:	40020000 	.word	0x40020000
 8000404:	20000094 	.word	0x20000094
 8000408:	200000bc 	.word	0x200000bc
 800040c:	08001ff0 	.word	0x08001ff0

08000410 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <ITM_SendChar+0x44>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <ITM_SendChar+0x44>)
 8000420:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000424:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <ITM_SendChar+0x48>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <ITM_SendChar+0x48>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000432:	bf00      	nop
 8000434:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	2b00      	cmp	r3, #0
 8000440:	d0f8      	beq.n	8000434 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000442:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	6013      	str	r3, [r2, #0]
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	e000edfc 	.word	0xe000edfc
 8000458:	e0000e00 	.word	0xe0000e00

0800045c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	e00a      	b.n	8000484 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800046e:	f3af 8000 	nop.w
 8000472:	4601      	mov	r1, r0
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	60ba      	str	r2, [r7, #8]
 800047a:	b2ca      	uxtb	r2, r1
 800047c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	3301      	adds	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	697a      	ldr	r2, [r7, #20]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	429a      	cmp	r2, r3
 800048a:	dbf0      	blt.n	800046e <_read+0x12>
  }

  return len;
 800048c:	687b      	ldr	r3, [r7, #4]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	b086      	sub	sp, #24
 800049a:	af00      	add	r7, sp, #0
 800049c:	60f8      	str	r0, [r7, #12]
 800049e:	60b9      	str	r1, [r7, #8]
 80004a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
 80004a6:	e009      	b.n	80004bc <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	1c5a      	adds	r2, r3, #1
 80004ac:	60ba      	str	r2, [r7, #8]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff ffad 	bl	8000410 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	3301      	adds	r3, #1
 80004ba:	617b      	str	r3, [r7, #20]
 80004bc:	697a      	ldr	r2, [r7, #20]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	dbf1      	blt.n	80004a8 <_write+0x12>
  }
  return len;
 80004c4:	687b      	ldr	r3, [r7, #4]
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3718      	adds	r7, #24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <_close>:

int _close(int file)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004da:	4618      	mov	r0, r3
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004f4:	605a      	str	r2, [r3, #4]
  return 0;
 80004f6:	2300      	movs	r3, #0
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <_isatty>:

int _isatty(int file)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800050a:	2301      	movs	r3, #1
}
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr

08000516 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000516:	b480      	push	{r7}
 8000518:	b085      	sub	sp, #20
 800051a:	af00      	add	r7, sp, #0
 800051c:	60f8      	str	r0, [r7, #12]
 800051e:	60b9      	str	r1, [r7, #8]
 8000520:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000522:	2300      	movs	r3, #0
}
 8000524:	4618      	mov	r0, r3
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
	...

08000530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000538:	4a14      	ldr	r2, [pc, #80]	; (800058c <_sbrk+0x5c>)
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <_sbrk+0x60>)
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <_sbrk+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d102      	bne.n	8000552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <_sbrk+0x64>)
 800054e:	4a12      	ldr	r2, [pc, #72]	; (8000598 <_sbrk+0x68>)
 8000550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <_sbrk+0x64>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	693a      	ldr	r2, [r7, #16]
 800055c:	429a      	cmp	r2, r3
 800055e:	d207      	bcs.n	8000570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000560:	f000 fd82 	bl	8001068 <__errno>
 8000564:	4603      	mov	r3, r0
 8000566:	220c      	movs	r2, #12
 8000568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	e009      	b.n	8000584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <_sbrk+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <_sbrk+0x64>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <_sbrk+0x64>)
 8000580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20020000 	.word	0x20020000
 8000590:	00000400 	.word	0x00000400
 8000594:	200000dc 	.word	0x200000dc
 8000598:	200000f0 	.word	0x200000f0

0800059c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800059e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a6:	490d      	ldr	r1, [pc, #52]	; (80005dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a8:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <LoopForever+0xe>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005bc:	4c0a      	ldr	r4, [pc, #40]	; (80005e8 <LoopForever+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ca:	f000 fd53 	bl	8001074 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ce:	f7ff fecb 	bl	8000368 <main>

080005d2 <LoopForever>:

LoopForever:
  b LoopForever
 80005d2:	e7fe      	b.n	80005d2 <LoopForever>
  ldr   r0, =_estack
 80005d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80005e0:	0800209c 	.word	0x0800209c
  ldr r2, =_sbss
 80005e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80005e8:	200000f0 	.word	0x200000f0

080005ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC_IRQHandler>
	...

080005f0 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d161      	bne.n	80006c6 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a32      	ldr	r2, [pc, #200]	; (80006d0 <GPIO_PeriClockControl+0xe0>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a31      	ldr	r2, [pc, #196]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 8000616:	e056      	b.n	80006c6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a2f      	ldr	r2, [pc, #188]	; (80006d8 <GPIO_PeriClockControl+0xe8>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	4a2b      	ldr	r2, [pc, #172]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 8000626:	f043 0302 	orr.w	r3, r3, #2
 800062a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800062c:	e04b      	b.n	80006c6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a2a      	ldr	r2, [pc, #168]	; (80006dc <GPIO_PeriClockControl+0xec>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d106      	bne.n	8000644 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000636:	4b27      	ldr	r3, [pc, #156]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a26      	ldr	r2, [pc, #152]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000642:	e040      	b.n	80006c6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <GPIO_PeriClockControl+0xf0>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d106      	bne.n	800065a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800064c:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	4a20      	ldr	r2, [pc, #128]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 8000652:	f043 0308 	orr.w	r3, r3, #8
 8000656:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000658:	e035      	b.n	80006c6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <GPIO_PeriClockControl+0xf4>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d106      	bne.n	8000670 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000662:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 8000668:	f043 0310 	orr.w	r3, r3, #16
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800066e:	e02a      	b.n	80006c6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <GPIO_PeriClockControl+0xf8>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d106      	bne.n	8000686 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 800067e:	f043 0320 	orr.w	r3, r3, #32
 8000682:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000684:	e01f      	b.n	80006c6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a18      	ldr	r2, [pc, #96]	; (80006ec <GPIO_PeriClockControl+0xfc>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d106      	bne.n	800069c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 8000694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
}
 800069a:	e014      	b.n	80006c6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <GPIO_PeriClockControl+0x100>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d106      	bne.n	80006b2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 80006aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006b0:	e009      	b.n	80006c6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <GPIO_PeriClockControl+0x104>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d105      	bne.n	80006c6 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <GPIO_PeriClockControl+0xe4>)
 80006c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	40020000 	.word	0x40020000
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020400 	.word	0x40020400
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40021400 	.word	0x40021400
 80006ec:	40021800 	.word	0x40021800
 80006f0:	40021c00 	.word	0x40021c00
 80006f4:	40022000 	.word	0x40022000

080006f8 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2101      	movs	r1, #1
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff70 	bl	80005f0 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	795b      	ldrb	r3, [r3, #5]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d820      	bhi.n	800075a <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	795b      	ldrb	r3, [r3, #5]
 800071c:	461a      	mov	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	fa02 f303 	lsl.w	r3, r2, r3
 8000728:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	2103      	movs	r1, #3
 8000738:	fa01 f303 	lsl.w	r3, r1, r3
 800073c:	43db      	mvns	r3, r3
 800073e:	4619      	mov	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	400a      	ands	r2, r1
 8000746:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	6819      	ldr	r1, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	697a      	ldr	r2, [r7, #20]
 8000754:	430a      	orrs	r2, r1
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	e0cb      	b.n	80008f2 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	795b      	ldrb	r3, [r3, #5]
 800075e:	2b04      	cmp	r3, #4
 8000760:	d117      	bne.n	8000792 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000762:	4b4b      	ldr	r3, [pc, #300]	; (8000890 <GPIO_Init+0x198>)
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	7912      	ldrb	r2, [r2, #4]
 800076a:	4611      	mov	r1, r2
 800076c:	2201      	movs	r2, #1
 800076e:	408a      	lsls	r2, r1
 8000770:	4611      	mov	r1, r2
 8000772:	4a47      	ldr	r2, [pc, #284]	; (8000890 <GPIO_Init+0x198>)
 8000774:	430b      	orrs	r3, r1
 8000776:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000778:	4b45      	ldr	r3, [pc, #276]	; (8000890 <GPIO_Init+0x198>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	7912      	ldrb	r2, [r2, #4]
 8000780:	4611      	mov	r1, r2
 8000782:	2201      	movs	r2, #1
 8000784:	408a      	lsls	r2, r1
 8000786:	43d2      	mvns	r2, r2
 8000788:	4611      	mov	r1, r2
 800078a:	4a41      	ldr	r2, [pc, #260]	; (8000890 <GPIO_Init+0x198>)
 800078c:	400b      	ands	r3, r1
 800078e:	6093      	str	r3, [r2, #8]
 8000790:	e035      	b.n	80007fe <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	795b      	ldrb	r3, [r3, #5]
 8000796:	2b05      	cmp	r3, #5
 8000798:	d117      	bne.n	80007ca <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800079a:	4b3d      	ldr	r3, [pc, #244]	; (8000890 <GPIO_Init+0x198>)
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	7912      	ldrb	r2, [r2, #4]
 80007a2:	4611      	mov	r1, r2
 80007a4:	2201      	movs	r2, #1
 80007a6:	408a      	lsls	r2, r1
 80007a8:	4611      	mov	r1, r2
 80007aa:	4a39      	ldr	r2, [pc, #228]	; (8000890 <GPIO_Init+0x198>)
 80007ac:	430b      	orrs	r3, r1
 80007ae:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007b0:	4b37      	ldr	r3, [pc, #220]	; (8000890 <GPIO_Init+0x198>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	7912      	ldrb	r2, [r2, #4]
 80007b8:	4611      	mov	r1, r2
 80007ba:	2201      	movs	r2, #1
 80007bc:	408a      	lsls	r2, r1
 80007be:	43d2      	mvns	r2, r2
 80007c0:	4611      	mov	r1, r2
 80007c2:	4a33      	ldr	r2, [pc, #204]	; (8000890 <GPIO_Init+0x198>)
 80007c4:	400b      	ands	r3, r1
 80007c6:	60d3      	str	r3, [r2, #12]
 80007c8:	e019      	b.n	80007fe <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	795b      	ldrb	r3, [r3, #5]
 80007ce:	2b06      	cmp	r3, #6
 80007d0:	d115      	bne.n	80007fe <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d2:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <GPIO_Init+0x198>)
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	7912      	ldrb	r2, [r2, #4]
 80007da:	4611      	mov	r1, r2
 80007dc:	2201      	movs	r2, #1
 80007de:	408a      	lsls	r2, r1
 80007e0:	4611      	mov	r1, r2
 80007e2:	4a2b      	ldr	r2, [pc, #172]	; (8000890 <GPIO_Init+0x198>)
 80007e4:	430b      	orrs	r3, r1
 80007e6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007e8:	4b29      	ldr	r3, [pc, #164]	; (8000890 <GPIO_Init+0x198>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	7912      	ldrb	r2, [r2, #4]
 80007f0:	4611      	mov	r1, r2
 80007f2:	2201      	movs	r2, #1
 80007f4:	408a      	lsls	r2, r1
 80007f6:	4611      	mov	r1, r2
 80007f8:	4a25      	ldr	r2, [pc, #148]	; (8000890 <GPIO_Init+0x198>)
 80007fa:	430b      	orrs	r3, r1
 80007fc:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	791b      	ldrb	r3, [r3, #4]
 8000802:	089b      	lsrs	r3, r3, #2
 8000804:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	f003 0303 	and.w	r3, r3, #3
 800080e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a1f      	ldr	r2, [pc, #124]	; (8000894 <GPIO_Init+0x19c>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d04e      	beq.n	80008b8 <GPIO_Init+0x1c0>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a1e      	ldr	r2, [pc, #120]	; (8000898 <GPIO_Init+0x1a0>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d032      	beq.n	800088a <GPIO_Init+0x192>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a1c      	ldr	r2, [pc, #112]	; (800089c <GPIO_Init+0x1a4>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d02b      	beq.n	8000886 <GPIO_Init+0x18e>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <GPIO_Init+0x1a8>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d024      	beq.n	8000882 <GPIO_Init+0x18a>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <GPIO_Init+0x1ac>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d01d      	beq.n	800087e <GPIO_Init+0x186>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a18      	ldr	r2, [pc, #96]	; (80008a8 <GPIO_Init+0x1b0>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d016      	beq.n	800087a <GPIO_Init+0x182>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a16      	ldr	r2, [pc, #88]	; (80008ac <GPIO_Init+0x1b4>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d00f      	beq.n	8000876 <GPIO_Init+0x17e>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <GPIO_Init+0x1b8>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d008      	beq.n	8000872 <GPIO_Init+0x17a>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <GPIO_Init+0x1bc>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d101      	bne.n	800086e <GPIO_Init+0x176>
 800086a:	2308      	movs	r3, #8
 800086c:	e025      	b.n	80008ba <GPIO_Init+0x1c2>
 800086e:	2300      	movs	r3, #0
 8000870:	e023      	b.n	80008ba <GPIO_Init+0x1c2>
 8000872:	2307      	movs	r3, #7
 8000874:	e021      	b.n	80008ba <GPIO_Init+0x1c2>
 8000876:	2306      	movs	r3, #6
 8000878:	e01f      	b.n	80008ba <GPIO_Init+0x1c2>
 800087a:	2305      	movs	r3, #5
 800087c:	e01d      	b.n	80008ba <GPIO_Init+0x1c2>
 800087e:	2304      	movs	r3, #4
 8000880:	e01b      	b.n	80008ba <GPIO_Init+0x1c2>
 8000882:	2303      	movs	r3, #3
 8000884:	e019      	b.n	80008ba <GPIO_Init+0x1c2>
 8000886:	2302      	movs	r3, #2
 8000888:	e017      	b.n	80008ba <GPIO_Init+0x1c2>
 800088a:	2301      	movs	r3, #1
 800088c:	e015      	b.n	80008ba <GPIO_Init+0x1c2>
 800088e:	bf00      	nop
 8000890:	40013c00 	.word	0x40013c00
 8000894:	40020000 	.word	0x40020000
 8000898:	40020400 	.word	0x40020400
 800089c:	40020800 	.word	0x40020800
 80008a0:	40020c00 	.word	0x40020c00
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40021400 	.word	0x40021400
 80008ac:	40021800 	.word	0x40021800
 80008b0:	40021c00 	.word	0x40021c00
 80008b4:	40022000 	.word	0x40022000
 80008b8:	2300      	movs	r3, #0
 80008ba:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80008bc:	4b59      	ldr	r3, [pc, #356]	; (8000a24 <GPIO_Init+0x32c>)
 80008be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c0:	4a58      	ldr	r2, [pc, #352]	; (8000a24 <GPIO_Init+0x32c>)
 80008c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c6:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80008c8:	7c7a      	ldrb	r2, [r7, #17]
 80008ca:	7cbb      	ldrb	r3, [r7, #18]
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	fa02 f103 	lsl.w	r1, r2, r3
 80008d2:	4a55      	ldr	r2, [pc, #340]	; (8000a28 <GPIO_Init+0x330>)
 80008d4:	7cfb      	ldrb	r3, [r7, #19]
 80008d6:	3302      	adds	r3, #2
 80008d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80008dc:	4b53      	ldr	r3, [pc, #332]	; (8000a2c <GPIO_Init+0x334>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	7912      	ldrb	r2, [r2, #4]
 80008e4:	4611      	mov	r1, r2
 80008e6:	2201      	movs	r2, #1
 80008e8:	408a      	lsls	r2, r1
 80008ea:	4611      	mov	r1, r2
 80008ec:	4a4f      	ldr	r2, [pc, #316]	; (8000a2c <GPIO_Init+0x334>)
 80008ee:	430b      	orrs	r3, r1
 80008f0:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	799b      	ldrb	r3, [r3, #6]
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	791b      	ldrb	r3, [r3, #4]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	791b      	ldrb	r3, [r3, #4]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	2103      	movs	r1, #3
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	4619      	mov	r1, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	400a      	ands	r2, r1
 8000920:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	6899      	ldr	r1, [r3, #8]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	430a      	orrs	r2, r1
 8000930:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	79db      	ldrb	r3, [r3, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	791b      	ldrb	r3, [r3, #4]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	68da      	ldr	r2, [r3, #12]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	791b      	ldrb	r3, [r3, #4]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	2103      	movs	r1, #3
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	4619      	mov	r1, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	400a      	ands	r2, r1
 8000960:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	68d9      	ldr	r1, [r3, #12]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	430a      	orrs	r2, r1
 8000970:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7a1b      	ldrb	r3, [r3, #8]
 8000976:	461a      	mov	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	791b      	ldrb	r3, [r3, #4]
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	685a      	ldr	r2, [r3, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	791b      	ldrb	r3, [r3, #4]
 800098c:	4619      	mov	r1, r3
 800098e:	2301      	movs	r3, #1
 8000990:	408b      	lsls	r3, r1
 8000992:	43db      	mvns	r3, r3
 8000994:	4619      	mov	r1, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	400a      	ands	r2, r1
 800099c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	6859      	ldr	r1, [r3, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	430a      	orrs	r2, r1
 80009ac:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	795b      	ldrb	r3, [r3, #5]
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d131      	bne.n	8000a1a <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	791b      	ldrb	r3, [r3, #4]
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	791b      	ldrb	r3, [r3, #4]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	7c3a      	ldrb	r2, [r7, #16]
 80009ce:	3208      	adds	r2, #8
 80009d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	220f      	movs	r2, #15
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	7c3a      	ldrb	r2, [r7, #16]
 80009e8:	4001      	ands	r1, r0
 80009ea:	3208      	adds	r2, #8
 80009ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	7c3a      	ldrb	r2, [r7, #16]
 80009f6:	3208      	adds	r2, #8
 80009f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	7a5b      	ldrb	r3, [r3, #9]
 8000a00:	461a      	mov	r2, r3
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	7c3a      	ldrb	r2, [r7, #16]
 8000a12:	4301      	orrs	r1, r0
 8000a14:	3208      	adds	r2, #8
 8000a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	40013c00 	.word	0x40013c00

08000a30 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	691a      	ldr	r2, [r3, #16]
 8000a40:	78fb      	ldrb	r3, [r7, #3]
 8000a42:	fa22 f303 	lsr.w	r3, r2, r3
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	73fb      	strb	r3, [r7, #15]

   return value;
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	601a      	str	r2, [r3, #0]
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000a84:	78fb      	ldrb	r3, [r7, #3]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000a8a:	78fb      	ldrb	r3, [r7, #3]
 8000a8c:	f023 0301 	bic.w	r3, r3, #1
 8000a90:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000a92:	78fa      	ldrb	r2, [r7, #3]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	611a      	str	r2, [r3, #16]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000ab4:	78fb      	ldrb	r3, [r7, #3]
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000abc:	78fa      	ldrb	r2, [r7, #3]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	611a      	str	r2, [r3, #16]
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d01f      	beq.n	8000b22 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	7f1b      	ldrb	r3, [r3, #28]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d112      	bne.n	8000b10 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a1b      	ldr	r3, [r3, #32]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d11f      	bne.n	8000b32 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fa39 	bl	8000f70 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 8000b0e:	e010      	b.n	8000b32 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	60fb      	str	r3, [r7, #12]
}
 8000b20:	e007      	b.n	8000b32 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	60fb      	str	r3, [r7, #12]
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	601a      	str	r2, [r3, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d106      	bne.n	8000b78 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f043 0201 	orr.w	r2, r3, #1
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000b76:	e005      	b.n	8000b84 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f023 0201 	bic.w	r2, r3, #1
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	601a      	str	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
	...

08000b90 <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000b9c:	78fb      	ldrb	r3, [r7, #3]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d11f      	bne.n	8000be2 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a11      	ldr	r2, [pc, #68]	; (8000bec <I2C_PeriClockControl+0x5c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d106      	bne.n	8000bb8 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <I2C_PeriClockControl+0x60>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <I2C_PeriClockControl+0x60>)
 8000bb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
	else
	{
		//TODO
	}

}
 8000bb6:	e014      	b.n	8000be2 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <I2C_PeriClockControl+0x64>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d106      	bne.n	8000bce <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <I2C_PeriClockControl+0x60>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <I2C_PeriClockControl+0x60>)
 8000bc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bca:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bcc:	e009      	b.n	8000be2 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a09      	ldr	r2, [pc, #36]	; (8000bf8 <I2C_PeriClockControl+0x68>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d105      	bne.n	8000be2 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <I2C_PeriClockControl+0x60>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <I2C_PeriClockControl+0x60>)
 8000bdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40005800 	.word	0x40005800
 8000bf8:	40005c00 	.word	0x40005c00

08000bfc <I2C_Init>:
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ffbe 	bl	8000b90 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	7a5b      	ldrb	r3, [r3, #9]
 8000c18:	029b      	lsls	r3, r3, #10
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000c2e:	f000 f9bb 	bl	8000fa8 <RCC_GetPCLK1Value>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a47      	ldr	r2, [pc, #284]	; (8000d54 <I2C_Init+0x158>)
 8000c36:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3a:	0c9b      	lsrs	r3, r3, #18
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c4c:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7a1b      	ldrb	r3, [r3, #8]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	461a      	mov	r2, r3
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c66:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	4a36      	ldr	r2, [pc, #216]	; (8000d58 <I2C_Init+0x15c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d80f      	bhi.n	8000ca2 <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000c82:	f000 f991 	bl	8000fa8 <RCC_GetPCLK1Value>
 8000c86:	4602      	mov	r2, r0
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000c94:	897b      	ldrh	r3, [r7, #10]
 8000c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	e02d      	b.n	8000cfe <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ca8:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7a9b      	ldrb	r3, [r3, #10]
 8000cae:	039b      	lsls	r3, r3, #14
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	7a9b      	ldrb	r3, [r3, #10]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10b      	bne.n	8000cd8 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000cc0:	f000 f972 	bl	8000fa8 <RCC_GetPCLK1Value>
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	4413      	add	r3, r2
 8000cd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cd4:	817b      	strh	r3, [r7, #10]
 8000cd6:	e00c      	b.n	8000cf2 <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000cd8:	f000 f966 	bl	8000fa8 <RCC_GetPCLK1Value>
 8000cdc:	4601      	mov	r1, r0
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4413      	add	r3, r2
 8000ce8:	009a      	lsls	r2, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cf0:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000cf2:	897b      	ldrh	r3, [r7, #10]
 8000cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <I2C_Init+0x15c>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d809      	bhi.n	8000d24 <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000d10:	f000 f94a 	bl	8000fa8 <RCC_GetPCLK1Value>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <I2C_Init+0x158>)
 8000d18:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1c:	0c9b      	lsrs	r3, r3, #18
 8000d1e:	3301      	adds	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	e00d      	b.n	8000d40 <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000d24:	f000 f940 	bl	8000fa8 <RCC_GetPCLK1Value>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d2e:	fb02 f303 	mul.w	r3, r2, r3
 8000d32:	0a5b      	lsrs	r3, r3, #9
 8000d34:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <I2C_Init+0x160>)
 8000d36:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3a:	09db      	lsrs	r3, r3, #7
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d4a:	621a      	str	r2, [r3, #32]

}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	431bde83 	.word	0x431bde83
 8000d58:	000186a0 	.word	0x000186a0
 8000d5c:	00044b83 	.word	0x00044b83

08000d60 <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	695a      	ldr	r2, [r3, #20]
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	4013      	ands	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e000      	b.n	8000d7c <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr

08000d86 <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe5e 	bl	8000a5a <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000d9e:	bf00      	nop
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2101      	movs	r1, #1
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ffda 	bl	8000d60 <I2C_GetFlagStatus>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0f6      	beq.n	8000da0 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	78fa      	ldrb	r2, [r7, #3]
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fe5c 	bl	8000a78 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000dc0:	bf00      	nop
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ffc9 	bl	8000d60 <I2C_GetFlagStatus>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0f6      	beq.n	8000dc2 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000dd4:	68f8      	ldr	r0, [r7, #12]
 8000dd6:	f7ff fe79 	bl	8000acc <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8000dda:	e014      	b.n	8000e06 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8000ddc:	bf00      	nop
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2180      	movs	r1, #128	; 0x80
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ffbb 	bl	8000d60 <I2C_GetFlagStatus>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0f6      	beq.n	8000dde <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	781a      	ldrb	r2, [r3, #0]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
		Len--;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1e7      	bne.n	8000ddc <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8000e0c:	bf00      	nop
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2180      	movs	r1, #128	; 0x80
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ffa3 	bl	8000d60 <I2C_GetFlagStatus>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0f6      	beq.n	8000e0e <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8000e20:	bf00      	nop
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2104      	movs	r1, #4
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff99 	bl	8000d60 <I2C_GetFlagStatus>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0f6      	beq.n	8000e22 <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8000e34:	7e3b      	ldrb	r3, [r7, #24]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d104      	bne.n	8000e44 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fe7b 	bl	8000b3a <I2C_GenerateStopCondition>

}
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	4611      	mov	r1, r2
 8000e58:	461a      	mov	r2, r3
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	71fb      	strb	r3, [r7, #7]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fdf7 	bl	8000a5a <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000e6c:	bf00      	nop
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2101      	movs	r1, #1
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff73 	bl	8000d60 <I2C_GetFlagStatus>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f6      	beq.n	8000e6e <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	79ba      	ldrb	r2, [r7, #6]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fe0a 	bl	8000aa2 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000e8e:	bf00      	nop
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2102      	movs	r1, #2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff62 	bl	8000d60 <I2C_GetFlagStatus>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f6      	beq.n	8000e90 <I2C_MasterReceiveData+0x44>


	//procedure to read only 1 byte from slave
	if(Len == 1)
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d121      	bne.n	8000eec <I2C_MasterReceiveData+0xa0>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f85e 	bl	8000f70 <I2C_ManageAcking>


		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f7ff fe09 	bl	8000acc <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8000eba:	bf00      	nop
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2140      	movs	r1, #64	; 0x40
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff4c 	bl	8000d60 <I2C_GetFlagStatus>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f6      	beq.n	8000ebc <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 8000ece:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d104      	bne.n	8000ee0 <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fe2d 	bl	8000b3a <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d930      	bls.n	8000f54 <I2C_MasterReceiveData+0x108>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f7ff fdea 	bl	8000acc <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	e027      	b.n	8000f4e <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8000efe:	bf00      	nop
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2140      	movs	r1, #64	; 0x40
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff2a 	bl	8000d60 <I2C_GetFlagStatus>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f6      	beq.n	8000f00 <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d10e      	bne.n	8000f36 <I2C_MasterReceiveData+0xea>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f826 	bl	8000f70 <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 8000f24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d104      	bne.n	8000f36 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fe02 	bl	8000b3a <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	3301      	adds	r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1d4      	bne.n	8000efe <I2C_MasterReceiveData+0xb2>
		}

	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	7a5b      	ldrb	r3, [r3, #9]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d105      	bne.n	8000f68 <I2C_MasterReceiveData+0x11c>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2101      	movs	r1, #1
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f804 	bl	8000f70 <I2C_ManageAcking>
	}

}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d106      	bne.n	8000f90 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000f8e:	e005      	b.n	8000f9c <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	601a      	str	r2, [r3, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
	...

08000fa8 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <RCC_GetPCLK1Value+0x9c>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000fbc:	7a7b      	ldrb	r3, [r7, #9]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d102      	bne.n	8000fc8 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <RCC_GetPCLK1Value+0xa0>)
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	e00b      	b.n	8000fe0 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000fc8:	7a7b      	ldrb	r3, [r7, #9]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d102      	bne.n	8000fd4 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <RCC_GetPCLK1Value+0xa4>)
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	e005      	b.n	8000fe0 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000fd4:	7a7b      	ldrb	r3, [r7, #9]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d102      	bne.n	8000fe0 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000fda:	f000 f83d 	bl	8001058 <RCC_GetPLLOutputClock>
 8000fde:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <RCC_GetPCLK1Value+0x9c>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f003 030f 	and.w	r3, r3, #15
 8000fec:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000fee:	7a3b      	ldrb	r3, [r7, #8]
 8000ff0:	2b07      	cmp	r3, #7
 8000ff2:	d802      	bhi.n	8000ffa <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	72fb      	strb	r3, [r7, #11]
 8000ff8:	e005      	b.n	8001006 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000ffa:	7a3b      	ldrb	r3, [r7, #8]
 8000ffc:	3b08      	subs	r3, #8
 8000ffe:	4a14      	ldr	r2, [pc, #80]	; (8001050 <RCC_GetPCLK1Value+0xa8>)
 8001000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001004:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <RCC_GetPCLK1Value+0x9c>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	0a9b      	lsrs	r3, r3, #10
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8001014:	7a3b      	ldrb	r3, [r7, #8]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d802      	bhi.n	8001020 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 800101a:	2301      	movs	r3, #1
 800101c:	72bb      	strb	r3, [r7, #10]
 800101e:	e004      	b.n	800102a <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8001020:	7a3b      	ldrb	r3, [r7, #8]
 8001022:	3b04      	subs	r3, #4
 8001024:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <RCC_GetPCLK1Value+0xac>)
 8001026:	5cd3      	ldrb	r3, [r2, r3]
 8001028:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 800102a:	7afb      	ldrb	r3, [r7, #11]
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001032:	7abb      	ldrb	r3, [r7, #10]
 8001034:	fbb2 f3f3 	udiv	r3, r2, r3
 8001038:	607b      	str	r3, [r7, #4]

	return pclk1;
 800103a:	687b      	ldr	r3, [r7, #4]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40023800 	.word	0x40023800
 8001048:	00f42400 	.word	0x00f42400
 800104c:	007a1200 	.word	0x007a1200
 8001050:	20000000 	.word	0x20000000
 8001054:	20000010 	.word	0x20000010

08001058 <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

	return 0;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
	...

08001068 <__errno>:
 8001068:	4b01      	ldr	r3, [pc, #4]	; (8001070 <__errno+0x8>)
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000014 	.word	0x20000014

08001074 <__libc_init_array>:
 8001074:	b570      	push	{r4, r5, r6, lr}
 8001076:	4d0d      	ldr	r5, [pc, #52]	; (80010ac <__libc_init_array+0x38>)
 8001078:	4c0d      	ldr	r4, [pc, #52]	; (80010b0 <__libc_init_array+0x3c>)
 800107a:	1b64      	subs	r4, r4, r5
 800107c:	10a4      	asrs	r4, r4, #2
 800107e:	2600      	movs	r6, #0
 8001080:	42a6      	cmp	r6, r4
 8001082:	d109      	bne.n	8001098 <__libc_init_array+0x24>
 8001084:	4d0b      	ldr	r5, [pc, #44]	; (80010b4 <__libc_init_array+0x40>)
 8001086:	4c0c      	ldr	r4, [pc, #48]	; (80010b8 <__libc_init_array+0x44>)
 8001088:	f000 ffa6 	bl	8001fd8 <_init>
 800108c:	1b64      	subs	r4, r4, r5
 800108e:	10a4      	asrs	r4, r4, #2
 8001090:	2600      	movs	r6, #0
 8001092:	42a6      	cmp	r6, r4
 8001094:	d105      	bne.n	80010a2 <__libc_init_array+0x2e>
 8001096:	bd70      	pop	{r4, r5, r6, pc}
 8001098:	f855 3b04 	ldr.w	r3, [r5], #4
 800109c:	4798      	blx	r3
 800109e:	3601      	adds	r6, #1
 80010a0:	e7ee      	b.n	8001080 <__libc_init_array+0xc>
 80010a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80010a6:	4798      	blx	r3
 80010a8:	3601      	adds	r6, #1
 80010aa:	e7f2      	b.n	8001092 <__libc_init_array+0x1e>
 80010ac:	08002094 	.word	0x08002094
 80010b0:	08002094 	.word	0x08002094
 80010b4:	08002094 	.word	0x08002094
 80010b8:	08002098 	.word	0x08002098

080010bc <memset>:
 80010bc:	4402      	add	r2, r0
 80010be:	4603      	mov	r3, r0
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d100      	bne.n	80010c6 <memset+0xa>
 80010c4:	4770      	bx	lr
 80010c6:	f803 1b01 	strb.w	r1, [r3], #1
 80010ca:	e7f9      	b.n	80010c0 <memset+0x4>

080010cc <iprintf>:
 80010cc:	b40f      	push	{r0, r1, r2, r3}
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <iprintf+0x2c>)
 80010d0:	b513      	push	{r0, r1, r4, lr}
 80010d2:	681c      	ldr	r4, [r3, #0]
 80010d4:	b124      	cbz	r4, 80010e0 <iprintf+0x14>
 80010d6:	69a3      	ldr	r3, [r4, #24]
 80010d8:	b913      	cbnz	r3, 80010e0 <iprintf+0x14>
 80010da:	4620      	mov	r0, r4
 80010dc:	f000 f866 	bl	80011ac <__sinit>
 80010e0:	ab05      	add	r3, sp, #20
 80010e2:	9a04      	ldr	r2, [sp, #16]
 80010e4:	68a1      	ldr	r1, [r4, #8]
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	4620      	mov	r0, r4
 80010ea:	f000 f9bb 	bl	8001464 <_vfiprintf_r>
 80010ee:	b002      	add	sp, #8
 80010f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010f4:	b004      	add	sp, #16
 80010f6:	4770      	bx	lr
 80010f8:	20000014 	.word	0x20000014

080010fc <std>:
 80010fc:	2300      	movs	r3, #0
 80010fe:	b510      	push	{r4, lr}
 8001100:	4604      	mov	r4, r0
 8001102:	e9c0 3300 	strd	r3, r3, [r0]
 8001106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800110a:	6083      	str	r3, [r0, #8]
 800110c:	8181      	strh	r1, [r0, #12]
 800110e:	6643      	str	r3, [r0, #100]	; 0x64
 8001110:	81c2      	strh	r2, [r0, #14]
 8001112:	6183      	str	r3, [r0, #24]
 8001114:	4619      	mov	r1, r3
 8001116:	2208      	movs	r2, #8
 8001118:	305c      	adds	r0, #92	; 0x5c
 800111a:	f7ff ffcf 	bl	80010bc <memset>
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <std+0x38>)
 8001120:	6263      	str	r3, [r4, #36]	; 0x24
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <std+0x3c>)
 8001124:	62a3      	str	r3, [r4, #40]	; 0x28
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <std+0x40>)
 8001128:	62e3      	str	r3, [r4, #44]	; 0x2c
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <std+0x44>)
 800112c:	6224      	str	r4, [r4, #32]
 800112e:	6323      	str	r3, [r4, #48]	; 0x30
 8001130:	bd10      	pop	{r4, pc}
 8001132:	bf00      	nop
 8001134:	08001a0d 	.word	0x08001a0d
 8001138:	08001a2f 	.word	0x08001a2f
 800113c:	08001a67 	.word	0x08001a67
 8001140:	08001a8b 	.word	0x08001a8b

08001144 <_cleanup_r>:
 8001144:	4901      	ldr	r1, [pc, #4]	; (800114c <_cleanup_r+0x8>)
 8001146:	f000 b8af 	b.w	80012a8 <_fwalk_reent>
 800114a:	bf00      	nop
 800114c:	08001d5d 	.word	0x08001d5d

08001150 <__sfmoreglue>:
 8001150:	b570      	push	{r4, r5, r6, lr}
 8001152:	2268      	movs	r2, #104	; 0x68
 8001154:	1e4d      	subs	r5, r1, #1
 8001156:	4355      	muls	r5, r2
 8001158:	460e      	mov	r6, r1
 800115a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800115e:	f000 f8e5 	bl	800132c <_malloc_r>
 8001162:	4604      	mov	r4, r0
 8001164:	b140      	cbz	r0, 8001178 <__sfmoreglue+0x28>
 8001166:	2100      	movs	r1, #0
 8001168:	e9c0 1600 	strd	r1, r6, [r0]
 800116c:	300c      	adds	r0, #12
 800116e:	60a0      	str	r0, [r4, #8]
 8001170:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001174:	f7ff ffa2 	bl	80010bc <memset>
 8001178:	4620      	mov	r0, r4
 800117a:	bd70      	pop	{r4, r5, r6, pc}

0800117c <__sfp_lock_acquire>:
 800117c:	4801      	ldr	r0, [pc, #4]	; (8001184 <__sfp_lock_acquire+0x8>)
 800117e:	f000 b8b3 	b.w	80012e8 <__retarget_lock_acquire_recursive>
 8001182:	bf00      	nop
 8001184:	200000e1 	.word	0x200000e1

08001188 <__sfp_lock_release>:
 8001188:	4801      	ldr	r0, [pc, #4]	; (8001190 <__sfp_lock_release+0x8>)
 800118a:	f000 b8ae 	b.w	80012ea <__retarget_lock_release_recursive>
 800118e:	bf00      	nop
 8001190:	200000e1 	.word	0x200000e1

08001194 <__sinit_lock_acquire>:
 8001194:	4801      	ldr	r0, [pc, #4]	; (800119c <__sinit_lock_acquire+0x8>)
 8001196:	f000 b8a7 	b.w	80012e8 <__retarget_lock_acquire_recursive>
 800119a:	bf00      	nop
 800119c:	200000e2 	.word	0x200000e2

080011a0 <__sinit_lock_release>:
 80011a0:	4801      	ldr	r0, [pc, #4]	; (80011a8 <__sinit_lock_release+0x8>)
 80011a2:	f000 b8a2 	b.w	80012ea <__retarget_lock_release_recursive>
 80011a6:	bf00      	nop
 80011a8:	200000e2 	.word	0x200000e2

080011ac <__sinit>:
 80011ac:	b510      	push	{r4, lr}
 80011ae:	4604      	mov	r4, r0
 80011b0:	f7ff fff0 	bl	8001194 <__sinit_lock_acquire>
 80011b4:	69a3      	ldr	r3, [r4, #24]
 80011b6:	b11b      	cbz	r3, 80011c0 <__sinit+0x14>
 80011b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011bc:	f7ff bff0 	b.w	80011a0 <__sinit_lock_release>
 80011c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80011c4:	6523      	str	r3, [r4, #80]	; 0x50
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <__sinit+0x68>)
 80011c8:	4a13      	ldr	r2, [pc, #76]	; (8001218 <__sinit+0x6c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80011ce:	42a3      	cmp	r3, r4
 80011d0:	bf04      	itt	eq
 80011d2:	2301      	moveq	r3, #1
 80011d4:	61a3      	streq	r3, [r4, #24]
 80011d6:	4620      	mov	r0, r4
 80011d8:	f000 f820 	bl	800121c <__sfp>
 80011dc:	6060      	str	r0, [r4, #4]
 80011de:	4620      	mov	r0, r4
 80011e0:	f000 f81c 	bl	800121c <__sfp>
 80011e4:	60a0      	str	r0, [r4, #8]
 80011e6:	4620      	mov	r0, r4
 80011e8:	f000 f818 	bl	800121c <__sfp>
 80011ec:	2200      	movs	r2, #0
 80011ee:	60e0      	str	r0, [r4, #12]
 80011f0:	2104      	movs	r1, #4
 80011f2:	6860      	ldr	r0, [r4, #4]
 80011f4:	f7ff ff82 	bl	80010fc <std>
 80011f8:	68a0      	ldr	r0, [r4, #8]
 80011fa:	2201      	movs	r2, #1
 80011fc:	2109      	movs	r1, #9
 80011fe:	f7ff ff7d 	bl	80010fc <std>
 8001202:	68e0      	ldr	r0, [r4, #12]
 8001204:	2202      	movs	r2, #2
 8001206:	2112      	movs	r1, #18
 8001208:	f7ff ff78 	bl	80010fc <std>
 800120c:	2301      	movs	r3, #1
 800120e:	61a3      	str	r3, [r4, #24]
 8001210:	e7d2      	b.n	80011b8 <__sinit+0xc>
 8001212:	bf00      	nop
 8001214:	08001ffc 	.word	0x08001ffc
 8001218:	08001145 	.word	0x08001145

0800121c <__sfp>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4607      	mov	r7, r0
 8001220:	f7ff ffac 	bl	800117c <__sfp_lock_acquire>
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <__sfp+0x84>)
 8001226:	681e      	ldr	r6, [r3, #0]
 8001228:	69b3      	ldr	r3, [r6, #24]
 800122a:	b913      	cbnz	r3, 8001232 <__sfp+0x16>
 800122c:	4630      	mov	r0, r6
 800122e:	f7ff ffbd 	bl	80011ac <__sinit>
 8001232:	3648      	adds	r6, #72	; 0x48
 8001234:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001238:	3b01      	subs	r3, #1
 800123a:	d503      	bpl.n	8001244 <__sfp+0x28>
 800123c:	6833      	ldr	r3, [r6, #0]
 800123e:	b30b      	cbz	r3, 8001284 <__sfp+0x68>
 8001240:	6836      	ldr	r6, [r6, #0]
 8001242:	e7f7      	b.n	8001234 <__sfp+0x18>
 8001244:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001248:	b9d5      	cbnz	r5, 8001280 <__sfp+0x64>
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <__sfp+0x88>)
 800124c:	60e3      	str	r3, [r4, #12]
 800124e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001252:	6665      	str	r5, [r4, #100]	; 0x64
 8001254:	f000 f847 	bl	80012e6 <__retarget_lock_init_recursive>
 8001258:	f7ff ff96 	bl	8001188 <__sfp_lock_release>
 800125c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001260:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001264:	6025      	str	r5, [r4, #0]
 8001266:	61a5      	str	r5, [r4, #24]
 8001268:	2208      	movs	r2, #8
 800126a:	4629      	mov	r1, r5
 800126c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001270:	f7ff ff24 	bl	80010bc <memset>
 8001274:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001278:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800127c:	4620      	mov	r0, r4
 800127e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001280:	3468      	adds	r4, #104	; 0x68
 8001282:	e7d9      	b.n	8001238 <__sfp+0x1c>
 8001284:	2104      	movs	r1, #4
 8001286:	4638      	mov	r0, r7
 8001288:	f7ff ff62 	bl	8001150 <__sfmoreglue>
 800128c:	4604      	mov	r4, r0
 800128e:	6030      	str	r0, [r6, #0]
 8001290:	2800      	cmp	r0, #0
 8001292:	d1d5      	bne.n	8001240 <__sfp+0x24>
 8001294:	f7ff ff78 	bl	8001188 <__sfp_lock_release>
 8001298:	230c      	movs	r3, #12
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	e7ee      	b.n	800127c <__sfp+0x60>
 800129e:	bf00      	nop
 80012a0:	08001ffc 	.word	0x08001ffc
 80012a4:	ffff0001 	.word	0xffff0001

080012a8 <_fwalk_reent>:
 80012a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012ac:	4606      	mov	r6, r0
 80012ae:	4688      	mov	r8, r1
 80012b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80012b4:	2700      	movs	r7, #0
 80012b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80012ba:	f1b9 0901 	subs.w	r9, r9, #1
 80012be:	d505      	bpl.n	80012cc <_fwalk_reent+0x24>
 80012c0:	6824      	ldr	r4, [r4, #0]
 80012c2:	2c00      	cmp	r4, #0
 80012c4:	d1f7      	bne.n	80012b6 <_fwalk_reent+0xe>
 80012c6:	4638      	mov	r0, r7
 80012c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012cc:	89ab      	ldrh	r3, [r5, #12]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d907      	bls.n	80012e2 <_fwalk_reent+0x3a>
 80012d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80012d6:	3301      	adds	r3, #1
 80012d8:	d003      	beq.n	80012e2 <_fwalk_reent+0x3a>
 80012da:	4629      	mov	r1, r5
 80012dc:	4630      	mov	r0, r6
 80012de:	47c0      	blx	r8
 80012e0:	4307      	orrs	r7, r0
 80012e2:	3568      	adds	r5, #104	; 0x68
 80012e4:	e7e9      	b.n	80012ba <_fwalk_reent+0x12>

080012e6 <__retarget_lock_init_recursive>:
 80012e6:	4770      	bx	lr

080012e8 <__retarget_lock_acquire_recursive>:
 80012e8:	4770      	bx	lr

080012ea <__retarget_lock_release_recursive>:
 80012ea:	4770      	bx	lr

080012ec <sbrk_aligned>:
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	4e0e      	ldr	r6, [pc, #56]	; (8001328 <sbrk_aligned+0x3c>)
 80012f0:	460c      	mov	r4, r1
 80012f2:	6831      	ldr	r1, [r6, #0]
 80012f4:	4605      	mov	r5, r0
 80012f6:	b911      	cbnz	r1, 80012fe <sbrk_aligned+0x12>
 80012f8:	f000 fb78 	bl	80019ec <_sbrk_r>
 80012fc:	6030      	str	r0, [r6, #0]
 80012fe:	4621      	mov	r1, r4
 8001300:	4628      	mov	r0, r5
 8001302:	f000 fb73 	bl	80019ec <_sbrk_r>
 8001306:	1c43      	adds	r3, r0, #1
 8001308:	d00a      	beq.n	8001320 <sbrk_aligned+0x34>
 800130a:	1cc4      	adds	r4, r0, #3
 800130c:	f024 0403 	bic.w	r4, r4, #3
 8001310:	42a0      	cmp	r0, r4
 8001312:	d007      	beq.n	8001324 <sbrk_aligned+0x38>
 8001314:	1a21      	subs	r1, r4, r0
 8001316:	4628      	mov	r0, r5
 8001318:	f000 fb68 	bl	80019ec <_sbrk_r>
 800131c:	3001      	adds	r0, #1
 800131e:	d101      	bne.n	8001324 <sbrk_aligned+0x38>
 8001320:	f04f 34ff 	mov.w	r4, #4294967295
 8001324:	4620      	mov	r0, r4
 8001326:	bd70      	pop	{r4, r5, r6, pc}
 8001328:	200000e8 	.word	0x200000e8

0800132c <_malloc_r>:
 800132c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001330:	1ccd      	adds	r5, r1, #3
 8001332:	f025 0503 	bic.w	r5, r5, #3
 8001336:	3508      	adds	r5, #8
 8001338:	2d0c      	cmp	r5, #12
 800133a:	bf38      	it	cc
 800133c:	250c      	movcc	r5, #12
 800133e:	2d00      	cmp	r5, #0
 8001340:	4607      	mov	r7, r0
 8001342:	db01      	blt.n	8001348 <_malloc_r+0x1c>
 8001344:	42a9      	cmp	r1, r5
 8001346:	d905      	bls.n	8001354 <_malloc_r+0x28>
 8001348:	230c      	movs	r3, #12
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	2600      	movs	r6, #0
 800134e:	4630      	mov	r0, r6
 8001350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001354:	4e2e      	ldr	r6, [pc, #184]	; (8001410 <_malloc_r+0xe4>)
 8001356:	f000 fdb5 	bl	8001ec4 <__malloc_lock>
 800135a:	6833      	ldr	r3, [r6, #0]
 800135c:	461c      	mov	r4, r3
 800135e:	bb34      	cbnz	r4, 80013ae <_malloc_r+0x82>
 8001360:	4629      	mov	r1, r5
 8001362:	4638      	mov	r0, r7
 8001364:	f7ff ffc2 	bl	80012ec <sbrk_aligned>
 8001368:	1c43      	adds	r3, r0, #1
 800136a:	4604      	mov	r4, r0
 800136c:	d14d      	bne.n	800140a <_malloc_r+0xde>
 800136e:	6834      	ldr	r4, [r6, #0]
 8001370:	4626      	mov	r6, r4
 8001372:	2e00      	cmp	r6, #0
 8001374:	d140      	bne.n	80013f8 <_malloc_r+0xcc>
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	4631      	mov	r1, r6
 800137a:	4638      	mov	r0, r7
 800137c:	eb04 0803 	add.w	r8, r4, r3
 8001380:	f000 fb34 	bl	80019ec <_sbrk_r>
 8001384:	4580      	cmp	r8, r0
 8001386:	d13a      	bne.n	80013fe <_malloc_r+0xd2>
 8001388:	6821      	ldr	r1, [r4, #0]
 800138a:	3503      	adds	r5, #3
 800138c:	1a6d      	subs	r5, r5, r1
 800138e:	f025 0503 	bic.w	r5, r5, #3
 8001392:	3508      	adds	r5, #8
 8001394:	2d0c      	cmp	r5, #12
 8001396:	bf38      	it	cc
 8001398:	250c      	movcc	r5, #12
 800139a:	4629      	mov	r1, r5
 800139c:	4638      	mov	r0, r7
 800139e:	f7ff ffa5 	bl	80012ec <sbrk_aligned>
 80013a2:	3001      	adds	r0, #1
 80013a4:	d02b      	beq.n	80013fe <_malloc_r+0xd2>
 80013a6:	6823      	ldr	r3, [r4, #0]
 80013a8:	442b      	add	r3, r5
 80013aa:	6023      	str	r3, [r4, #0]
 80013ac:	e00e      	b.n	80013cc <_malloc_r+0xa0>
 80013ae:	6822      	ldr	r2, [r4, #0]
 80013b0:	1b52      	subs	r2, r2, r5
 80013b2:	d41e      	bmi.n	80013f2 <_malloc_r+0xc6>
 80013b4:	2a0b      	cmp	r2, #11
 80013b6:	d916      	bls.n	80013e6 <_malloc_r+0xba>
 80013b8:	1961      	adds	r1, r4, r5
 80013ba:	42a3      	cmp	r3, r4
 80013bc:	6025      	str	r5, [r4, #0]
 80013be:	bf18      	it	ne
 80013c0:	6059      	strne	r1, [r3, #4]
 80013c2:	6863      	ldr	r3, [r4, #4]
 80013c4:	bf08      	it	eq
 80013c6:	6031      	streq	r1, [r6, #0]
 80013c8:	5162      	str	r2, [r4, r5]
 80013ca:	604b      	str	r3, [r1, #4]
 80013cc:	4638      	mov	r0, r7
 80013ce:	f104 060b 	add.w	r6, r4, #11
 80013d2:	f000 fd7d 	bl	8001ed0 <__malloc_unlock>
 80013d6:	f026 0607 	bic.w	r6, r6, #7
 80013da:	1d23      	adds	r3, r4, #4
 80013dc:	1af2      	subs	r2, r6, r3
 80013de:	d0b6      	beq.n	800134e <_malloc_r+0x22>
 80013e0:	1b9b      	subs	r3, r3, r6
 80013e2:	50a3      	str	r3, [r4, r2]
 80013e4:	e7b3      	b.n	800134e <_malloc_r+0x22>
 80013e6:	6862      	ldr	r2, [r4, #4]
 80013e8:	42a3      	cmp	r3, r4
 80013ea:	bf0c      	ite	eq
 80013ec:	6032      	streq	r2, [r6, #0]
 80013ee:	605a      	strne	r2, [r3, #4]
 80013f0:	e7ec      	b.n	80013cc <_malloc_r+0xa0>
 80013f2:	4623      	mov	r3, r4
 80013f4:	6864      	ldr	r4, [r4, #4]
 80013f6:	e7b2      	b.n	800135e <_malloc_r+0x32>
 80013f8:	4634      	mov	r4, r6
 80013fa:	6876      	ldr	r6, [r6, #4]
 80013fc:	e7b9      	b.n	8001372 <_malloc_r+0x46>
 80013fe:	230c      	movs	r3, #12
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	4638      	mov	r0, r7
 8001404:	f000 fd64 	bl	8001ed0 <__malloc_unlock>
 8001408:	e7a1      	b.n	800134e <_malloc_r+0x22>
 800140a:	6025      	str	r5, [r4, #0]
 800140c:	e7de      	b.n	80013cc <_malloc_r+0xa0>
 800140e:	bf00      	nop
 8001410:	200000e4 	.word	0x200000e4

08001414 <__sfputc_r>:
 8001414:	6893      	ldr	r3, [r2, #8]
 8001416:	3b01      	subs	r3, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	b410      	push	{r4}
 800141c:	6093      	str	r3, [r2, #8]
 800141e:	da07      	bge.n	8001430 <__sfputc_r+0x1c>
 8001420:	6994      	ldr	r4, [r2, #24]
 8001422:	42a3      	cmp	r3, r4
 8001424:	db01      	blt.n	800142a <__sfputc_r+0x16>
 8001426:	290a      	cmp	r1, #10
 8001428:	d102      	bne.n	8001430 <__sfputc_r+0x1c>
 800142a:	bc10      	pop	{r4}
 800142c:	f000 bb32 	b.w	8001a94 <__swbuf_r>
 8001430:	6813      	ldr	r3, [r2, #0]
 8001432:	1c58      	adds	r0, r3, #1
 8001434:	6010      	str	r0, [r2, #0]
 8001436:	7019      	strb	r1, [r3, #0]
 8001438:	4608      	mov	r0, r1
 800143a:	bc10      	pop	{r4}
 800143c:	4770      	bx	lr

0800143e <__sfputs_r>:
 800143e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001440:	4606      	mov	r6, r0
 8001442:	460f      	mov	r7, r1
 8001444:	4614      	mov	r4, r2
 8001446:	18d5      	adds	r5, r2, r3
 8001448:	42ac      	cmp	r4, r5
 800144a:	d101      	bne.n	8001450 <__sfputs_r+0x12>
 800144c:	2000      	movs	r0, #0
 800144e:	e007      	b.n	8001460 <__sfputs_r+0x22>
 8001450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001454:	463a      	mov	r2, r7
 8001456:	4630      	mov	r0, r6
 8001458:	f7ff ffdc 	bl	8001414 <__sfputc_r>
 800145c:	1c43      	adds	r3, r0, #1
 800145e:	d1f3      	bne.n	8001448 <__sfputs_r+0xa>
 8001460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001464 <_vfiprintf_r>:
 8001464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001468:	460d      	mov	r5, r1
 800146a:	b09d      	sub	sp, #116	; 0x74
 800146c:	4614      	mov	r4, r2
 800146e:	4698      	mov	r8, r3
 8001470:	4606      	mov	r6, r0
 8001472:	b118      	cbz	r0, 800147c <_vfiprintf_r+0x18>
 8001474:	6983      	ldr	r3, [r0, #24]
 8001476:	b90b      	cbnz	r3, 800147c <_vfiprintf_r+0x18>
 8001478:	f7ff fe98 	bl	80011ac <__sinit>
 800147c:	4b89      	ldr	r3, [pc, #548]	; (80016a4 <_vfiprintf_r+0x240>)
 800147e:	429d      	cmp	r5, r3
 8001480:	d11b      	bne.n	80014ba <_vfiprintf_r+0x56>
 8001482:	6875      	ldr	r5, [r6, #4]
 8001484:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001486:	07d9      	lsls	r1, r3, #31
 8001488:	d405      	bmi.n	8001496 <_vfiprintf_r+0x32>
 800148a:	89ab      	ldrh	r3, [r5, #12]
 800148c:	059a      	lsls	r2, r3, #22
 800148e:	d402      	bmi.n	8001496 <_vfiprintf_r+0x32>
 8001490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001492:	f7ff ff29 	bl	80012e8 <__retarget_lock_acquire_recursive>
 8001496:	89ab      	ldrh	r3, [r5, #12]
 8001498:	071b      	lsls	r3, r3, #28
 800149a:	d501      	bpl.n	80014a0 <_vfiprintf_r+0x3c>
 800149c:	692b      	ldr	r3, [r5, #16]
 800149e:	b9eb      	cbnz	r3, 80014dc <_vfiprintf_r+0x78>
 80014a0:	4629      	mov	r1, r5
 80014a2:	4630      	mov	r0, r6
 80014a4:	f000 fb5a 	bl	8001b5c <__swsetup_r>
 80014a8:	b1c0      	cbz	r0, 80014dc <_vfiprintf_r+0x78>
 80014aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80014ac:	07dc      	lsls	r4, r3, #31
 80014ae:	d50e      	bpl.n	80014ce <_vfiprintf_r+0x6a>
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	b01d      	add	sp, #116	; 0x74
 80014b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014ba:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <_vfiprintf_r+0x244>)
 80014bc:	429d      	cmp	r5, r3
 80014be:	d101      	bne.n	80014c4 <_vfiprintf_r+0x60>
 80014c0:	68b5      	ldr	r5, [r6, #8]
 80014c2:	e7df      	b.n	8001484 <_vfiprintf_r+0x20>
 80014c4:	4b79      	ldr	r3, [pc, #484]	; (80016ac <_vfiprintf_r+0x248>)
 80014c6:	429d      	cmp	r5, r3
 80014c8:	bf08      	it	eq
 80014ca:	68f5      	ldreq	r5, [r6, #12]
 80014cc:	e7da      	b.n	8001484 <_vfiprintf_r+0x20>
 80014ce:	89ab      	ldrh	r3, [r5, #12]
 80014d0:	0598      	lsls	r0, r3, #22
 80014d2:	d4ed      	bmi.n	80014b0 <_vfiprintf_r+0x4c>
 80014d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80014d6:	f7ff ff08 	bl	80012ea <__retarget_lock_release_recursive>
 80014da:	e7e9      	b.n	80014b0 <_vfiprintf_r+0x4c>
 80014dc:	2300      	movs	r3, #0
 80014de:	9309      	str	r3, [sp, #36]	; 0x24
 80014e0:	2320      	movs	r3, #32
 80014e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80014e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80014ea:	2330      	movs	r3, #48	; 0x30
 80014ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80016b0 <_vfiprintf_r+0x24c>
 80014f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80014f4:	f04f 0901 	mov.w	r9, #1
 80014f8:	4623      	mov	r3, r4
 80014fa:	469a      	mov	sl, r3
 80014fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001500:	b10a      	cbz	r2, 8001506 <_vfiprintf_r+0xa2>
 8001502:	2a25      	cmp	r2, #37	; 0x25
 8001504:	d1f9      	bne.n	80014fa <_vfiprintf_r+0x96>
 8001506:	ebba 0b04 	subs.w	fp, sl, r4
 800150a:	d00b      	beq.n	8001524 <_vfiprintf_r+0xc0>
 800150c:	465b      	mov	r3, fp
 800150e:	4622      	mov	r2, r4
 8001510:	4629      	mov	r1, r5
 8001512:	4630      	mov	r0, r6
 8001514:	f7ff ff93 	bl	800143e <__sfputs_r>
 8001518:	3001      	adds	r0, #1
 800151a:	f000 80aa 	beq.w	8001672 <_vfiprintf_r+0x20e>
 800151e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001520:	445a      	add	r2, fp
 8001522:	9209      	str	r2, [sp, #36]	; 0x24
 8001524:	f89a 3000 	ldrb.w	r3, [sl]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80a2 	beq.w	8001672 <_vfiprintf_r+0x20e>
 800152e:	2300      	movs	r3, #0
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001538:	f10a 0a01 	add.w	sl, sl, #1
 800153c:	9304      	str	r3, [sp, #16]
 800153e:	9307      	str	r3, [sp, #28]
 8001540:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001544:	931a      	str	r3, [sp, #104]	; 0x68
 8001546:	4654      	mov	r4, sl
 8001548:	2205      	movs	r2, #5
 800154a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800154e:	4858      	ldr	r0, [pc, #352]	; (80016b0 <_vfiprintf_r+0x24c>)
 8001550:	f7fe fe4e 	bl	80001f0 <memchr>
 8001554:	9a04      	ldr	r2, [sp, #16]
 8001556:	b9d8      	cbnz	r0, 8001590 <_vfiprintf_r+0x12c>
 8001558:	06d1      	lsls	r1, r2, #27
 800155a:	bf44      	itt	mi
 800155c:	2320      	movmi	r3, #32
 800155e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001562:	0713      	lsls	r3, r2, #28
 8001564:	bf44      	itt	mi
 8001566:	232b      	movmi	r3, #43	; 0x2b
 8001568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800156c:	f89a 3000 	ldrb.w	r3, [sl]
 8001570:	2b2a      	cmp	r3, #42	; 0x2a
 8001572:	d015      	beq.n	80015a0 <_vfiprintf_r+0x13c>
 8001574:	9a07      	ldr	r2, [sp, #28]
 8001576:	4654      	mov	r4, sl
 8001578:	2000      	movs	r0, #0
 800157a:	f04f 0c0a 	mov.w	ip, #10
 800157e:	4621      	mov	r1, r4
 8001580:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001584:	3b30      	subs	r3, #48	; 0x30
 8001586:	2b09      	cmp	r3, #9
 8001588:	d94e      	bls.n	8001628 <_vfiprintf_r+0x1c4>
 800158a:	b1b0      	cbz	r0, 80015ba <_vfiprintf_r+0x156>
 800158c:	9207      	str	r2, [sp, #28]
 800158e:	e014      	b.n	80015ba <_vfiprintf_r+0x156>
 8001590:	eba0 0308 	sub.w	r3, r0, r8
 8001594:	fa09 f303 	lsl.w	r3, r9, r3
 8001598:	4313      	orrs	r3, r2
 800159a:	9304      	str	r3, [sp, #16]
 800159c:	46a2      	mov	sl, r4
 800159e:	e7d2      	b.n	8001546 <_vfiprintf_r+0xe2>
 80015a0:	9b03      	ldr	r3, [sp, #12]
 80015a2:	1d19      	adds	r1, r3, #4
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	9103      	str	r1, [sp, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bfbb      	ittet	lt
 80015ac:	425b      	neglt	r3, r3
 80015ae:	f042 0202 	orrlt.w	r2, r2, #2
 80015b2:	9307      	strge	r3, [sp, #28]
 80015b4:	9307      	strlt	r3, [sp, #28]
 80015b6:	bfb8      	it	lt
 80015b8:	9204      	strlt	r2, [sp, #16]
 80015ba:	7823      	ldrb	r3, [r4, #0]
 80015bc:	2b2e      	cmp	r3, #46	; 0x2e
 80015be:	d10c      	bne.n	80015da <_vfiprintf_r+0x176>
 80015c0:	7863      	ldrb	r3, [r4, #1]
 80015c2:	2b2a      	cmp	r3, #42	; 0x2a
 80015c4:	d135      	bne.n	8001632 <_vfiprintf_r+0x1ce>
 80015c6:	9b03      	ldr	r3, [sp, #12]
 80015c8:	1d1a      	adds	r2, r3, #4
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	9203      	str	r2, [sp, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	bfb8      	it	lt
 80015d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80015d6:	3402      	adds	r4, #2
 80015d8:	9305      	str	r3, [sp, #20]
 80015da:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80016b4 <_vfiprintf_r+0x250>
 80015de:	7821      	ldrb	r1, [r4, #0]
 80015e0:	2203      	movs	r2, #3
 80015e2:	4650      	mov	r0, sl
 80015e4:	f7fe fe04 	bl	80001f0 <memchr>
 80015e8:	b140      	cbz	r0, 80015fc <_vfiprintf_r+0x198>
 80015ea:	2340      	movs	r3, #64	; 0x40
 80015ec:	eba0 000a 	sub.w	r0, r0, sl
 80015f0:	fa03 f000 	lsl.w	r0, r3, r0
 80015f4:	9b04      	ldr	r3, [sp, #16]
 80015f6:	4303      	orrs	r3, r0
 80015f8:	3401      	adds	r4, #1
 80015fa:	9304      	str	r3, [sp, #16]
 80015fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001600:	482d      	ldr	r0, [pc, #180]	; (80016b8 <_vfiprintf_r+0x254>)
 8001602:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001606:	2206      	movs	r2, #6
 8001608:	f7fe fdf2 	bl	80001f0 <memchr>
 800160c:	2800      	cmp	r0, #0
 800160e:	d03f      	beq.n	8001690 <_vfiprintf_r+0x22c>
 8001610:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <_vfiprintf_r+0x258>)
 8001612:	bb1b      	cbnz	r3, 800165c <_vfiprintf_r+0x1f8>
 8001614:	9b03      	ldr	r3, [sp, #12]
 8001616:	3307      	adds	r3, #7
 8001618:	f023 0307 	bic.w	r3, r3, #7
 800161c:	3308      	adds	r3, #8
 800161e:	9303      	str	r3, [sp, #12]
 8001620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001622:	443b      	add	r3, r7
 8001624:	9309      	str	r3, [sp, #36]	; 0x24
 8001626:	e767      	b.n	80014f8 <_vfiprintf_r+0x94>
 8001628:	fb0c 3202 	mla	r2, ip, r2, r3
 800162c:	460c      	mov	r4, r1
 800162e:	2001      	movs	r0, #1
 8001630:	e7a5      	b.n	800157e <_vfiprintf_r+0x11a>
 8001632:	2300      	movs	r3, #0
 8001634:	3401      	adds	r4, #1
 8001636:	9305      	str	r3, [sp, #20]
 8001638:	4619      	mov	r1, r3
 800163a:	f04f 0c0a 	mov.w	ip, #10
 800163e:	4620      	mov	r0, r4
 8001640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001644:	3a30      	subs	r2, #48	; 0x30
 8001646:	2a09      	cmp	r2, #9
 8001648:	d903      	bls.n	8001652 <_vfiprintf_r+0x1ee>
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0c5      	beq.n	80015da <_vfiprintf_r+0x176>
 800164e:	9105      	str	r1, [sp, #20]
 8001650:	e7c3      	b.n	80015da <_vfiprintf_r+0x176>
 8001652:	fb0c 2101 	mla	r1, ip, r1, r2
 8001656:	4604      	mov	r4, r0
 8001658:	2301      	movs	r3, #1
 800165a:	e7f0      	b.n	800163e <_vfiprintf_r+0x1da>
 800165c:	ab03      	add	r3, sp, #12
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	462a      	mov	r2, r5
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <_vfiprintf_r+0x25c>)
 8001664:	a904      	add	r1, sp, #16
 8001666:	4630      	mov	r0, r6
 8001668:	f3af 8000 	nop.w
 800166c:	4607      	mov	r7, r0
 800166e:	1c78      	adds	r0, r7, #1
 8001670:	d1d6      	bne.n	8001620 <_vfiprintf_r+0x1bc>
 8001672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001674:	07d9      	lsls	r1, r3, #31
 8001676:	d405      	bmi.n	8001684 <_vfiprintf_r+0x220>
 8001678:	89ab      	ldrh	r3, [r5, #12]
 800167a:	059a      	lsls	r2, r3, #22
 800167c:	d402      	bmi.n	8001684 <_vfiprintf_r+0x220>
 800167e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001680:	f7ff fe33 	bl	80012ea <__retarget_lock_release_recursive>
 8001684:	89ab      	ldrh	r3, [r5, #12]
 8001686:	065b      	lsls	r3, r3, #25
 8001688:	f53f af12 	bmi.w	80014b0 <_vfiprintf_r+0x4c>
 800168c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800168e:	e711      	b.n	80014b4 <_vfiprintf_r+0x50>
 8001690:	ab03      	add	r3, sp, #12
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	462a      	mov	r2, r5
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <_vfiprintf_r+0x25c>)
 8001698:	a904      	add	r1, sp, #16
 800169a:	4630      	mov	r0, r6
 800169c:	f000 f880 	bl	80017a0 <_printf_i>
 80016a0:	e7e4      	b.n	800166c <_vfiprintf_r+0x208>
 80016a2:	bf00      	nop
 80016a4:	08002020 	.word	0x08002020
 80016a8:	08002040 	.word	0x08002040
 80016ac:	08002000 	.word	0x08002000
 80016b0:	08002060 	.word	0x08002060
 80016b4:	08002066 	.word	0x08002066
 80016b8:	0800206a 	.word	0x0800206a
 80016bc:	00000000 	.word	0x00000000
 80016c0:	0800143f 	.word	0x0800143f

080016c4 <_printf_common>:
 80016c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016c8:	4616      	mov	r6, r2
 80016ca:	4699      	mov	r9, r3
 80016cc:	688a      	ldr	r2, [r1, #8]
 80016ce:	690b      	ldr	r3, [r1, #16]
 80016d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80016d4:	4293      	cmp	r3, r2
 80016d6:	bfb8      	it	lt
 80016d8:	4613      	movlt	r3, r2
 80016da:	6033      	str	r3, [r6, #0]
 80016dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80016e0:	4607      	mov	r7, r0
 80016e2:	460c      	mov	r4, r1
 80016e4:	b10a      	cbz	r2, 80016ea <_printf_common+0x26>
 80016e6:	3301      	adds	r3, #1
 80016e8:	6033      	str	r3, [r6, #0]
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	0699      	lsls	r1, r3, #26
 80016ee:	bf42      	ittt	mi
 80016f0:	6833      	ldrmi	r3, [r6, #0]
 80016f2:	3302      	addmi	r3, #2
 80016f4:	6033      	strmi	r3, [r6, #0]
 80016f6:	6825      	ldr	r5, [r4, #0]
 80016f8:	f015 0506 	ands.w	r5, r5, #6
 80016fc:	d106      	bne.n	800170c <_printf_common+0x48>
 80016fe:	f104 0a19 	add.w	sl, r4, #25
 8001702:	68e3      	ldr	r3, [r4, #12]
 8001704:	6832      	ldr	r2, [r6, #0]
 8001706:	1a9b      	subs	r3, r3, r2
 8001708:	42ab      	cmp	r3, r5
 800170a:	dc26      	bgt.n	800175a <_printf_common+0x96>
 800170c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001710:	1e13      	subs	r3, r2, #0
 8001712:	6822      	ldr	r2, [r4, #0]
 8001714:	bf18      	it	ne
 8001716:	2301      	movne	r3, #1
 8001718:	0692      	lsls	r2, r2, #26
 800171a:	d42b      	bmi.n	8001774 <_printf_common+0xb0>
 800171c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001720:	4649      	mov	r1, r9
 8001722:	4638      	mov	r0, r7
 8001724:	47c0      	blx	r8
 8001726:	3001      	adds	r0, #1
 8001728:	d01e      	beq.n	8001768 <_printf_common+0xa4>
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	68e5      	ldr	r5, [r4, #12]
 800172e:	6832      	ldr	r2, [r6, #0]
 8001730:	f003 0306 	and.w	r3, r3, #6
 8001734:	2b04      	cmp	r3, #4
 8001736:	bf08      	it	eq
 8001738:	1aad      	subeq	r5, r5, r2
 800173a:	68a3      	ldr	r3, [r4, #8]
 800173c:	6922      	ldr	r2, [r4, #16]
 800173e:	bf0c      	ite	eq
 8001740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001744:	2500      	movne	r5, #0
 8001746:	4293      	cmp	r3, r2
 8001748:	bfc4      	itt	gt
 800174a:	1a9b      	subgt	r3, r3, r2
 800174c:	18ed      	addgt	r5, r5, r3
 800174e:	2600      	movs	r6, #0
 8001750:	341a      	adds	r4, #26
 8001752:	42b5      	cmp	r5, r6
 8001754:	d11a      	bne.n	800178c <_printf_common+0xc8>
 8001756:	2000      	movs	r0, #0
 8001758:	e008      	b.n	800176c <_printf_common+0xa8>
 800175a:	2301      	movs	r3, #1
 800175c:	4652      	mov	r2, sl
 800175e:	4649      	mov	r1, r9
 8001760:	4638      	mov	r0, r7
 8001762:	47c0      	blx	r8
 8001764:	3001      	adds	r0, #1
 8001766:	d103      	bne.n	8001770 <_printf_common+0xac>
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001770:	3501      	adds	r5, #1
 8001772:	e7c6      	b.n	8001702 <_printf_common+0x3e>
 8001774:	18e1      	adds	r1, r4, r3
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	2030      	movs	r0, #48	; 0x30
 800177a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800177e:	4422      	add	r2, r4
 8001780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001788:	3302      	adds	r3, #2
 800178a:	e7c7      	b.n	800171c <_printf_common+0x58>
 800178c:	2301      	movs	r3, #1
 800178e:	4622      	mov	r2, r4
 8001790:	4649      	mov	r1, r9
 8001792:	4638      	mov	r0, r7
 8001794:	47c0      	blx	r8
 8001796:	3001      	adds	r0, #1
 8001798:	d0e6      	beq.n	8001768 <_printf_common+0xa4>
 800179a:	3601      	adds	r6, #1
 800179c:	e7d9      	b.n	8001752 <_printf_common+0x8e>
	...

080017a0 <_printf_i>:
 80017a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80017a4:	7e0f      	ldrb	r7, [r1, #24]
 80017a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80017a8:	2f78      	cmp	r7, #120	; 0x78
 80017aa:	4691      	mov	r9, r2
 80017ac:	4680      	mov	r8, r0
 80017ae:	460c      	mov	r4, r1
 80017b0:	469a      	mov	sl, r3
 80017b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80017b6:	d807      	bhi.n	80017c8 <_printf_i+0x28>
 80017b8:	2f62      	cmp	r7, #98	; 0x62
 80017ba:	d80a      	bhi.n	80017d2 <_printf_i+0x32>
 80017bc:	2f00      	cmp	r7, #0
 80017be:	f000 80d8 	beq.w	8001972 <_printf_i+0x1d2>
 80017c2:	2f58      	cmp	r7, #88	; 0x58
 80017c4:	f000 80a3 	beq.w	800190e <_printf_i+0x16e>
 80017c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80017cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80017d0:	e03a      	b.n	8001848 <_printf_i+0xa8>
 80017d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80017d6:	2b15      	cmp	r3, #21
 80017d8:	d8f6      	bhi.n	80017c8 <_printf_i+0x28>
 80017da:	a101      	add	r1, pc, #4	; (adr r1, 80017e0 <_printf_i+0x40>)
 80017dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80017e0:	08001839 	.word	0x08001839
 80017e4:	0800184d 	.word	0x0800184d
 80017e8:	080017c9 	.word	0x080017c9
 80017ec:	080017c9 	.word	0x080017c9
 80017f0:	080017c9 	.word	0x080017c9
 80017f4:	080017c9 	.word	0x080017c9
 80017f8:	0800184d 	.word	0x0800184d
 80017fc:	080017c9 	.word	0x080017c9
 8001800:	080017c9 	.word	0x080017c9
 8001804:	080017c9 	.word	0x080017c9
 8001808:	080017c9 	.word	0x080017c9
 800180c:	08001959 	.word	0x08001959
 8001810:	0800187d 	.word	0x0800187d
 8001814:	0800193b 	.word	0x0800193b
 8001818:	080017c9 	.word	0x080017c9
 800181c:	080017c9 	.word	0x080017c9
 8001820:	0800197b 	.word	0x0800197b
 8001824:	080017c9 	.word	0x080017c9
 8001828:	0800187d 	.word	0x0800187d
 800182c:	080017c9 	.word	0x080017c9
 8001830:	080017c9 	.word	0x080017c9
 8001834:	08001943 	.word	0x08001943
 8001838:	682b      	ldr	r3, [r5, #0]
 800183a:	1d1a      	adds	r2, r3, #4
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	602a      	str	r2, [r5, #0]
 8001840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001848:	2301      	movs	r3, #1
 800184a:	e0a3      	b.n	8001994 <_printf_i+0x1f4>
 800184c:	6820      	ldr	r0, [r4, #0]
 800184e:	6829      	ldr	r1, [r5, #0]
 8001850:	0606      	lsls	r6, r0, #24
 8001852:	f101 0304 	add.w	r3, r1, #4
 8001856:	d50a      	bpl.n	800186e <_printf_i+0xce>
 8001858:	680e      	ldr	r6, [r1, #0]
 800185a:	602b      	str	r3, [r5, #0]
 800185c:	2e00      	cmp	r6, #0
 800185e:	da03      	bge.n	8001868 <_printf_i+0xc8>
 8001860:	232d      	movs	r3, #45	; 0x2d
 8001862:	4276      	negs	r6, r6
 8001864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001868:	485e      	ldr	r0, [pc, #376]	; (80019e4 <_printf_i+0x244>)
 800186a:	230a      	movs	r3, #10
 800186c:	e019      	b.n	80018a2 <_printf_i+0x102>
 800186e:	680e      	ldr	r6, [r1, #0]
 8001870:	602b      	str	r3, [r5, #0]
 8001872:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001876:	bf18      	it	ne
 8001878:	b236      	sxthne	r6, r6
 800187a:	e7ef      	b.n	800185c <_printf_i+0xbc>
 800187c:	682b      	ldr	r3, [r5, #0]
 800187e:	6820      	ldr	r0, [r4, #0]
 8001880:	1d19      	adds	r1, r3, #4
 8001882:	6029      	str	r1, [r5, #0]
 8001884:	0601      	lsls	r1, r0, #24
 8001886:	d501      	bpl.n	800188c <_printf_i+0xec>
 8001888:	681e      	ldr	r6, [r3, #0]
 800188a:	e002      	b.n	8001892 <_printf_i+0xf2>
 800188c:	0646      	lsls	r6, r0, #25
 800188e:	d5fb      	bpl.n	8001888 <_printf_i+0xe8>
 8001890:	881e      	ldrh	r6, [r3, #0]
 8001892:	4854      	ldr	r0, [pc, #336]	; (80019e4 <_printf_i+0x244>)
 8001894:	2f6f      	cmp	r7, #111	; 0x6f
 8001896:	bf0c      	ite	eq
 8001898:	2308      	moveq	r3, #8
 800189a:	230a      	movne	r3, #10
 800189c:	2100      	movs	r1, #0
 800189e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80018a2:	6865      	ldr	r5, [r4, #4]
 80018a4:	60a5      	str	r5, [r4, #8]
 80018a6:	2d00      	cmp	r5, #0
 80018a8:	bfa2      	ittt	ge
 80018aa:	6821      	ldrge	r1, [r4, #0]
 80018ac:	f021 0104 	bicge.w	r1, r1, #4
 80018b0:	6021      	strge	r1, [r4, #0]
 80018b2:	b90e      	cbnz	r6, 80018b8 <_printf_i+0x118>
 80018b4:	2d00      	cmp	r5, #0
 80018b6:	d04d      	beq.n	8001954 <_printf_i+0x1b4>
 80018b8:	4615      	mov	r5, r2
 80018ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80018be:	fb03 6711 	mls	r7, r3, r1, r6
 80018c2:	5dc7      	ldrb	r7, [r0, r7]
 80018c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80018c8:	4637      	mov	r7, r6
 80018ca:	42bb      	cmp	r3, r7
 80018cc:	460e      	mov	r6, r1
 80018ce:	d9f4      	bls.n	80018ba <_printf_i+0x11a>
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d10b      	bne.n	80018ec <_printf_i+0x14c>
 80018d4:	6823      	ldr	r3, [r4, #0]
 80018d6:	07de      	lsls	r6, r3, #31
 80018d8:	d508      	bpl.n	80018ec <_printf_i+0x14c>
 80018da:	6923      	ldr	r3, [r4, #16]
 80018dc:	6861      	ldr	r1, [r4, #4]
 80018de:	4299      	cmp	r1, r3
 80018e0:	bfde      	ittt	le
 80018e2:	2330      	movle	r3, #48	; 0x30
 80018e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80018e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80018ec:	1b52      	subs	r2, r2, r5
 80018ee:	6122      	str	r2, [r4, #16]
 80018f0:	f8cd a000 	str.w	sl, [sp]
 80018f4:	464b      	mov	r3, r9
 80018f6:	aa03      	add	r2, sp, #12
 80018f8:	4621      	mov	r1, r4
 80018fa:	4640      	mov	r0, r8
 80018fc:	f7ff fee2 	bl	80016c4 <_printf_common>
 8001900:	3001      	adds	r0, #1
 8001902:	d14c      	bne.n	800199e <_printf_i+0x1fe>
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	b004      	add	sp, #16
 800190a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800190e:	4835      	ldr	r0, [pc, #212]	; (80019e4 <_printf_i+0x244>)
 8001910:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001914:	6829      	ldr	r1, [r5, #0]
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	f851 6b04 	ldr.w	r6, [r1], #4
 800191c:	6029      	str	r1, [r5, #0]
 800191e:	061d      	lsls	r5, r3, #24
 8001920:	d514      	bpl.n	800194c <_printf_i+0x1ac>
 8001922:	07df      	lsls	r7, r3, #31
 8001924:	bf44      	itt	mi
 8001926:	f043 0320 	orrmi.w	r3, r3, #32
 800192a:	6023      	strmi	r3, [r4, #0]
 800192c:	b91e      	cbnz	r6, 8001936 <_printf_i+0x196>
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	f023 0320 	bic.w	r3, r3, #32
 8001934:	6023      	str	r3, [r4, #0]
 8001936:	2310      	movs	r3, #16
 8001938:	e7b0      	b.n	800189c <_printf_i+0xfc>
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	f043 0320 	orr.w	r3, r3, #32
 8001940:	6023      	str	r3, [r4, #0]
 8001942:	2378      	movs	r3, #120	; 0x78
 8001944:	4828      	ldr	r0, [pc, #160]	; (80019e8 <_printf_i+0x248>)
 8001946:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800194a:	e7e3      	b.n	8001914 <_printf_i+0x174>
 800194c:	0659      	lsls	r1, r3, #25
 800194e:	bf48      	it	mi
 8001950:	b2b6      	uxthmi	r6, r6
 8001952:	e7e6      	b.n	8001922 <_printf_i+0x182>
 8001954:	4615      	mov	r5, r2
 8001956:	e7bb      	b.n	80018d0 <_printf_i+0x130>
 8001958:	682b      	ldr	r3, [r5, #0]
 800195a:	6826      	ldr	r6, [r4, #0]
 800195c:	6961      	ldr	r1, [r4, #20]
 800195e:	1d18      	adds	r0, r3, #4
 8001960:	6028      	str	r0, [r5, #0]
 8001962:	0635      	lsls	r5, r6, #24
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	d501      	bpl.n	800196c <_printf_i+0x1cc>
 8001968:	6019      	str	r1, [r3, #0]
 800196a:	e002      	b.n	8001972 <_printf_i+0x1d2>
 800196c:	0670      	lsls	r0, r6, #25
 800196e:	d5fb      	bpl.n	8001968 <_printf_i+0x1c8>
 8001970:	8019      	strh	r1, [r3, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	6123      	str	r3, [r4, #16]
 8001976:	4615      	mov	r5, r2
 8001978:	e7ba      	b.n	80018f0 <_printf_i+0x150>
 800197a:	682b      	ldr	r3, [r5, #0]
 800197c:	1d1a      	adds	r2, r3, #4
 800197e:	602a      	str	r2, [r5, #0]
 8001980:	681d      	ldr	r5, [r3, #0]
 8001982:	6862      	ldr	r2, [r4, #4]
 8001984:	2100      	movs	r1, #0
 8001986:	4628      	mov	r0, r5
 8001988:	f7fe fc32 	bl	80001f0 <memchr>
 800198c:	b108      	cbz	r0, 8001992 <_printf_i+0x1f2>
 800198e:	1b40      	subs	r0, r0, r5
 8001990:	6060      	str	r0, [r4, #4]
 8001992:	6863      	ldr	r3, [r4, #4]
 8001994:	6123      	str	r3, [r4, #16]
 8001996:	2300      	movs	r3, #0
 8001998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800199c:	e7a8      	b.n	80018f0 <_printf_i+0x150>
 800199e:	6923      	ldr	r3, [r4, #16]
 80019a0:	462a      	mov	r2, r5
 80019a2:	4649      	mov	r1, r9
 80019a4:	4640      	mov	r0, r8
 80019a6:	47d0      	blx	sl
 80019a8:	3001      	adds	r0, #1
 80019aa:	d0ab      	beq.n	8001904 <_printf_i+0x164>
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	079b      	lsls	r3, r3, #30
 80019b0:	d413      	bmi.n	80019da <_printf_i+0x23a>
 80019b2:	68e0      	ldr	r0, [r4, #12]
 80019b4:	9b03      	ldr	r3, [sp, #12]
 80019b6:	4298      	cmp	r0, r3
 80019b8:	bfb8      	it	lt
 80019ba:	4618      	movlt	r0, r3
 80019bc:	e7a4      	b.n	8001908 <_printf_i+0x168>
 80019be:	2301      	movs	r3, #1
 80019c0:	4632      	mov	r2, r6
 80019c2:	4649      	mov	r1, r9
 80019c4:	4640      	mov	r0, r8
 80019c6:	47d0      	blx	sl
 80019c8:	3001      	adds	r0, #1
 80019ca:	d09b      	beq.n	8001904 <_printf_i+0x164>
 80019cc:	3501      	adds	r5, #1
 80019ce:	68e3      	ldr	r3, [r4, #12]
 80019d0:	9903      	ldr	r1, [sp, #12]
 80019d2:	1a5b      	subs	r3, r3, r1
 80019d4:	42ab      	cmp	r3, r5
 80019d6:	dcf2      	bgt.n	80019be <_printf_i+0x21e>
 80019d8:	e7eb      	b.n	80019b2 <_printf_i+0x212>
 80019da:	2500      	movs	r5, #0
 80019dc:	f104 0619 	add.w	r6, r4, #25
 80019e0:	e7f5      	b.n	80019ce <_printf_i+0x22e>
 80019e2:	bf00      	nop
 80019e4:	08002071 	.word	0x08002071
 80019e8:	08002082 	.word	0x08002082

080019ec <_sbrk_r>:
 80019ec:	b538      	push	{r3, r4, r5, lr}
 80019ee:	4d06      	ldr	r5, [pc, #24]	; (8001a08 <_sbrk_r+0x1c>)
 80019f0:	2300      	movs	r3, #0
 80019f2:	4604      	mov	r4, r0
 80019f4:	4608      	mov	r0, r1
 80019f6:	602b      	str	r3, [r5, #0]
 80019f8:	f7fe fd9a 	bl	8000530 <_sbrk>
 80019fc:	1c43      	adds	r3, r0, #1
 80019fe:	d102      	bne.n	8001a06 <_sbrk_r+0x1a>
 8001a00:	682b      	ldr	r3, [r5, #0]
 8001a02:	b103      	cbz	r3, 8001a06 <_sbrk_r+0x1a>
 8001a04:	6023      	str	r3, [r4, #0]
 8001a06:	bd38      	pop	{r3, r4, r5, pc}
 8001a08:	200000ec 	.word	0x200000ec

08001a0c <__sread>:
 8001a0c:	b510      	push	{r4, lr}
 8001a0e:	460c      	mov	r4, r1
 8001a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a14:	f000 faac 	bl	8001f70 <_read_r>
 8001a18:	2800      	cmp	r0, #0
 8001a1a:	bfab      	itete	ge
 8001a1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8001a20:	181b      	addge	r3, r3, r0
 8001a22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a26:	bfac      	ite	ge
 8001a28:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a2a:	81a3      	strhlt	r3, [r4, #12]
 8001a2c:	bd10      	pop	{r4, pc}

08001a2e <__swrite>:
 8001a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a32:	461f      	mov	r7, r3
 8001a34:	898b      	ldrh	r3, [r1, #12]
 8001a36:	05db      	lsls	r3, r3, #23
 8001a38:	4605      	mov	r5, r0
 8001a3a:	460c      	mov	r4, r1
 8001a3c:	4616      	mov	r6, r2
 8001a3e:	d505      	bpl.n	8001a4c <__swrite+0x1e>
 8001a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a44:	2302      	movs	r3, #2
 8001a46:	2200      	movs	r2, #0
 8001a48:	f000 f9c4 	bl	8001dd4 <_lseek_r>
 8001a4c:	89a3      	ldrh	r3, [r4, #12]
 8001a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a56:	81a3      	strh	r3, [r4, #12]
 8001a58:	4632      	mov	r2, r6
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	4628      	mov	r0, r5
 8001a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a62:	f000 b869 	b.w	8001b38 <_write_r>

08001a66 <__sseek>:
 8001a66:	b510      	push	{r4, lr}
 8001a68:	460c      	mov	r4, r1
 8001a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a6e:	f000 f9b1 	bl	8001dd4 <_lseek_r>
 8001a72:	1c43      	adds	r3, r0, #1
 8001a74:	89a3      	ldrh	r3, [r4, #12]
 8001a76:	bf15      	itete	ne
 8001a78:	6560      	strne	r0, [r4, #84]	; 0x54
 8001a7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001a7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001a82:	81a3      	strheq	r3, [r4, #12]
 8001a84:	bf18      	it	ne
 8001a86:	81a3      	strhne	r3, [r4, #12]
 8001a88:	bd10      	pop	{r4, pc}

08001a8a <__sclose>:
 8001a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a8e:	f000 b8d3 	b.w	8001c38 <_close_r>
	...

08001a94 <__swbuf_r>:
 8001a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a96:	460e      	mov	r6, r1
 8001a98:	4614      	mov	r4, r2
 8001a9a:	4605      	mov	r5, r0
 8001a9c:	b118      	cbz	r0, 8001aa6 <__swbuf_r+0x12>
 8001a9e:	6983      	ldr	r3, [r0, #24]
 8001aa0:	b90b      	cbnz	r3, 8001aa6 <__swbuf_r+0x12>
 8001aa2:	f7ff fb83 	bl	80011ac <__sinit>
 8001aa6:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <__swbuf_r+0x98>)
 8001aa8:	429c      	cmp	r4, r3
 8001aaa:	d12b      	bne.n	8001b04 <__swbuf_r+0x70>
 8001aac:	686c      	ldr	r4, [r5, #4]
 8001aae:	69a3      	ldr	r3, [r4, #24]
 8001ab0:	60a3      	str	r3, [r4, #8]
 8001ab2:	89a3      	ldrh	r3, [r4, #12]
 8001ab4:	071a      	lsls	r2, r3, #28
 8001ab6:	d52f      	bpl.n	8001b18 <__swbuf_r+0x84>
 8001ab8:	6923      	ldr	r3, [r4, #16]
 8001aba:	b36b      	cbz	r3, 8001b18 <__swbuf_r+0x84>
 8001abc:	6923      	ldr	r3, [r4, #16]
 8001abe:	6820      	ldr	r0, [r4, #0]
 8001ac0:	1ac0      	subs	r0, r0, r3
 8001ac2:	6963      	ldr	r3, [r4, #20]
 8001ac4:	b2f6      	uxtb	r6, r6
 8001ac6:	4283      	cmp	r3, r0
 8001ac8:	4637      	mov	r7, r6
 8001aca:	dc04      	bgt.n	8001ad6 <__swbuf_r+0x42>
 8001acc:	4621      	mov	r1, r4
 8001ace:	4628      	mov	r0, r5
 8001ad0:	f000 f944 	bl	8001d5c <_fflush_r>
 8001ad4:	bb30      	cbnz	r0, 8001b24 <__swbuf_r+0x90>
 8001ad6:	68a3      	ldr	r3, [r4, #8]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	60a3      	str	r3, [r4, #8]
 8001adc:	6823      	ldr	r3, [r4, #0]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	6022      	str	r2, [r4, #0]
 8001ae2:	701e      	strb	r6, [r3, #0]
 8001ae4:	6963      	ldr	r3, [r4, #20]
 8001ae6:	3001      	adds	r0, #1
 8001ae8:	4283      	cmp	r3, r0
 8001aea:	d004      	beq.n	8001af6 <__swbuf_r+0x62>
 8001aec:	89a3      	ldrh	r3, [r4, #12]
 8001aee:	07db      	lsls	r3, r3, #31
 8001af0:	d506      	bpl.n	8001b00 <__swbuf_r+0x6c>
 8001af2:	2e0a      	cmp	r6, #10
 8001af4:	d104      	bne.n	8001b00 <__swbuf_r+0x6c>
 8001af6:	4621      	mov	r1, r4
 8001af8:	4628      	mov	r0, r5
 8001afa:	f000 f92f 	bl	8001d5c <_fflush_r>
 8001afe:	b988      	cbnz	r0, 8001b24 <__swbuf_r+0x90>
 8001b00:	4638      	mov	r0, r7
 8001b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b04:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <__swbuf_r+0x9c>)
 8001b06:	429c      	cmp	r4, r3
 8001b08:	d101      	bne.n	8001b0e <__swbuf_r+0x7a>
 8001b0a:	68ac      	ldr	r4, [r5, #8]
 8001b0c:	e7cf      	b.n	8001aae <__swbuf_r+0x1a>
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <__swbuf_r+0xa0>)
 8001b10:	429c      	cmp	r4, r3
 8001b12:	bf08      	it	eq
 8001b14:	68ec      	ldreq	r4, [r5, #12]
 8001b16:	e7ca      	b.n	8001aae <__swbuf_r+0x1a>
 8001b18:	4621      	mov	r1, r4
 8001b1a:	4628      	mov	r0, r5
 8001b1c:	f000 f81e 	bl	8001b5c <__swsetup_r>
 8001b20:	2800      	cmp	r0, #0
 8001b22:	d0cb      	beq.n	8001abc <__swbuf_r+0x28>
 8001b24:	f04f 37ff 	mov.w	r7, #4294967295
 8001b28:	e7ea      	b.n	8001b00 <__swbuf_r+0x6c>
 8001b2a:	bf00      	nop
 8001b2c:	08002020 	.word	0x08002020
 8001b30:	08002040 	.word	0x08002040
 8001b34:	08002000 	.word	0x08002000

08001b38 <_write_r>:
 8001b38:	b538      	push	{r3, r4, r5, lr}
 8001b3a:	4d07      	ldr	r5, [pc, #28]	; (8001b58 <_write_r+0x20>)
 8001b3c:	4604      	mov	r4, r0
 8001b3e:	4608      	mov	r0, r1
 8001b40:	4611      	mov	r1, r2
 8001b42:	2200      	movs	r2, #0
 8001b44:	602a      	str	r2, [r5, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	f7fe fca5 	bl	8000496 <_write>
 8001b4c:	1c43      	adds	r3, r0, #1
 8001b4e:	d102      	bne.n	8001b56 <_write_r+0x1e>
 8001b50:	682b      	ldr	r3, [r5, #0]
 8001b52:	b103      	cbz	r3, 8001b56 <_write_r+0x1e>
 8001b54:	6023      	str	r3, [r4, #0]
 8001b56:	bd38      	pop	{r3, r4, r5, pc}
 8001b58:	200000ec 	.word	0x200000ec

08001b5c <__swsetup_r>:
 8001b5c:	4b32      	ldr	r3, [pc, #200]	; (8001c28 <__swsetup_r+0xcc>)
 8001b5e:	b570      	push	{r4, r5, r6, lr}
 8001b60:	681d      	ldr	r5, [r3, #0]
 8001b62:	4606      	mov	r6, r0
 8001b64:	460c      	mov	r4, r1
 8001b66:	b125      	cbz	r5, 8001b72 <__swsetup_r+0x16>
 8001b68:	69ab      	ldr	r3, [r5, #24]
 8001b6a:	b913      	cbnz	r3, 8001b72 <__swsetup_r+0x16>
 8001b6c:	4628      	mov	r0, r5
 8001b6e:	f7ff fb1d 	bl	80011ac <__sinit>
 8001b72:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <__swsetup_r+0xd0>)
 8001b74:	429c      	cmp	r4, r3
 8001b76:	d10f      	bne.n	8001b98 <__swsetup_r+0x3c>
 8001b78:	686c      	ldr	r4, [r5, #4]
 8001b7a:	89a3      	ldrh	r3, [r4, #12]
 8001b7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b80:	0719      	lsls	r1, r3, #28
 8001b82:	d42c      	bmi.n	8001bde <__swsetup_r+0x82>
 8001b84:	06dd      	lsls	r5, r3, #27
 8001b86:	d411      	bmi.n	8001bac <__swsetup_r+0x50>
 8001b88:	2309      	movs	r3, #9
 8001b8a:	6033      	str	r3, [r6, #0]
 8001b8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001b90:	81a3      	strh	r3, [r4, #12]
 8001b92:	f04f 30ff 	mov.w	r0, #4294967295
 8001b96:	e03e      	b.n	8001c16 <__swsetup_r+0xba>
 8001b98:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <__swsetup_r+0xd4>)
 8001b9a:	429c      	cmp	r4, r3
 8001b9c:	d101      	bne.n	8001ba2 <__swsetup_r+0x46>
 8001b9e:	68ac      	ldr	r4, [r5, #8]
 8001ba0:	e7eb      	b.n	8001b7a <__swsetup_r+0x1e>
 8001ba2:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <__swsetup_r+0xd8>)
 8001ba4:	429c      	cmp	r4, r3
 8001ba6:	bf08      	it	eq
 8001ba8:	68ec      	ldreq	r4, [r5, #12]
 8001baa:	e7e6      	b.n	8001b7a <__swsetup_r+0x1e>
 8001bac:	0758      	lsls	r0, r3, #29
 8001bae:	d512      	bpl.n	8001bd6 <__swsetup_r+0x7a>
 8001bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bb2:	b141      	cbz	r1, 8001bc6 <__swsetup_r+0x6a>
 8001bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bb8:	4299      	cmp	r1, r3
 8001bba:	d002      	beq.n	8001bc2 <__swsetup_r+0x66>
 8001bbc:	4630      	mov	r0, r6
 8001bbe:	f000 f98d 	bl	8001edc <_free_r>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	6363      	str	r3, [r4, #52]	; 0x34
 8001bc6:	89a3      	ldrh	r3, [r4, #12]
 8001bc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001bcc:	81a3      	strh	r3, [r4, #12]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	6063      	str	r3, [r4, #4]
 8001bd2:	6923      	ldr	r3, [r4, #16]
 8001bd4:	6023      	str	r3, [r4, #0]
 8001bd6:	89a3      	ldrh	r3, [r4, #12]
 8001bd8:	f043 0308 	orr.w	r3, r3, #8
 8001bdc:	81a3      	strh	r3, [r4, #12]
 8001bde:	6923      	ldr	r3, [r4, #16]
 8001be0:	b94b      	cbnz	r3, 8001bf6 <__swsetup_r+0x9a>
 8001be2:	89a3      	ldrh	r3, [r4, #12]
 8001be4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bec:	d003      	beq.n	8001bf6 <__swsetup_r+0x9a>
 8001bee:	4621      	mov	r1, r4
 8001bf0:	4630      	mov	r0, r6
 8001bf2:	f000 f927 	bl	8001e44 <__smakebuf_r>
 8001bf6:	89a0      	ldrh	r0, [r4, #12]
 8001bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bfc:	f010 0301 	ands.w	r3, r0, #1
 8001c00:	d00a      	beq.n	8001c18 <__swsetup_r+0xbc>
 8001c02:	2300      	movs	r3, #0
 8001c04:	60a3      	str	r3, [r4, #8]
 8001c06:	6963      	ldr	r3, [r4, #20]
 8001c08:	425b      	negs	r3, r3
 8001c0a:	61a3      	str	r3, [r4, #24]
 8001c0c:	6923      	ldr	r3, [r4, #16]
 8001c0e:	b943      	cbnz	r3, 8001c22 <__swsetup_r+0xc6>
 8001c10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c14:	d1ba      	bne.n	8001b8c <__swsetup_r+0x30>
 8001c16:	bd70      	pop	{r4, r5, r6, pc}
 8001c18:	0781      	lsls	r1, r0, #30
 8001c1a:	bf58      	it	pl
 8001c1c:	6963      	ldrpl	r3, [r4, #20]
 8001c1e:	60a3      	str	r3, [r4, #8]
 8001c20:	e7f4      	b.n	8001c0c <__swsetup_r+0xb0>
 8001c22:	2000      	movs	r0, #0
 8001c24:	e7f7      	b.n	8001c16 <__swsetup_r+0xba>
 8001c26:	bf00      	nop
 8001c28:	20000014 	.word	0x20000014
 8001c2c:	08002020 	.word	0x08002020
 8001c30:	08002040 	.word	0x08002040
 8001c34:	08002000 	.word	0x08002000

08001c38 <_close_r>:
 8001c38:	b538      	push	{r3, r4, r5, lr}
 8001c3a:	4d06      	ldr	r5, [pc, #24]	; (8001c54 <_close_r+0x1c>)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	4604      	mov	r4, r0
 8001c40:	4608      	mov	r0, r1
 8001c42:	602b      	str	r3, [r5, #0]
 8001c44:	f7fe fc43 	bl	80004ce <_close>
 8001c48:	1c43      	adds	r3, r0, #1
 8001c4a:	d102      	bne.n	8001c52 <_close_r+0x1a>
 8001c4c:	682b      	ldr	r3, [r5, #0]
 8001c4e:	b103      	cbz	r3, 8001c52 <_close_r+0x1a>
 8001c50:	6023      	str	r3, [r4, #0]
 8001c52:	bd38      	pop	{r3, r4, r5, pc}
 8001c54:	200000ec 	.word	0x200000ec

08001c58 <__sflush_r>:
 8001c58:	898a      	ldrh	r2, [r1, #12]
 8001c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5c:	4605      	mov	r5, r0
 8001c5e:	0710      	lsls	r0, r2, #28
 8001c60:	460c      	mov	r4, r1
 8001c62:	d457      	bmi.n	8001d14 <__sflush_r+0xbc>
 8001c64:	684b      	ldr	r3, [r1, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	dc04      	bgt.n	8001c74 <__sflush_r+0x1c>
 8001c6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	dc01      	bgt.n	8001c74 <__sflush_r+0x1c>
 8001c70:	2000      	movs	r0, #0
 8001c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c76:	2e00      	cmp	r6, #0
 8001c78:	d0fa      	beq.n	8001c70 <__sflush_r+0x18>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c80:	682f      	ldr	r7, [r5, #0]
 8001c82:	602b      	str	r3, [r5, #0]
 8001c84:	d032      	beq.n	8001cec <__sflush_r+0x94>
 8001c86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c88:	89a3      	ldrh	r3, [r4, #12]
 8001c8a:	075a      	lsls	r2, r3, #29
 8001c8c:	d505      	bpl.n	8001c9a <__sflush_r+0x42>
 8001c8e:	6863      	ldr	r3, [r4, #4]
 8001c90:	1ac0      	subs	r0, r0, r3
 8001c92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c94:	b10b      	cbz	r3, 8001c9a <__sflush_r+0x42>
 8001c96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c98:	1ac0      	subs	r0, r0, r3
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ca0:	6a21      	ldr	r1, [r4, #32]
 8001ca2:	4628      	mov	r0, r5
 8001ca4:	47b0      	blx	r6
 8001ca6:	1c43      	adds	r3, r0, #1
 8001ca8:	89a3      	ldrh	r3, [r4, #12]
 8001caa:	d106      	bne.n	8001cba <__sflush_r+0x62>
 8001cac:	6829      	ldr	r1, [r5, #0]
 8001cae:	291d      	cmp	r1, #29
 8001cb0:	d82c      	bhi.n	8001d0c <__sflush_r+0xb4>
 8001cb2:	4a29      	ldr	r2, [pc, #164]	; (8001d58 <__sflush_r+0x100>)
 8001cb4:	40ca      	lsrs	r2, r1
 8001cb6:	07d6      	lsls	r6, r2, #31
 8001cb8:	d528      	bpl.n	8001d0c <__sflush_r+0xb4>
 8001cba:	2200      	movs	r2, #0
 8001cbc:	6062      	str	r2, [r4, #4]
 8001cbe:	04d9      	lsls	r1, r3, #19
 8001cc0:	6922      	ldr	r2, [r4, #16]
 8001cc2:	6022      	str	r2, [r4, #0]
 8001cc4:	d504      	bpl.n	8001cd0 <__sflush_r+0x78>
 8001cc6:	1c42      	adds	r2, r0, #1
 8001cc8:	d101      	bne.n	8001cce <__sflush_r+0x76>
 8001cca:	682b      	ldr	r3, [r5, #0]
 8001ccc:	b903      	cbnz	r3, 8001cd0 <__sflush_r+0x78>
 8001cce:	6560      	str	r0, [r4, #84]	; 0x54
 8001cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cd2:	602f      	str	r7, [r5, #0]
 8001cd4:	2900      	cmp	r1, #0
 8001cd6:	d0cb      	beq.n	8001c70 <__sflush_r+0x18>
 8001cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cdc:	4299      	cmp	r1, r3
 8001cde:	d002      	beq.n	8001ce6 <__sflush_r+0x8e>
 8001ce0:	4628      	mov	r0, r5
 8001ce2:	f000 f8fb 	bl	8001edc <_free_r>
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	6360      	str	r0, [r4, #52]	; 0x34
 8001cea:	e7c2      	b.n	8001c72 <__sflush_r+0x1a>
 8001cec:	6a21      	ldr	r1, [r4, #32]
 8001cee:	2301      	movs	r3, #1
 8001cf0:	4628      	mov	r0, r5
 8001cf2:	47b0      	blx	r6
 8001cf4:	1c41      	adds	r1, r0, #1
 8001cf6:	d1c7      	bne.n	8001c88 <__sflush_r+0x30>
 8001cf8:	682b      	ldr	r3, [r5, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0c4      	beq.n	8001c88 <__sflush_r+0x30>
 8001cfe:	2b1d      	cmp	r3, #29
 8001d00:	d001      	beq.n	8001d06 <__sflush_r+0xae>
 8001d02:	2b16      	cmp	r3, #22
 8001d04:	d101      	bne.n	8001d0a <__sflush_r+0xb2>
 8001d06:	602f      	str	r7, [r5, #0]
 8001d08:	e7b2      	b.n	8001c70 <__sflush_r+0x18>
 8001d0a:	89a3      	ldrh	r3, [r4, #12]
 8001d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d10:	81a3      	strh	r3, [r4, #12]
 8001d12:	e7ae      	b.n	8001c72 <__sflush_r+0x1a>
 8001d14:	690f      	ldr	r7, [r1, #16]
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d0aa      	beq.n	8001c70 <__sflush_r+0x18>
 8001d1a:	0793      	lsls	r3, r2, #30
 8001d1c:	680e      	ldr	r6, [r1, #0]
 8001d1e:	bf08      	it	eq
 8001d20:	694b      	ldreq	r3, [r1, #20]
 8001d22:	600f      	str	r7, [r1, #0]
 8001d24:	bf18      	it	ne
 8001d26:	2300      	movne	r3, #0
 8001d28:	1bf6      	subs	r6, r6, r7
 8001d2a:	608b      	str	r3, [r1, #8]
 8001d2c:	2e00      	cmp	r6, #0
 8001d2e:	dd9f      	ble.n	8001c70 <__sflush_r+0x18>
 8001d30:	6a21      	ldr	r1, [r4, #32]
 8001d32:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001d36:	4633      	mov	r3, r6
 8001d38:	463a      	mov	r2, r7
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	47e0      	blx	ip
 8001d3e:	2800      	cmp	r0, #0
 8001d40:	dc06      	bgt.n	8001d50 <__sflush_r+0xf8>
 8001d42:	89a3      	ldrh	r3, [r4, #12]
 8001d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d48:	81a3      	strh	r3, [r4, #12]
 8001d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4e:	e790      	b.n	8001c72 <__sflush_r+0x1a>
 8001d50:	4407      	add	r7, r0
 8001d52:	1a36      	subs	r6, r6, r0
 8001d54:	e7ea      	b.n	8001d2c <__sflush_r+0xd4>
 8001d56:	bf00      	nop
 8001d58:	20400001 	.word	0x20400001

08001d5c <_fflush_r>:
 8001d5c:	b538      	push	{r3, r4, r5, lr}
 8001d5e:	690b      	ldr	r3, [r1, #16]
 8001d60:	4605      	mov	r5, r0
 8001d62:	460c      	mov	r4, r1
 8001d64:	b913      	cbnz	r3, 8001d6c <_fflush_r+0x10>
 8001d66:	2500      	movs	r5, #0
 8001d68:	4628      	mov	r0, r5
 8001d6a:	bd38      	pop	{r3, r4, r5, pc}
 8001d6c:	b118      	cbz	r0, 8001d76 <_fflush_r+0x1a>
 8001d6e:	6983      	ldr	r3, [r0, #24]
 8001d70:	b90b      	cbnz	r3, 8001d76 <_fflush_r+0x1a>
 8001d72:	f7ff fa1b 	bl	80011ac <__sinit>
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <_fflush_r+0x6c>)
 8001d78:	429c      	cmp	r4, r3
 8001d7a:	d11b      	bne.n	8001db4 <_fflush_r+0x58>
 8001d7c:	686c      	ldr	r4, [r5, #4]
 8001d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0ef      	beq.n	8001d66 <_fflush_r+0xa>
 8001d86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d88:	07d0      	lsls	r0, r2, #31
 8001d8a:	d404      	bmi.n	8001d96 <_fflush_r+0x3a>
 8001d8c:	0599      	lsls	r1, r3, #22
 8001d8e:	d402      	bmi.n	8001d96 <_fflush_r+0x3a>
 8001d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d92:	f7ff faa9 	bl	80012e8 <__retarget_lock_acquire_recursive>
 8001d96:	4628      	mov	r0, r5
 8001d98:	4621      	mov	r1, r4
 8001d9a:	f7ff ff5d 	bl	8001c58 <__sflush_r>
 8001d9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001da0:	07da      	lsls	r2, r3, #31
 8001da2:	4605      	mov	r5, r0
 8001da4:	d4e0      	bmi.n	8001d68 <_fflush_r+0xc>
 8001da6:	89a3      	ldrh	r3, [r4, #12]
 8001da8:	059b      	lsls	r3, r3, #22
 8001daa:	d4dd      	bmi.n	8001d68 <_fflush_r+0xc>
 8001dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dae:	f7ff fa9c 	bl	80012ea <__retarget_lock_release_recursive>
 8001db2:	e7d9      	b.n	8001d68 <_fflush_r+0xc>
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <_fflush_r+0x70>)
 8001db6:	429c      	cmp	r4, r3
 8001db8:	d101      	bne.n	8001dbe <_fflush_r+0x62>
 8001dba:	68ac      	ldr	r4, [r5, #8]
 8001dbc:	e7df      	b.n	8001d7e <_fflush_r+0x22>
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <_fflush_r+0x74>)
 8001dc0:	429c      	cmp	r4, r3
 8001dc2:	bf08      	it	eq
 8001dc4:	68ec      	ldreq	r4, [r5, #12]
 8001dc6:	e7da      	b.n	8001d7e <_fflush_r+0x22>
 8001dc8:	08002020 	.word	0x08002020
 8001dcc:	08002040 	.word	0x08002040
 8001dd0:	08002000 	.word	0x08002000

08001dd4 <_lseek_r>:
 8001dd4:	b538      	push	{r3, r4, r5, lr}
 8001dd6:	4d07      	ldr	r5, [pc, #28]	; (8001df4 <_lseek_r+0x20>)
 8001dd8:	4604      	mov	r4, r0
 8001dda:	4608      	mov	r0, r1
 8001ddc:	4611      	mov	r1, r2
 8001dde:	2200      	movs	r2, #0
 8001de0:	602a      	str	r2, [r5, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	f7fe fb97 	bl	8000516 <_lseek>
 8001de8:	1c43      	adds	r3, r0, #1
 8001dea:	d102      	bne.n	8001df2 <_lseek_r+0x1e>
 8001dec:	682b      	ldr	r3, [r5, #0]
 8001dee:	b103      	cbz	r3, 8001df2 <_lseek_r+0x1e>
 8001df0:	6023      	str	r3, [r4, #0]
 8001df2:	bd38      	pop	{r3, r4, r5, pc}
 8001df4:	200000ec 	.word	0x200000ec

08001df8 <__swhatbuf_r>:
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	460e      	mov	r6, r1
 8001dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e00:	2900      	cmp	r1, #0
 8001e02:	b096      	sub	sp, #88	; 0x58
 8001e04:	4614      	mov	r4, r2
 8001e06:	461d      	mov	r5, r3
 8001e08:	da08      	bge.n	8001e1c <__swhatbuf_r+0x24>
 8001e0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	602a      	str	r2, [r5, #0]
 8001e12:	061a      	lsls	r2, r3, #24
 8001e14:	d410      	bmi.n	8001e38 <__swhatbuf_r+0x40>
 8001e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e1a:	e00e      	b.n	8001e3a <__swhatbuf_r+0x42>
 8001e1c:	466a      	mov	r2, sp
 8001e1e:	f000 f8b9 	bl	8001f94 <_fstat_r>
 8001e22:	2800      	cmp	r0, #0
 8001e24:	dbf1      	blt.n	8001e0a <__swhatbuf_r+0x12>
 8001e26:	9a01      	ldr	r2, [sp, #4]
 8001e28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e30:	425a      	negs	r2, r3
 8001e32:	415a      	adcs	r2, r3
 8001e34:	602a      	str	r2, [r5, #0]
 8001e36:	e7ee      	b.n	8001e16 <__swhatbuf_r+0x1e>
 8001e38:	2340      	movs	r3, #64	; 0x40
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	6023      	str	r3, [r4, #0]
 8001e3e:	b016      	add	sp, #88	; 0x58
 8001e40:	bd70      	pop	{r4, r5, r6, pc}
	...

08001e44 <__smakebuf_r>:
 8001e44:	898b      	ldrh	r3, [r1, #12]
 8001e46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e48:	079d      	lsls	r5, r3, #30
 8001e4a:	4606      	mov	r6, r0
 8001e4c:	460c      	mov	r4, r1
 8001e4e:	d507      	bpl.n	8001e60 <__smakebuf_r+0x1c>
 8001e50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e54:	6023      	str	r3, [r4, #0]
 8001e56:	6123      	str	r3, [r4, #16]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	6163      	str	r3, [r4, #20]
 8001e5c:	b002      	add	sp, #8
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}
 8001e60:	ab01      	add	r3, sp, #4
 8001e62:	466a      	mov	r2, sp
 8001e64:	f7ff ffc8 	bl	8001df8 <__swhatbuf_r>
 8001e68:	9900      	ldr	r1, [sp, #0]
 8001e6a:	4605      	mov	r5, r0
 8001e6c:	4630      	mov	r0, r6
 8001e6e:	f7ff fa5d 	bl	800132c <_malloc_r>
 8001e72:	b948      	cbnz	r0, 8001e88 <__smakebuf_r+0x44>
 8001e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e78:	059a      	lsls	r2, r3, #22
 8001e7a:	d4ef      	bmi.n	8001e5c <__smakebuf_r+0x18>
 8001e7c:	f023 0303 	bic.w	r3, r3, #3
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	81a3      	strh	r3, [r4, #12]
 8001e86:	e7e3      	b.n	8001e50 <__smakebuf_r+0xc>
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <__smakebuf_r+0x7c>)
 8001e8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e8c:	89a3      	ldrh	r3, [r4, #12]
 8001e8e:	6020      	str	r0, [r4, #0]
 8001e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e94:	81a3      	strh	r3, [r4, #12]
 8001e96:	9b00      	ldr	r3, [sp, #0]
 8001e98:	6163      	str	r3, [r4, #20]
 8001e9a:	9b01      	ldr	r3, [sp, #4]
 8001e9c:	6120      	str	r0, [r4, #16]
 8001e9e:	b15b      	cbz	r3, 8001eb8 <__smakebuf_r+0x74>
 8001ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ea4:	4630      	mov	r0, r6
 8001ea6:	f000 f887 	bl	8001fb8 <_isatty_r>
 8001eaa:	b128      	cbz	r0, 8001eb8 <__smakebuf_r+0x74>
 8001eac:	89a3      	ldrh	r3, [r4, #12]
 8001eae:	f023 0303 	bic.w	r3, r3, #3
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	81a3      	strh	r3, [r4, #12]
 8001eb8:	89a0      	ldrh	r0, [r4, #12]
 8001eba:	4305      	orrs	r5, r0
 8001ebc:	81a5      	strh	r5, [r4, #12]
 8001ebe:	e7cd      	b.n	8001e5c <__smakebuf_r+0x18>
 8001ec0:	08001145 	.word	0x08001145

08001ec4 <__malloc_lock>:
 8001ec4:	4801      	ldr	r0, [pc, #4]	; (8001ecc <__malloc_lock+0x8>)
 8001ec6:	f7ff ba0f 	b.w	80012e8 <__retarget_lock_acquire_recursive>
 8001eca:	bf00      	nop
 8001ecc:	200000e0 	.word	0x200000e0

08001ed0 <__malloc_unlock>:
 8001ed0:	4801      	ldr	r0, [pc, #4]	; (8001ed8 <__malloc_unlock+0x8>)
 8001ed2:	f7ff ba0a 	b.w	80012ea <__retarget_lock_release_recursive>
 8001ed6:	bf00      	nop
 8001ed8:	200000e0 	.word	0x200000e0

08001edc <_free_r>:
 8001edc:	b538      	push	{r3, r4, r5, lr}
 8001ede:	4605      	mov	r5, r0
 8001ee0:	2900      	cmp	r1, #0
 8001ee2:	d041      	beq.n	8001f68 <_free_r+0x8c>
 8001ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ee8:	1f0c      	subs	r4, r1, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bfb8      	it	lt
 8001eee:	18e4      	addlt	r4, r4, r3
 8001ef0:	f7ff ffe8 	bl	8001ec4 <__malloc_lock>
 8001ef4:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <_free_r+0x90>)
 8001ef6:	6813      	ldr	r3, [r2, #0]
 8001ef8:	b933      	cbnz	r3, 8001f08 <_free_r+0x2c>
 8001efa:	6063      	str	r3, [r4, #4]
 8001efc:	6014      	str	r4, [r2, #0]
 8001efe:	4628      	mov	r0, r5
 8001f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f04:	f7ff bfe4 	b.w	8001ed0 <__malloc_unlock>
 8001f08:	42a3      	cmp	r3, r4
 8001f0a:	d908      	bls.n	8001f1e <_free_r+0x42>
 8001f0c:	6820      	ldr	r0, [r4, #0]
 8001f0e:	1821      	adds	r1, r4, r0
 8001f10:	428b      	cmp	r3, r1
 8001f12:	bf01      	itttt	eq
 8001f14:	6819      	ldreq	r1, [r3, #0]
 8001f16:	685b      	ldreq	r3, [r3, #4]
 8001f18:	1809      	addeq	r1, r1, r0
 8001f1a:	6021      	streq	r1, [r4, #0]
 8001f1c:	e7ed      	b.n	8001efa <_free_r+0x1e>
 8001f1e:	461a      	mov	r2, r3
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	b10b      	cbz	r3, 8001f28 <_free_r+0x4c>
 8001f24:	42a3      	cmp	r3, r4
 8001f26:	d9fa      	bls.n	8001f1e <_free_r+0x42>
 8001f28:	6811      	ldr	r1, [r2, #0]
 8001f2a:	1850      	adds	r0, r2, r1
 8001f2c:	42a0      	cmp	r0, r4
 8001f2e:	d10b      	bne.n	8001f48 <_free_r+0x6c>
 8001f30:	6820      	ldr	r0, [r4, #0]
 8001f32:	4401      	add	r1, r0
 8001f34:	1850      	adds	r0, r2, r1
 8001f36:	4283      	cmp	r3, r0
 8001f38:	6011      	str	r1, [r2, #0]
 8001f3a:	d1e0      	bne.n	8001efe <_free_r+0x22>
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	6053      	str	r3, [r2, #4]
 8001f42:	4401      	add	r1, r0
 8001f44:	6011      	str	r1, [r2, #0]
 8001f46:	e7da      	b.n	8001efe <_free_r+0x22>
 8001f48:	d902      	bls.n	8001f50 <_free_r+0x74>
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	602b      	str	r3, [r5, #0]
 8001f4e:	e7d6      	b.n	8001efe <_free_r+0x22>
 8001f50:	6820      	ldr	r0, [r4, #0]
 8001f52:	1821      	adds	r1, r4, r0
 8001f54:	428b      	cmp	r3, r1
 8001f56:	bf04      	itt	eq
 8001f58:	6819      	ldreq	r1, [r3, #0]
 8001f5a:	685b      	ldreq	r3, [r3, #4]
 8001f5c:	6063      	str	r3, [r4, #4]
 8001f5e:	bf04      	itt	eq
 8001f60:	1809      	addeq	r1, r1, r0
 8001f62:	6021      	streq	r1, [r4, #0]
 8001f64:	6054      	str	r4, [r2, #4]
 8001f66:	e7ca      	b.n	8001efe <_free_r+0x22>
 8001f68:	bd38      	pop	{r3, r4, r5, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200000e4 	.word	0x200000e4

08001f70 <_read_r>:
 8001f70:	b538      	push	{r3, r4, r5, lr}
 8001f72:	4d07      	ldr	r5, [pc, #28]	; (8001f90 <_read_r+0x20>)
 8001f74:	4604      	mov	r4, r0
 8001f76:	4608      	mov	r0, r1
 8001f78:	4611      	mov	r1, r2
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	602a      	str	r2, [r5, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f7fe fa6c 	bl	800045c <_read>
 8001f84:	1c43      	adds	r3, r0, #1
 8001f86:	d102      	bne.n	8001f8e <_read_r+0x1e>
 8001f88:	682b      	ldr	r3, [r5, #0]
 8001f8a:	b103      	cbz	r3, 8001f8e <_read_r+0x1e>
 8001f8c:	6023      	str	r3, [r4, #0]
 8001f8e:	bd38      	pop	{r3, r4, r5, pc}
 8001f90:	200000ec 	.word	0x200000ec

08001f94 <_fstat_r>:
 8001f94:	b538      	push	{r3, r4, r5, lr}
 8001f96:	4d07      	ldr	r5, [pc, #28]	; (8001fb4 <_fstat_r+0x20>)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	4604      	mov	r4, r0
 8001f9c:	4608      	mov	r0, r1
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	602b      	str	r3, [r5, #0]
 8001fa2:	f7fe fa9f 	bl	80004e4 <_fstat>
 8001fa6:	1c43      	adds	r3, r0, #1
 8001fa8:	d102      	bne.n	8001fb0 <_fstat_r+0x1c>
 8001faa:	682b      	ldr	r3, [r5, #0]
 8001fac:	b103      	cbz	r3, 8001fb0 <_fstat_r+0x1c>
 8001fae:	6023      	str	r3, [r4, #0]
 8001fb0:	bd38      	pop	{r3, r4, r5, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200000ec 	.word	0x200000ec

08001fb8 <_isatty_r>:
 8001fb8:	b538      	push	{r3, r4, r5, lr}
 8001fba:	4d06      	ldr	r5, [pc, #24]	; (8001fd4 <_isatty_r+0x1c>)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	4608      	mov	r0, r1
 8001fc2:	602b      	str	r3, [r5, #0]
 8001fc4:	f7fe fa9d 	bl	8000502 <_isatty>
 8001fc8:	1c43      	adds	r3, r0, #1
 8001fca:	d102      	bne.n	8001fd2 <_isatty_r+0x1a>
 8001fcc:	682b      	ldr	r3, [r5, #0]
 8001fce:	b103      	cbz	r3, 8001fd2 <_isatty_r+0x1a>
 8001fd0:	6023      	str	r3, [r4, #0]
 8001fd2:	bd38      	pop	{r3, r4, r5, pc}
 8001fd4:	200000ec 	.word	0x200000ec

08001fd8 <_init>:
 8001fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fda:	bf00      	nop
 8001fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fde:	bc08      	pop	{r3}
 8001fe0:	469e      	mov	lr, r3
 8001fe2:	4770      	bx	lr

08001fe4 <_fini>:
 8001fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe6:	bf00      	nop
 8001fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fea:	bc08      	pop	{r3}
 8001fec:	469e      	mov	lr, r3
 8001fee:	4770      	bx	lr
