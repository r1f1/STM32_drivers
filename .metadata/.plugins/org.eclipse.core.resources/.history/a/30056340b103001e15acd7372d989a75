/*
 * stm32f407xx_spi_driver.c
 *
 *  Created on: 26 may. 2023
 *      Author: rafae
 */

#include "stm32f407xx_spi_driver.h"

// Functions that user cannot use
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_ovr_error_interrupt_handle(SPI_Handle_t *pSPIHandle);

/*
 * Peripheral Clock setup
 */

/*************************************************************************************
 * @fn				- SPI_PeriClockControl
 *
 * @brief			- This function enables or disables peripheral clock for the given SPI port
 *
 * @param[in]		- Base address of the SPI peripheral
 * @param[in]		- ENABLE or DISABLE macros
 *
 * @return 			- none
 *
 * @Note			- none
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
	if (EnorDi == ENABLE) {
		if(pSPIx == SPI1) {
			SPI1_PCLK_EN();
		}else if(pSPIx == SPI2) {
			SPI2_PCLK_EN();
		}else if(pSPIx == SPI3) {
			SPI3_PCLK_EN();
		}
	}else {
		if(pSPIx == SPI1) {
			SPI1_PCLK_DI();
		}else if(pSPIx == SPI2) {
			SPI2_PCLK_DI();
		}else if(pSPIx == SPI3) {
			SPI3_PCLK_DI();
		}
	}
}

/*
 * Init and De-Init
 */

/*************************************************************************************
 * @fn				- SPI_Init
 *
 * @brief			- This function initialise the given SPI port
 *
 * @param[in]		- SPI handle
 *
 * @return 			- none
 *
 * @Note			- none
 */

/*************************************************************************************
 * @fn				- SPI_DeInit
 *
 * @brief			- This function reset values for the given SPI port
 *
 * @param[in]		- Base address of the SPI peripheral
 *
 * @return 			- none
 *
 * @Note			- none
 */


void SPI_Init(SPI_Handle_t *pSPIHandle){

	uint32_t tempReg = 0;

	/* Enable the peripheral clock */
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);

	/* 1. Configure Device mode */
	tempReg |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);

	/* 2. Configure Bus type */
	if ((pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_FULL_DUPLEX) || (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_SIMPLEX_TXONLY)){
		pSPIHandle->pSPIx->CR[0] &= ~(1 << SPI_CR1_BIDIMODE);
		pSPIHandle->pSPIx->CR[0] &= ~(1 << SPI_CR1_RXONLY);
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_HALF_DUPLEX_RX){
		pSPIHandle->pSPIx->CR[0] |= (1 << SPI_CR1_BIDIMODE);
		pSPIHandle->pSPIx->CR[0] &= ~(1 << SPI_CR1_BIDIOE);
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_HALF_DUPLEX_TX){
		pSPIHandle->pSPIx->CR[0] |= (1 << SPI_CR1_BIDIMODE);
		pSPIHandle->pSPIx->CR[0] |= (1 << SPI_CR1_BIDIOE);
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_SIMPLEX_RXONLY){
		pSPIHandle->pSPIx->CR[0] &= ~(1 << SPI_CR1_BIDIMODE);
		pSPIHandle->pSPIx->CR[0] |= (1 << SPI_CR1_RXONLY);
	}

	/* 3. Configure clock speed	 */
	tempReg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);

	/* 4. Configure Data frame format */
	tempReg |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);

	/* 5. Configure CPOL */
	tempReg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);

	/* 5. Configure CPAH */
	tempReg |= (pSPIHandle->SPIConfig.SPI_CPAH << SPI_CR1_CPAH);

	/* 5. Configure SSM */
	tempReg |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);

	pSPIHandle->pSPIx->CR[0] = tempReg;
}


void SPI_DeInit(SPI_RegDef_t *pSPIx){

	if(pSPIx == SPI1) {
		SPI1_REG_RESET();
	}else if(pSPIx == SPI2) {
		SPI2_REG_RESET();
	}else if(pSPIx == SPI3) {
		SPI3_REG_RESET();
	}
}


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){

	uint8_t value;
	(pSPIx->SR & FlagName) ? (value = FLAG_SET) : (value = FLAG_RESET);
	return value;
}

/*************************************************************************************
 * @fn				- SPI_SendData
 *
 * @brief			- SendData function is the blocking API because the function will wait until the bytes are transmitted
 *
 * @param[in]		- Base address of the SPI peripheral
 * @param[in]		- Pointer to data
 * @param[in]		- Number of bytes to transmit
 *
 * @return 			- none
 *
 * @Note			- This is blocking call. Also called polling base code, polling type API because may hang permanently
 *
 */


void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){

		while(Len){
			/* 1. Wait until Tx buffer is empty	*/
			while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET );		/* This loop can cause the block of the code permanently due to
																				   external problems or communication problems as well */

			/* 2. Check whether the data frame format is 8bit or 16bit	*/
			if (pSPIx->CR[0] & SPI_DFF_SEL){ 			// DFF at 1 -> 16bit
				pSPIx->DR = *((uint16_t *) pTxBuffer);  // We typecast the value at 2 bytes and then dereference
				pTxBuffer += sizeof(uint16_t);
				Len--;
				Len--;
				//(uint16_t*)pTxBuffer++; // we typecast the pointer to increase the address in two bytes
			}else {										// DFF at 0 -> 8bit
				pSPIx->DR = *pTxBuffer;
				Len--;
				pTxBuffer++;
			}

		}
}

/*************************************************************************************
 * @fn				- SPI_ReceiveData
 *
 * @brief			- SendData function is the blocking API because the function will wait until the bytes are transmitted
 *
 * @param[in]		- Base address of the SPI peripheral
 * @param[in]		- Pointer to data
 * @param[in]		- Number of bytes to transmit
 *
 * @return 			- none
 *
 * @Note			- This is blocking call. Also called polling base code, polling type API because may hang permanently
 *
 */

/*void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint16_t *pRxBuffer, uint32_t Len){

	while(Len){
		// 1. Wait until Rx buffer is full
		while (SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET );		// This loop can cause the block of the code permanently due to
																			//   external problems or communication problems as well

		// 2. Check whether the data frame format is 8bit or 16bit
		if (pSPIx->CR[0] & SPI_DFF_SEL){ 			// DFF at 1 -> 16bit
			*pRxBuffer = pSPIx->DR;
			Len -= 2;
			pRxBuffer++;
		}else {										// DFF at 0 -> 8bit
			uint8_t temp = pSPIx->DR;
			*pRxBuffer = temp;
			Len--;
			(uint8_t*) pRxBuffer++;
		}

	}
}*/

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
	while(Len)
		{
			//1. wait until RXNE is set
			while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );

			//2. check the DFF bit in CR1
			if( (pSPIx->CR[0] & ( 1 << SPI_CR1_DFF) ) )
			{
				//16 bit DFF
				//1. load the data from DR to Rxbuffer address
				 *((uint16_t*)pRxBuffer) = pSPIx->DR ;
				Len--;
				Len--;
				(uint16_t*)pRxBuffer++;
			}else
			{
				//8 bit DFF
				*(pRxBuffer) = pSPIx->DR ;
				Len--;
				pRxBuffer++;
			}
		}

}

/*************************************************************************************
 * @fn				- SPI_IRQInterruptConfig
 *
 * @brief			-
 *
 * @param[in]		-
 * @param[in]		-
 *
 * @return 			- none
 *
 * @Note			-
 *
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
	if (EnorDi == ENABLE){
		if (IRQNumber <= 31){
			*NVIC_ISER0 |= ( 1 << IRQNumber);

		}else if ((IRQNumber > 31) & (IRQNumber < 64)){
			*NVIC_ISER1 |= ( 1 << (IRQNumber - 32));

		}else if ((IRQNumber > 64) & (IRQNumber < 96)){
			*NVIC_ISER2 |= ( 1 << (IRQNumber - 64));
		}
	}else {
		if (IRQNumber <= 31){
			*NVIC_ICER0 |= ( 1 << IRQNumber);

		}else if ((IRQNumber > 31) & (IRQNumber < 64)){
			*NVIC_ICER1 |= ( 1 << (IRQNumber - 32));

		}else if ((IRQNumber > 64) & (IRQNumber < 96)){
			*NVIC_ICER2 |= ( 1 << (IRQNumber - 64));
		}
	}
}


/*************************************************************************************
 * @fn				- SPI_IRQPriorityConfig
 *
 * @brief			-
 *
 * @param[in]		-
 * @param[in]		-
 *
 * @return 			- none
 *
 * @Note			-
 *
 */

void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){

	/* 1. Find out the IPR register	 */
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section = IRQNumber % 4;

	__vo uint32_t *pNVIC_IPRx = NVIC_IPR_BASEADDR + iprx; // this increment is done because we are increasing
														  // a pointer address and this is done by 4 bytes
														  // ( (__vo uint32_t *) 0xE000E400UL ) + iprx
	uint8_t shfit_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
	*pNVIC_IPRx |= (IRQPriority << shfit_amount);
}

/*************************************************************************************
 * @fn				- SPI_SendDataIT
 *
 * @brief			-
 *
 * @param[in]		-
 * @param[in]		-
 *
 * @return 			- none
 *
 * @Note			-
 *
 */

uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len){

	uint8_t state = pSPIHandle->TxState;
	if(state != SPI_BUSY_IN_TX){
		/* 1. Save the Tx buffer address and Len information in some global variables */
		pSPIHandle->pTxBuffer = pTxBuffer;
		pSPIHandle->TxLen = Len;

		/* Mark the SPI state as busy in transmission so that no other code can take over
		 * same SPI peripheral until transmission is over	 */
		pSPIHandle->TxState = SPI_BUSY_IN_TX;

		/* 3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR */
		pSPIHandle->pSPIx->CR[1] |= (1 << SPI_CR2_TXEIE);
	}

	return state;
}

/*************************************************************************************
 * @fn				- SPI_ReceiveDataIT
 *
 * @brief			-
 *
 * @param[in]		-
 * @param[in]		-
 *
 * @return 			- none
 *
 * @Note			-
 *
 */

uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len){

	uint8_t state = pSPIHandle->RxState;
	if(state != SPI_BUSY_IN_RX){
		/* 1. Save the Rx buffer address and Len information in some global variables */
		pSPIHandle->pRxBuffer = pRxBuffer;
		pSPIHandle->RxLen = Len;

		/* Mark the SPI state as busy in transmission so that no other code can take over
		 * same SPI peripheral until transmission is over	 */
		pSPIHandle->RxState = SPI_BUSY_IN_RX;

		/* 3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR */
		pSPIHandle->pSPIx->CR[1] |= (1 << SPI_CR2_TXEIE);
	}

	return state;
}

/*************************************************************************************
 * @fn				- SPI_IRQHandling
 *
 * @brief			-
 *
 * @param[in]		-
 * @param[in]		-
 *
 * @return 			- none
 *
 * @Note			-
 *
 */

void SPI_IRQHandling(SPI_Handle_t *pSPIHandle){
	// 1. Check for TXE
	uint8_t temp1, temp2;
	temp1 = SPI_GetFlagStatus(pSPIHandle->pSPIx, SPI_TXE_FLAG);		// TXE flag and TXEIE has to be at 1 to
	temp2 = pSPIHandle->pSPIx->CR[1] & (1 << SPI_CR2_TXEIE);		// we know that we have an interrupt for TXE flag

	if ( temp1 && temp2 ){
		// Handle TXE
		spi_txe_interrupt_handle();

	}

	// 2. Check for RXNE
	temp1 = SPI_GetFlagStatus(pSPIHandle->pSPIx, SPI_RXNE_FLAG);
	temp2 = pSPIHandle->pSPIx->CR[1] & (1 << SPI_CR2_RXNEIE);

	if ( temp1 && temp2 ){
		// Handle RXE
		spi_rxne_interrupt_handle();

	}

	// 2. Check for ovr
	temp1 = SPI_GetFlagStatus(pSPIHandle->pSPIx, SPI_OVR_FLAG);
	temp2 = pSPIHandle->pSPIx->CR[1] & (1 << SPI_SR_OVR);

	if ( temp1 && temp2 ){
		// Handle RXE
		spi_ovr_error_interrupt_handle();

	}
}

/*************************************************************************************
 * @fn				- spi_txe_interrupt_handle
 *
 * @brief			-
 *
 * @param[in]		-
 * @param[in]		-
 *
 * @return 			- none
 *
 * @Note			-
 *
 */

// SPI interrupt handler functions
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle){
	// 2. Same code as SendData()
	if (pSPIHandle->pSPIx->CR[0] & SPI_DFF_SEL){
		pSPIHandle->pSPIx->DR = *((uint16_t *) pSPIHandle->pTxBuffer);
		pSPIHandle->pTxBuffer += sizeof(uint16_t);
		pSPIHandle->TxLen--;
		pSPIHandle->TxLen--;

	}else {
		pSPIHandle->pSPIx->DR = *( pSPIHandle->pTxBuffer );
		pSPIHandle->pTxBuffer += sizeof(uint8_t);
		pSPIHandle->TxLen--;
	}

	if ( !pSPIHandle->TxLen ){
		// When the transmission is over (Len = 0) we have to close the spi communication
		// This prevents interrupts from setting up of TXE flag
		pSPIHandle->pSPIx->CR[1] &= ~( 1 << SPI_CR2_TXEIE);
		pSPIHandle->pTxBuffer = NULL;
	}
}
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_ovr_error_interrupt_handle(SPI_Handle_t *pSPIHandle);


