/*
 * stm32f407xx_spi_driver.c
 *
 *  Created on: 26 may. 2023
 *      Author: rafae
 */

#include "stm32f407xx_spi_driver.h"

/*
 * Peripheral Clock setup
 */

/*************************************************************************************
 * @fn				- SPI_PeriClockControl
 *
 * @brief			- This function enables or disables peripheral clock for the given SPI port
 *
 * @param[in]		- Base address of the SPI peripheral
 * @param[in]		- ENABLE or DISABLE macros
 *
 * @return 			- none
 *
 * @Note			- none
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
	if (EnorDi == ENABLE) {
		if(pSPIx == SPI1) {
			SPI1_PCLK_EN();
		}else if(pSPIx == SPI2) {
			SPI2_PCLK_EN();
		}else if(pSPIx == SPI3) {
			SPI3_PCLK_EN();
		}
	}else {
		if(pSPIx == SPI1) {
			SPI1_PCLK_DI();
		}else if(pSPIx == SPI2) {
			SPI2_PCLK_DI();
		}else if(pSPIx == SPI3) {
			SPI3_PCLK_DI();
		}
	}
}

/*
 * Init and De-Init
 */

/*************************************************************************************
 * @fn				- SPI_Init
 *
 * @brief			- This function initialise the given SPI port
 *
 * @param[in]		- SPI handle
 *
 * @return 			- none
 *
 * @Note			- none
 */

/*************************************************************************************
 * @fn				- SPI_DeInit
 *
 * @brief			- This function reset values for the given SPI port
 *
 * @param[in]		- Base address of the SPI peripheral
 *
 * @return 			- none
 *
 * @Note			- none
 */


void SPI_Init(SPI_Handle_t *pSPIHandle){

	/* 1. Configure Device mode */
	if (pSPIHandle->SPIConfig.SPI_DeviceMode == SPI_MODE_MASTER){
		pSPIHandle->pSPIx->CR[0] |= (1 << 2);
	} else if(pSPIHandle->SPIConfig.SPI_DeviceMode == SPI_MODE_SLAVE){
		pSPIHandle->pSPIx->CR[0] &= ~(1 << 2);
	}

}


void SPI_DeInit(SPI_RegDef_t *pSPIx){

	if(pSPIx == SPI1) {
		SPI1_REG_RESET();
	}else if(pSPIx == SPI2) {
		SPI2_REG_RESET();
	}else if(pSPIx == SPI3) {
		SPI3_REG_RESET();
	}
}


