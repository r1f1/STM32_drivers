/*
 * stm32f407xx_i2c_driver.c
 *
 *  Created on: Jun 11, 2023
 *      Author: rafae
 */

#include "stm32f407xx_i2c_driver.h"

/*
 * Peripheral Clock setup
 */

/*************************************************************************************
 * @fn				- I2C_PeriClockControl
 *
 * @brief			- This function enables or disables peripheral clock for the given I2C port
 *
 * @param[in]		- Base address of the I2C peripheral
 * @param[in]		- ENABLE or DISABLE macros
 *
 * @return 			- none
 *
 * @Note			- none
 */

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
	if (EnorDi == ENABLE) {
		if(pI2Cx == I2C1) {
			I2C1_PCLK_EN();
		}else if(pI2Cx == I2C2) {
			I2C2_PCLK_EN();
		}else if(pI2Cx == I2C3) {
			I2C3_PCLK_EN();
		}
	}else {
		if(pI2Cx == I2C1) {
			I2C1_PCLK_DI();
		}else if(pI2Cx == I2C2) {
			I2C2_PCLK_DI();
		}else if(pI2Cx == I2C3) {
			I2C3_PCLK_DI();
		}
	}
}

uint32_t RCC_GetPCLK1Value(void){
	uint32_t pclk1;
	uint8_t clkValue = 0, ahbPres = 0, apb1Pres = 0;

	clkValue = (RCC->CFGR >> 2) & 0x3;
	ahbPres = (RCC->CFGR >> 4) & 0xf;
	apb1Pres = (RCC->CFGR >> 10) & 0x7;

	if (clkValue == 0){
		pclk1 = (16000000 / AHB_PRESCALER(ahbPres)) / APB1_PRESCALER(apb1Pres);
	}else if (clkValue == 1){
		pclk1 = (8000000 / AHB_PRESCALER(ahbPres)) / APB1_PRESCALER(apb1Pres);
	}else if (clkValue == 2){
		// PLL function not implemented
	}

	return pclk1;
}

/*************************************************************************************
 * @fn				- I2C_Init
 *
 * @brief			- This function initialise the given I2C port
 *
 * @param[in]		- I2C handle
 *
 * @return 			- none
 *
 * @Note			- none
 */

void I2C_Init(I2C_Handle_t *pI2CHandle){


	uint32_t temp = 0;
	temp |= (pI2CHandle->I2C_Config.I2C_SCLSpeed << I2C_CCR_FS);

	// Configure the ACK control
	pI2CHandle->pI2Cx->CR[0] |= (pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK);

	// Configure the frequency of the used clock
	pI2CHandle->pI2Cx->CR[1] |= ( RCC_GetPCLK1Value() << I2C_CR2_FREQ);
}

/*************************************************************************************
 * @fn				- I2C_DeInit
 *
 * @brief			- This function reset values for the given I2C port
 *
 * @param[in]		- Base address of the I2C peripheral
 *
 * @return 			- none
 *
 * @Note			- none
 */

void I2C_DeInit(I2C_RegDef_t *pI2Cx){

	if(pI2Cx == I2C1) {
		I2C1_REG_RESET();
	}else if(pI2Cx == I2C2) {
		I2C2_REG_RESET();
	}else if(pI2Cx == I2C3) {
		I2C3_REG_RESET();
	}
}

/*************************************************************************************
 * @fn				- I2C_IRQInterruptConfig
 *
 * @brief			-
 *
 * @param[in]		-
 * @param[in]		-
 *
 * @return 			- none
 *
 * @Note			-
 *
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
	if (EnorDi == ENABLE){
		if (IRQNumber <= 31){
			*NVIC_ISER0 |= ( 1 << IRQNumber);

		}else if ((IRQNumber > 31) && (IRQNumber < 64)){
			*NVIC_ISER1 |= ( 1 << (IRQNumber - 32));

		}else if ((IRQNumber > 64) && (IRQNumber < 96)){
			*NVIC_ISER2 |= ( 1 << (IRQNumber - 64));
		}
	}else {
		if (IRQNumber <= 31){
			*NVIC_ICER0 |= ( 1 << IRQNumber);

		}else if ((IRQNumber > 31) && (IRQNumber < 64)){
			*NVIC_ICER1 |= ( 1 << (IRQNumber - 32));

		}else if ((IRQNumber > 64) && (IRQNumber < 96)){
			*NVIC_ICER2 |= ( 1 << (IRQNumber - 64));
		}
	}
}


/*************************************************************************************
 * @fn				- I2C_IRQPriorityConfig
 *
 * @brief			-
 *
 * @param[in]		-
 * @param[in]		-
 *
 * @return 			- none
 *
 * @Note			-
 *
 */

void I2C_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){

	/* 1. Find out the IPR register
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section = IRQNumber % 4;

	__vo uint32_t *pNVIC_IPRx = NVIC_IPR_BASEADDR + iprx; // this increment is done because we are increasing
														  // a pointer address and this is done by 4 bytes
														  // ( (__vo uint32_t *) 0xE000E400UL ) + iprx
	uint8_t shfit_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
	*pNVIC_IPRx |= (IRQPriority << shfit_amount);*/

	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section  = IRQNumber %4 ;

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;

	*(  NVIC_IPR_BASEADDR + iprx ) |=  ( IRQPriority << shift_amount );
}






