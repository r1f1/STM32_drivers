/*
 * 006spi_tx_testing.c
 *
 *  Created on: 27 may. 2023
 *      Author: rafae
 */
/*
 * GPIOs used as SPI pins:
 * 	- PB12 --> SPI_NSS
 * 	- PB13 --> SPI_SCLK
 * 	- PB14 --> SPI_MISO
 * 	- PB15 --> SPI_MOSI
 * Alt function mode -- > 5
 */

#include "stm32f407xx.h"
#include <string.h>
#include <stdio.h>


SPI_Handle_t SPI2Handle;

#define MAX_LEN 			500

char RcvBuff[MAX_LEN];

__vo char ReadByte;

__vo uint8_t rcvStop = 0;
/* This flag will be set in the interrupt handler of the arduino interrupt GPIO */
__vo uint8_t dataAvailable = 0;

void delay(void){
	for (uint32_t i = 0; i < 500000/2; i++);
}

void SPI2_GPIOInit(){

	GPIO_Handle_t SPIHandle;

	SPIHandle.pGPIOx = GPIOB;
	SPIHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	SPIHandle.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	SPIHandle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
	SPIHandle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
	SPIHandle.GPIO_PinConfig.GPIO_PinAltFunMode = 5;

	// SPI_NSS
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	GPIO_Init(&SPIHandle);

	// SPI_SCLK
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
	GPIO_Init(&SPIHandle);

	// SPI_MISO
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	GPIO_Init(&SPIHandle);

	// SPI_MOSI
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
	GPIO_Init(&SPIHandle);


}

void SPI2_Inits(){

	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_MODE_MASTER;
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_FULL_DUPLEX;
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32; // generates a clock of 2MHz
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8_BITS;
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
	SPI2Handle.SPIConfig.SPI_CPAH = SPI_CPAH_1ST_EDGE;
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DISABLE; // Hardware slave management enabled for NSS pin

	SPI_Init(&SPI2Handle);

}

void Slave_GPIO_InterruptPinInit(){

	GPIO_Handle_t SPIHandle;
	memset(&SPIHandle,0,sizeof(SPIHandle));

	SPIHandle.pGPIOx = GPIOD;
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
	SPIHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
	SPIHandle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
	SPIHandle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;

	GPIO_Init(&SPIHandle);

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRI15);
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
}


int main(){

	uint8_t dummy_write = 0xFF; // for 16bit DFF we have to use 2 bytes 0xFFFF

	/* Initialise pin working in an interrupt mode */
	Slave_GPIO_InterruptPinInit();

	/* Initialise GPIO pins to behave as SPI pin */
	SPI2_GPIOInit();

	/* Configure SPI2 pins */
	SPI2_Inits();

	/* Enable SSOE bit */
	SPI2_SSOE_ENDI(ENABLE);

	/* Configure SPI interrupt */
	SPI_IRQInterruptConfig(IRQ_NO_SPI2, ENABLE);

	while(1){

		rcvStop = 0;

		while(!dataAvailable); // wait until Master receive an Interrupt from Slave

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, DISABLE); // Disable further interrupts from Slave device

		SPI2_CONTROL(ENABLE);

		while(!rcvStop){

			while ( SPI_SendDataIT(&SPI2Handle, &dummy_write, 1) == SPI_BUSY_IN_TX );
			while ( SPI_ReceiveDataIT(&SPI2Handle, &ReadByte, 1) == SPI_BUSY_IN_RX );


		}

		/* Confirm that SPI is not busy and all the data is transferred */
		while( SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG) );

		/* Disable SPI2 peripheral */
		SPI2_CONTROL(DISABLE);

		printf("Rcvd data = %s\n", RcvBuff);

		dataAvailable = 0;

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);

	}

	return 0;
}

void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEv){

	static uint32_t i = 0;

	if (AppEv == SPI_EVENT_RX_CMPLT){
		RcvBuff[i++] = ReadByte; 			// "i" increase its value after this line is executed
		if (ReadByte == '\0' || (i == MAX_LEN)){
			rcvStop = 1;
			RcvBuff[i-1] = '\0';
			i = 0;
		}
	}
}

/* Runs when a data byte is received from the peripheral over SPI */
void SPI2_IRQHandler(void){

	SPI_IRQHandling(&SPI2Handle);
	printf("irqhandler3\n");
}

void EXTI9_5_IRQHandler(void){
	GPIO_IRQHandling(GPIO_PIN_NO_6);
	dataAvailable = 1;
}
