/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#define RCC_BASE_ADDR				0x40023800UL

#define RCC_CR_OFFSET				0x00UL

#define RCC_CR_REG_ADDR				(RCC_BASE_ADDR + RCC_CR_OFFSET)

#define RCC_CFGR_REG_OFFSET			0x08UL

#define RCC_CFGR_REG_ADDR			(RCC_BASE_ADDR + RCC_CFGR_REG_OFFSET)

#define GPIOA_BASE_ADDR 			0x40020000UL

int main(void)
{

	//1. Enable HSE clock using HSEON bit (RCC_CR)
	uint32_t *pRccCrReg = (uint32_t *) RCC_CR_REG_ADDR;
	*pRccCrReg |= (1 << 16);

	//1.1 Check if HSE is stable or not by checking HSERDY bit
	while ( !((*pRccCrReg >> 17) & 0x1) );

	//2. Switch the system clock to HSE (RCC_CFGR)
	uint32_t *pRccCfgrReg = (uint32_t *) RCC_CFGR_REG_ADDR;
	*pRccCfgrReg |= (0x1 << 0);

	//2.1 Configure RCC_CFGR MCO1 bit fields to select HSE as clock source
	*pRccCfgrReg |= (0x2 << 21);

	//2.2 Configure MC01 prescaler
	// *pRccCfgrReg &= ~(0x7 << 24); // by default it's 0 so no need to clear
	*pRccCfgrReg |= (0x6 << 24);

	//3. Configure PA8 to AF0 mode
	//3.1 Enable the clock for the GPIOA pins
	uint32_t *pRccAhb1Enr = (uint32_t *) (RCC_BASE_ADDR + 0x30);
	*pRccAhb1Enr |= (1 << 0);

	//3.2 Configure the mode of GPIOA pin 8 as alternate function mode
	uint32_t *pGPIOAModeReg = (uint32_t *) (GPIOA_BASE_ADDR + 00);
	*pGPIOAModeReg &= ~(0x03 << 16);
	*pGPIOAModeReg |= (0x02 << 16);

	//3.3 Configure the alternation function register to set the mode 0 for PA8
	uint32_t *pGPIOAAltFunHighReg = (uint32_t *) (GPIOA_BASE_ADDR + 0x24);
	*pGPIOAAltFunHighReg &= ~(0xF << 0);

    /* Loop forever */
	for(;;);
}
