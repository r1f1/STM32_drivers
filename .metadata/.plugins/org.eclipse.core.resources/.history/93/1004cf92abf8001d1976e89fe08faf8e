/*
 * stm32f407_gpio_driver.c
 *
 *  Created on: May 20, 2023
 *      Author: rafae
 */

#include "stm32f407_gpio_driver.h"

/*
 * Peripheral Clock setup
 */

/*************************************************************************************
 * @fn				- GPIO_PeriClockControl
 *
 * @brief			- This function enables or disables peripheral clock for the given GPIO port
 *
 * @param[in]		- Base address of the GPIO peripheral
 * @param[in]		- ENABLE or DISABLE macros
 *
 * @return 			- none
 *
 * @Note			- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
	if (EnorDi == ENABLE) {
		if(pGPIOx == GPIOA) {
			GPIOA_PCLK_EN();
		}else if(pGPIOx == GPIOB) {
			GPIOB_PCLK_EN();
		}else if(pGPIOx == GPIOC) {
			GPIOC_PCLK_EN();
		}else if(pGPIOx == GPIOD) {
			GPIOD_PCLK_EN();
		}else if(pGPIOx == GPIOE) {
			GPIOE_PCLK_EN();
		}else if(pGPIOx == GPIOF) {
			GPIOF_PCLK_EN();
		}else if(pGPIOx == GPIOG) {
			GPIOG_PCLK_EN();
		}else if(pGPIOx == GPIOH) {
			GPIOH_PCLK_EN();
		}else if(pGPIOx == GPIOI) {
			GPIOI_PCLK_EN();
		}
	}else {
		if(pGPIOx == GPIOA) {
			GPIOA_PCLK_DI();
		}else if(pGPIOx == GPIOB) {
			GPIOB_PCLK_DI();
		}else if(pGPIOx == GPIOC) {
			GPIOC_PCLK_DI();
		}else if(pGPIOx == GPIOD) {
			GPIOD_PCLK_DI();
		}else if(pGPIOx == GPIOE) {
			GPIOE_PCLK_DI();
		}else if(pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		}else if(pGPIOx == GPIOG) {
			GPIOG_PCLK_DI();
		}else if(pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		}else if(pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}
}

/*
 * Init and De-Init
 */

/*************************************************************************************
 * @fn				- GPIO_Init
 *
 * @brief			- This function initialise the given GPIO port
 *
 * @param[in]		- GPIO handle
 *
 * @return 			- none
 *
 * @Note			- none
 */

/*************************************************************************************
 * @fn				- GPIO_DeInit
 *
 * @brief			- This function reset values for the given GPIO port
 *
 * @param[in]		- Base address of the GPIO peripheral
 *
 * @return 			- none
 *
 * @Note			- none
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){

	uint32_t temp = 0; // temp register
	uint8_t tmp_PinNumber = pGPIOHandle->GPIO_PinÇonfig.GPIO_PinNumber;
	uint8_t tmp_PinMode = pGPIOHandle->GPIO_PinÇonfig.GPIO_PinMode;

	/* 1. Configure the mode of the gpio pin */
	if (tmp_PinMode <= GPIO_MODE_ANALOG){
		temp = (tmp_PinMode << (2 * tmp_PinNumber));
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * tmp_PinNumber));
		pGPIOHandle->pGPIOx->MODER |= temp;
	}else{
		// this is interrupt mode
		if (tmp_PinMode <= GPIO_MODE_IT_FT){
			// 1. Configure the FTSR (Falling trigger selection register)
			EXTI->FTSR |= (1 << tmp_PinNumber);
			// 1.1 To make sure Rising edge detection is not set, we cleared it.
			EXTI->RTSR &= ~(1 << tmp_PinNumber);

		}else if(tmp_PinMode <= GPIO_MODE_IT_RT){
			// 1. Configure the RTSR (Rising trigger selection register)
			EXTI->RTSR |= (1 << tmp_PinNumber);
			// 1.1 To make sure Falling edge detection is not set, we cleared it.
			EXTI->FTSR &= ~(1 << tmp_PinNumber);

		}else if (tmp_PinMode <= GPIO_MODE_IT_RFT){
			// 1. Configure both RSTR and FTSR
			EXTI->RTSR |= (1 << tmp_PinNumber);
			EXTI->FTSR |= (1 << tmp_PinNumber);
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = tmp_PinNumber / 4;
		uint8_t temp2 = tmp_PinNumber % 8;

		SYSCFG->EXTICR[temp1] |= (1 << (4 * temp2));

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << tmp_PinNumber);
	}

	temp = 0;

	/* 2. Configure the speed */
	temp = (pGPIOHandle->GPIO_PinÇonfig.GPIO_PinSpeed << (2 * tmp_PinNumber));
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * tmp_PinNumber));
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;

	temp = 0;

	/* 2. Configure the pupd settings */
	temp = (pGPIOHandle->GPIO_PinÇonfig.GPIO_PinPuPdControl << (2 * tmp_PinNumber));
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * tmp_PinNumber));
	pGPIOHandle->pGPIOx->PUPDR |= temp;

	temp = 0;

	/* 2. Configure the optype */
	temp = (pGPIOHandle->GPIO_PinÇonfig.GPIO_PinOPType << tmp_PinNumber);
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << (tmp_PinNumber));
	pGPIOHandle->pGPIOx->OTYPER |= temp;

	/* 2. Configure the alt funcionality */
	if (tmp_PinMode == GPIO_MODE_ALTFN){
		uint8_t temp1 = tmp_PinNumber / 8;
		uint8_t temp2 = tmp_PinNumber % 8;
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinÇonfig.GPIO_PinAltFunMode << (4 * temp2);
	}

}
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx){

	if(pGPIOx == GPIOA) {
		GPIOA_REG_RESET();
	}else if(pGPIOx == GPIOB) {
		GPIOB_REG_RESET();
	}else if(pGPIOx == GPIOC) {
		GPIOC_REG_RESET();
	}else if(pGPIOx == GPIOD) {
		GPIOD_REG_RESET();
	}else if(pGPIOx == GPIOE) {
		GPIOE_REG_RESET();
	}else if(pGPIOx == GPIOF) {
		GPIOF_REG_RESET();
	}else if(pGPIOx == GPIOG) {
		GPIOG_REG_RESET();
	}else if(pGPIOx == GPIOH) {
		GPIOH_REG_RESET();
	}else if(pGPIOx == GPIOI) {
		GPIOI_REG_RESET();
	}
}

/*
 * Data read and write
 */

/*************************************************************************************
 * @fn				- GPIO_ReadFromInputPin
 *
 * @brief			- This function reads value of the given pin
 *
 * @param[in]		- Base address of the GPIO peripheral
 * @param[in]		- Number of the given pin
 *
 * @return 			- Pin status
 *
 * @Note			- none
 */

/*************************************************************************************
 * @fn				- GPIO_ReadFromInputPort
 *
 * @brief			- This function reads value of the given port
 *
 * @param[in]		- Base address of the GPIO peripheral
 *
 * @return 			- Pin's port status
 *
 * @Note			- none
 */

/*************************************************************************************
 * @fn				- GPIO_WriteToOutputPin
 *
 * @brief			- This function sets value to the given pin
 *
 * @param[in]		- Base address of the GPIO peripheral
 * @param[in]		- Number of the given pin
 * @param[in]		- Value
 *
 * @return 			- none
 *
 * @Note			- none
 */

/*************************************************************************************
 * @fn				- GPIO_WriteToOutputPort
 *
 * @brief			- This function sets value to the given port
 *
 * @param[in]		- Base address of the GPIO peripheral
 * @param[in]		- Value
 *
 * @Note			- none
 */

/*************************************************************************************
 * @fn				- GPIO_ToggleOutputPin
 *
 * @brief			- This function toggles pin status from HIGH to LOW
 *
 * @param[in]		- Base address of the GPIO peripheral
 * @param[in]		- Number of the given pin
 *
 * @Note			- none
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x1);
	return value;
}
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx){
	uint16_t value;
	value = (uint16_t) pGPIOx->IDR;
	return value;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
	//My way pGPIOx->ODR |= (Value << PinNumber);

	if (Value == GPIO_PIN_SET){
		pGPIOx->ODR |= (1 << PinNumber);
	}else {
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value){

	pGPIOx->ODR = Value;
}
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
	pGPIOx->ODR ^= (1 << PinNumber);
}

/*
 * IRQ Configuration and ISR handling
 */

/*************************************************************************************
 * @fn				- GPIO_IRQConfig
 *
 * @brief			- This function toggles pin status from HIGH to LOW
 *
 * @param[in]		- Base address of the GPIO peripheral
 * @param[in]		- Number of the given pin
 *
 * @Note			- none
 */

void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t EnorDi);
void GPIO_IRQHandling(uint8_t PinNumber);










