/*
 * stm32f407xx.h
 *
 *  Created on: May 19, 2023
 *      Author: rafae
 */

#ifndef INC_STM32F407XX_H_
#define INC_STM32F407XX_H_

#include <stdint.h>

#define __vo volatile

/********************************** START: Processor Specific Details *******************************/

/*
 * ARM Cortex Mx Processor NVIC ISERx register addresses
 */

#define NVIC_ISER_BASEADDR			( (__vo uint32_t *) 0xE000E100UL )
#define NVIC_ISER0					(NVIC_ISER_BASEADDR + 0x00)
#define NVIC_ISER1					(NVIC_ISER_BASEADDR + 0x04)
#define NVIC_ISER2					(NVIC_ISER_BASEADDR + 0x08)
#define NVIC_ISER3					(NVIC_ISER_BASEADDR + 0x0C)

/*
 * ARM Cortex Mx Processor NVIC ICERx register addresses
 */

#define NVIC_ICER_BASEADDR			( (__vo uint32_t *) 0XE000E180UL )
#define NVIC_ICER0					(NVIC_ICER_BASEADDR + 0x00)
#define NVIC_ICER1					(NVIC_ICER_BASEADDR + 0x04)
#define NVIC_ICER2					(NVIC_ICER_BASEADDR + 0x08)
#define NVIC_ICER3					(NVIC_ICER_BASEADDR + 0x0C)

/*
 * ARM Cortex Mx Processor NVIC ICERx register addresses
 */

#define NVIC_IPR_BASEADDR			( (__vo uint32_t *) 0xE000E400UL )

/*
 * ARM Cortex Mx Processor number of priority bits implemented in Priority register.
 * Offset added to the amount of bits shifted for the IRQ priority
 */

#define NO_PR_BITS_IMPLEMENTED		4

/*
 * Base address of Flash and SRAM memory
 */

#define FLASH_BASEADDR					0x08000000UL	/* Base address of Flash memory */
#define SRAM1_BASEADDR					0x20000000UL 	/* Base address of SRAM1 memory */
#define SRAM2_BASEADDR					0x2001C000UL 	/* Base address of SRAM2 memory */
#define ROM_BASEADDR					0x1FFF0000UL 	/* Base address of System memory */
#define SRAM 							SRAM1_BASEADDR	/* Choose which SRAM is the main one */

/*
 * AHBx and APBx bus Peripheral base address
 */

#define PERIPH_BASEADDR						0x40000000UL
#define APB1PERIPH_BASEADDR					PERIPH_BASE
#define APB2PERIPH_BASEADDR					0x40010000UL
#define AHB1PERIPH_BASEADDR					0x40020000UL
#define AHB2PERIPH_BASEADDR					0x50000000UL

/*
 * Base addresses of peripherals which are hanging on AHB1 bus
 */

#define GPIOA_BASEADDR						(AHB1PERIPH_BASEADDR + 0x0000)
#define GPIOB_BASEADDR						(AHB1PERIPH_BASEADDR + 0x0400)
#define GPIOC_BASEADDR						(AHB1PERIPH_BASEADDR + 0x0800)
#define GPIOD_BASEADDR						(AHB1PERIPH_BASEADDR + 0x0C00)
#define GPIOE_BASEADDR						(AHB1PERIPH_BASEADDR + 0x1000)
#define GPIOF_BASEADDR						(AHB1PERIPH_BASEADDR + 0x1400)
#define GPIOG_BASEADDR						(AHB1PERIPH_BASEADDR + 0x1800)
#define GPIOH_BASEADDR						(AHB1PERIPH_BASEADDR + 0x1C00)
#define GPIOI_BASEADDR						(AHB1PERIPH_BASEADDR + 0x2000)
#define RCC_BASEADDR						(AHB1PERIPH_BASEADDR + 0x3800)

/*
 * Base addresses of peripherals which are hanging on APB1 bus
 */

#define I2C1_BASEADDR						(APB1PERIPH_BASEADDR + 0x5400)
#define I2C2_BASEADDR						(APB1PERIPH_BASEADDR + 0x5800)
#define I2C3_BASEADDR						(APB1PERIPH_BASEADDR + 0xC400)
#define SPI2_BASEADDR						(APB1PERIPH_BASEADDR + 0x3800)
#define SPI3_BASEADDR						(APB1PERIPH_BASEADDR + 0x3C00)
#define USART2_BASEADDR						(APB1PERIPH_BASEADDR + 0x4400)
#define USART3_BASEADDR						(APB1PERIPH_BASEADDR + 0x4800)
#define UART4_BASEADDR						(APB1PERIPH_BASEADDR + 0x4C00)
#define UART5_BASEADDR						(APB1PERIPH_BASEADDR + 0x5000)

/*
 * Base address of peripherals which are hanging on APB2 bus
 */

#define SPI1_BASEADDR						(APB2PERIPH_BASEADDR + 0x3000)
#define USART1_BASEADDR						(APB2PERIPH_BASEADDR + 0x1000)
#define USART6_BASEADDR						(APB2PERIPH_BASEADDR + 0x1400)
#define EXTI_BASEADDR						(APB2PERIPH_BASEADDR + 0x3C00)
#define SYSCFG_BASEADDR						(APB2PERIPH_BASEADDR + 0x3800)


/****************************** Peripheral register definition structures **************************/

/*
 * Note: Registers of a peripheral are specific to MCU
 * e.g: Number of Registers of SPI peripheral of STM32F4x family of MCUs maybe different (more or less)
 * compared to number of register of SPI peripheral of STM32Lx or STM32F0x of MCUs
 * Check Device RM
 */

typedef struct{
	__vo uint32_t MODER;				/* GPIO port mode register */
	__vo uint32_t OTYPER;				/* GPIO port output type register */
	__vo uint32_t OSPEEDR;				/* GPIO port output speed register */
	__vo uint32_t PUPDR;				/* GPIO port pull-up/pull-down register */
	__vo uint32_t IDR;					/* GPIO port input data register */
	__vo uint32_t ODR;					/* GPIO port output data register */
	__vo uint32_t BSRR;					/* GPIO port bit set/reset register */
	__vo uint32_t LCKR;					/* GPIO port configuration lock register */
	__vo uint32_t AFR[2];				/* AFR[0]: GPIO alternate function low register */
										/* AFR[1]: GPIO alternate function high register */
} GPIO_RegDef_t;

/*
 * Peripheral register definition structure for SPI
 */

typedef struct{
	__vo uint32_t CR[2];				/* SPI control register */
	__vo uint32_t SR;					/* SPI status register */
	__vo uint32_t DR;					/* SPI data register */
	__vo uint32_t CRCPR;				/* SPI CRC polynomial register */
	__vo uint32_t RXCRCR;				/* SPI RX CRC register */
	__vo uint32_t TXCRCR;				/* SPI TX CRC register */
	__vo uint32_t I2SCFGR;				/* SPI_I2S configuration register */
	__vo uint32_t I2SPR;				/* SPI_I2S prescaler register */
} SPI_RegDef_t;

/*
 * Peripheral register definition structure for RCC
 */

typedef struct{
	__vo uint32_t CR;					/* RCC clock control register */
	__vo uint32_t PLLCFGR;				/* RCC PLL configuration register */
	__vo uint32_t CFGR;					/* RCC clock configuration register */
	__vo uint32_t CIR;					/* RCC clock interrupt register */
	__vo uint32_t AHB1RSTR;				/* RCC AHB1 peripheral reset register */
	__vo uint32_t AHB2RSTR;				/* RCC AHB2 peripheral reset register */
	__vo uint32_t AHB3RSTR;				/* RCC AHB3 peripheral reset register */
	uint32_t      RESERVED0;
	__vo uint32_t APB1RSTR;				/* RCC APB1 peripheral reset register */
	__vo uint32_t APB2RSTR;				/* RCC APB2 peripheral reset register */
	uint32_t      RESERVED1;
	uint32_t      RESERVED2;
	__vo uint32_t AHB1ENR;				/* RCC AHB1 peripheral clock enable register */
	__vo uint32_t AHB2ENR;				/* RCC AHB2 peripheral clock enable register */
	__vo uint32_t AHB3ENR;				/* RCC AHB3 peripheral clock enable register */
	uint32_t      RESERVED3;
	__vo uint32_t APB1ENR;				/* RCC APB1 peripheral clock enable register*/
	__vo uint32_t APB2ENR;				/* RCC APB2 peripheral clock enable register */
	uint32_t      RESERVED4;
	uint32_t      RESERVED5;
	__vo uint32_t AHB1LPENR;			/* RCC AHB1 peripheral clock enable in low power mode register*/
	__vo uint32_t AHB2LPENR;			/* RCC AHB2 peripheral clock enable in low power mode register*/
	__vo uint32_t AHB3LPENR;			/* RCC AHB3 peripheral clock enable in low power mode register*/
	uint32_t      RESERVED6;
	__vo uint32_t APB1LPENR;			/* RCC APB1 peripheral clock enable in low power mode register*/
	__vo uint32_t APB2LPENR;			/* RCC APB2 peripheral clock enabled in low power mode register*/
	uint32_t      RESERVED7;
	uint32_t      RESERVED8;
	__vo uint32_t BDCR;					/* RCC Backup domain control register */
	__vo uint32_t CSR;					/* RCC clock control & status register */
	uint32_t      RESERVED9;
	uint32_t      RESERVED10;
	__vo uint32_t SSCGR;				/* RCC spread spectrum clock generation register */
	__vo uint32_t PLLI2SCFGR;			/* RCC PLLI2S configuration register */

}RCC_RegDef_t;


/*
 * Peripheral register definition structure for EXTI
 */

typedef struct{
	__vo uint32_t IMR;				/* Interrupt mask register */
	__vo uint32_t EMR;				/* Event mask register */
	__vo uint32_t RTSR;				/* Rising trigger selection register */
	__vo uint32_t FTSR;				/* Falling trigger selection register */
	__vo uint32_t SWIER;			/* Software interrupt event register */
	__vo uint32_t PR;				/* Pending register */
} EXTI_RegDef_t;

/*
 * Peripheral register definition structure for SYSCFG
 */

typedef struct{
	__vo uint32_t MEMRMP;			/* SYSCFG memory remap register */
	__vo uint32_t PMC;				/* SYSCFG peripheral mode configuration register */
	__vo uint32_t EXTICR[4];		/* SYSCFG external interrupt configuration register 1-4 */
	__vo uint32_t RESERVED[2];		/* Reserved memory (It's not indicated in the Reference manual, take into account. */
	__vo uint32_t CMPCR;			/* Compensation cell control register */
} SYSCFG_RegDef_t;

/*
 * Peripheral definition (Peripheral base addresses typecasted to xx_RegDef_t)
 */

#define GPIOA				((GPIO_RegDef_t*) GPIOA_BASEADDR)
#define GPIOB				((GPIO_RegDef_t*) GPIOB_BASEADDR)
#define GPIOC				((GPIO_RegDef_t*) GPIOC_BASEADDR)
#define GPIOD				((GPIO_RegDef_t*) GPIOD_BASEADDR)
#define GPIOE				((GPIO_RegDef_t*) GPIOE_BASEADDR)
#define GPIOF				((GPIO_RegDef_t*) GPIOF_BASEADDR)
#define GPIOG				((GPIO_RegDef_t*) GPIOG_BASEADDR)
#define GPIOH				((GPIO_RegDef_t*) GPIOH_BASEADDR)
#define GPIOI				((GPIO_RegDef_t*) GPIOI_BASEADDR)

#define RCC 				((RCC_RegDef_t*) RCC_BASEADDR)

#define EXTI				((EXTI_RegDef_t*) EXTI_BASEADDR)

#define SYSCFG				((SYSCFG_RegDef_t*) SYSCFG_BASEADDR)

#define SPI1				(SPI)



/************************** Enable Clocks *********************/

/*
 * Clock Enable Macros for GPIOx peripherals
 */

#define GPIOA_PCLK_EN()		( RCC->AHB1ENR |= (1 << 0) )
#define GPIOB_PCLK_EN()		( RCC->AHB1ENR |= (1 << 1) )
#define GPIOC_PCLK_EN()		( RCC->AHB1ENR |= (1 << 2) )
#define GPIOD_PCLK_EN()		( RCC->AHB1ENR |= (1 << 3) )
#define GPIOE_PCLK_EN()		( RCC->AHB1ENR |= (1 << 4) )
#define GPIOF_PCLK_EN()		( RCC->AHB1ENR |= (1 << 5) )
#define GPIOG_PCLK_EN()		( RCC->AHB1ENR |= (1 << 6) )
#define GPIOH_PCLK_EN()		( RCC->AHB1ENR |= (1 << 7) )
#define GPIOI_PCLK_EN()		( RCC->AHB1ENR |= (1 << 8) )


/*
 * Clock Enable Macros for I2Cx peripherals
 */

#define I2C1_PCLK_EN()		( RCC->APB1ENR |= (1 << 21) )
#define I2C2_PCLK_EN()		( RCC->APB1ENR |= (1 << 22) )
#define I2C3_PCLK_EN()		( RCC->APB1ENR |= (1 << 23) )


/*
 * Clock Enable Macros for SPIx peripherals
 */

#define SPI1_PCLK_EN()		( RCC->APB2ENR |= (1 << 12) )
#define SPI2_PCLK_EN()		( RCC->APB1ENR |= (1 << 14) )
#define SPI3_PCLK_EN()		( RCC->APB1ENR |= (1 << 15) )

/*
 * Clock Enable Macros for USARTx peripherals
 */

#define USART1_PCLK_EN()	( RCC->APB2ENR |= (1 << 4) )
#define USART2_PCLK_EN()	( RCC->APB1ENR |= (1 << 17) )
#define USART3_PCLK_EN()	( RCC->APB1ENR |= (1 << 18) )

/*
 * Clock Enable Macros for SYSCFG peripheral
 */

#define SYSCFG_PCLK_EN()	( RCC->APB2ENR |= (1 << 14))


/************************** Disable Clocks *********************/

/*
 * Clock Disable Macros for GPIOx peripherals
 */

#define GPIOA_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 0) )
#define GPIOB_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 1) )
#define GPIOC_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 2) )
#define GPIOD_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 3) )
#define GPIOE_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 4) )
#define GPIOF_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 5) )
#define GPIOG_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 6) )
#define GPIOH_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 7) )
#define GPIOI_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 8) )


/*
 * Clock Disable Macros for I2Cx peripherals
 */

#define I2C1_PCLK_DI()		( RCC->APB1ENR &= ~(1 << 21) )
#define I2C2_PCLK_DI()		( RCC->APB1ENR &= ~(1 << 22) )
#define I2C3_PCLK_DI()		( RCC->APB1ENR &= ~(1 << 23) )


/*
 * Clock Disable Macros for SPIx peripherals
 */

#define SPI1_PCLK_DI()		( RCC->APB2ENR &= ~(1 << 12) )
#define SPI2_PCLK_DI()		( RCC->APB1ENR &= ~(1 << 14) )
#define SPI3_PCLK_DI()		( RCC->APB1ENR &= ~(1 << 15) )

/*
 * Clock Disable Macros for USARTx peripherals
 */

#define USART1_PCLK_DI()	( RCC->APB2ENR &= ~(1 << 4) )
#define USART2_PCLK_DI()	( RCC->APB1ENR &= ~(1 << 17) )
#define USART3_PCLK_DI()	( RCC->APB1ENR &= ~(1 << 18) )

/*
 * Clock Disable Macros for SYSCFG peripheral
 */

#define SYSCFG_PCLK_DI()	( RCC->APB2ENR &= ~(1 << 14))

/*
 * Macros to reset GPIOx peripherals
 */

#define GPIOA_REG_RESET()	do{ ( RCC->AHB1RSTR |= (1 << 0)); ( RCC->AHB1RSTR &= ~(1 << 0)); }while(0)
#define GPIOB_REG_RESET()	do{ ( RCC->AHB1RSTR |= (1 << 1)); ( RCC->AHB1RSTR &= ~(1 << 1)); }while(0)
#define GPIOC_REG_RESET()	do{ ( RCC->AHB1RSTR |= (1 << 2)); ( RCC->AHB1RSTR &= ~(1 << 2)); }while(0)
#define GPIOD_REG_RESET()	do{ ( RCC->AHB1RSTR |= (1 << 3)); ( RCC->AHB1RSTR &= ~(1 << 3)); }while(0)
#define GPIOE_REG_RESET()	do{ ( RCC->AHB1RSTR |= (1 << 4)); ( RCC->AHB1RSTR &= ~(1 << 4)); }while(0)
#define GPIOF_REG_RESET()	do{ ( RCC->AHB1RSTR |= (1 << 5)); ( RCC->AHB1RSTR &= ~(1 << 5)); }while(0)
#define GPIOG_REG_RESET()	do{ ( RCC->AHB1RSTR |= (1 << 6)); ( RCC->AHB1RSTR &= ~(1 << 6)); }while(0)
#define GPIOH_REG_RESET()	do{ ( RCC->AHB1RSTR |= (1 << 7)); ( RCC->AHB1RSTR &= ~(1 << 7)); }while(0)
#define GPIOI_REG_RESET()	do{ ( RCC->AHB1RSTR |= (1 << 8)); ( RCC->AHB1RSTR &= ~(1 << 8)); }while(0)

/*
 * Macro function to code GPIO ports
 * This function returns a code (between 0 to 7) for a given GPIO base address(x)
 */

#define GPIO_BASEADDR_TO_CODE(x)			( (x == GPIOA) ? 0:\
											  (x == GPIOB) ? 1:\
											  (x == GPIOC) ? 2:\
											  (x == GPIOD) ? 3:\
											  (x == GPIOE) ? 4:\
											  (x == GPIOF) ? 5:\
											  (x == GPIOG) ? 6:\
											  (x == GPIOH) ? 7:\
											  (x == GPIOH) ? 8:0 )

/*
 * IRQ (Interrupt request) Numbers of STM32f407x MCU
 */

#define IRQ_NO_EXTI0			6
#define IRQ_NO_EXTI1			7
#define IRQ_NO_EXTI2			8
#define IRQ_NO_EXTI3			9
#define IRQ_NO_EXTI4			10
#define IRQ_NO_EXTI9_5			23
#define IRQ_NO_EXTI15_10		40

/*
 * IRQ priority codes
 */

#define NVIC_IRQ_PRI0			0
#define NVIC_IRQ_PRI15			15


/*
 * Generic Macros
 */

#define ENABLE 				1
#define DISABLE 			0
#define SET 				ENABLE
#define RESET 				DISABLE
#define GPIO_PIN_SET		SET
#define GPIO_PIN_RESET		RESET


#include "stm32f407_gpio_driver.h"

#endif /* INC_STM32F407XX_H_ */























