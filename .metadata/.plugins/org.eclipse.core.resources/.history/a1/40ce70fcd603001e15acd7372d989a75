/*
 * 006spi_tx_testing.c
 *
 *  Created on: 27 may. 2023
 *      Author: rafae
 */
/*
 * GPIOs used as SPI pins:
 * 	- PB12 --> SPI_NSS
 * 	- PB13 --> SPI_SCLK
 * 	- PB14 --> SPI_MISO
 * 	- PB15 --> SPI_MOSI
 * Alt function mode -- > 5
 */

#include "stm32f407xx.h"
#include <string.h>

void delay(void){
	for (uint32_t i = 0; i < 500000/2; i++);
}

void SPI2_GPIOInit(){

	GPIO_Handle_t SPIHandle;

	SPIHandle.pGPIOx = GPIOB;
	SPIHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	SPIHandle.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	SPIHandle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
	SPIHandle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
	SPIHandle.GPIO_PinConfig.GPIO_PinAltFunMode = 5;

	// SPI_NSS
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	GPIO_Init(&SPIHandle);

	// SPI_SCLK
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
	GPIO_Init(&SPIHandle);

	/********************* Not used for this application ********************/
	// SPI_MISO
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	GPIO_Init(&SPIHandle);

	// SPI_MOSI
	SPIHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
	GPIO_Init(&SPIHandle);


}

void SPI2_Inits(){

	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_MODE_MASTER;
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_FULL_DUPLEX;
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // generates a clock of 2MHz
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8_BITS;
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
	SPI2Handle.SPIConfig.SPI_CPAH = SPI_CPAH_1ST_EDGE;
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DISABLE; // Hardware slave management enabled for NSS pin

	SPI_Init(&SPI2Handle);

}


int main(){

	uint8_t dummy_write = 0xFF; // for 16bit DFF we have to use 2 bytes 0xFFFF

	/* Initialise pin working in an interrupt mode */
	Slave_GPIO_InterruptPinInit();

	/* Initialise GPIO pins to behave as SPI pin */
	SPI2_GPIOInit();

	/* Configure SPI2 pins */
	SPI2_Inits();

	/* Enable SSOE bit */
	SPI2_SSOE_ENDI(ENABLE);

	while(1){
		// Wait until the button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));

		delay();

		/* Enable SPI2 peripheral. SPE bit */
		SPI2_CONTROL(ENABLE);



		/*
		 * 1. CMD_LED_CTRL  <pin no(1)>    <value(1)>
		 */

		uint8_t cmdCode = COMMAND_LED_CTRL;
		uint8_t ackbyte;
		uint8_t args[2];

		SPI_SendData(SPI2, &cmdCode, 1);
		// Clear RXNE bit
		SPI_ReceiveData(SPI2,&dummy_read,1); // We send some data and then we expect data in return so
											  // in order to clear RXNE we read those bits

		// In order to get a response from Slave we need to send a "dummy_write" of data.
		// This is how shift registers work, Slave put some data on shift register (Tx buffer)
		// then the Master sends a "dummy_write" to move that data out of the sift register
		SPI_SendData(SPI2, &dummy_write, 1);

		// Read ack byte received
		SPI_ReceiveData(SPI2, &ackbyte, 1);

		// Function to verify if the ack byte is valid or not
		if( SPI_VerifyRespons(ackbyte) ){
			args[0] = LED_PIN;
			args[1] = LED_ON;
			SPI_SendData(SPI2, args, 2);
		}



		/*
		 * 2. CMD_SENSOR_READ 		<analog pin number(1)>
		 */
		// Wait until the button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));

		delay();

		cmdCode = COMMAND_SENSOR_READ;
		SPI_SendData(SPI2, &cmdCode, 1);
		SPI_ReceiveData(SPI2,&dummy_read,1);

		// Read ack byte received
		SPI_SendData(SPI2, &dummy_write, 1);
		SPI_ReceiveData(SPI2, &ackbyte, 1);

		// Function to verify if the ack byte is valid or not
		if( SPI_VerifyRespons(ackbyte) ){
			args[0] = ANALOG_PIN0;
			SPI_SendData(SPI2, args, 1);
			SPI_ReceiveData(SPI2,&dummy_read,1);

			// Inserted some delay so that salve can be ready with the data
			delay();

			SPI_SendData(SPI2, &dummy_write, 1);

			// Get the data on analog pin 0
			uint8_t analog_read;
			SPI_ReceiveData(SPI2,&analog_read,1);

		}



		/*
		 * 3. CMD_LED_READ 		<pin number(1)>
		 */
		// Wait until the button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));

		delay();

		cmdCode = COMMAND_LED_READ;
		SPI_SendData(SPI2, &cmdCode, 1);
		SPI_ReceiveData(SPI2,&dummy_read,1);

		// Read ack byte received
		SPI_SendData(SPI2, &dummy_write, 1);
		SPI_ReceiveData(SPI2, &ackbyte, 1);

		// Function to verify if the ack byte is valid or not
		if( SPI_VerifyRespons(ackbyte) ){
			args[0] = LED_PIN;
			SPI_SendData(SPI2, args, 1);
			SPI_ReceiveData(SPI2,&dummy_read,1);

			// Inserted some delay so that salve can be ready with the data
			delay();

			// Get the data on LED pin
			SPI_SendData(SPI2, &dummy_write, 1);
			uint8_t LED_read;
			SPI_ReceiveData(SPI2,&LED_read,1);

		}



		/*
		 * 4. CMD_PRINT 		<len> 		<message>
		 */
		// Wait until the button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));

		delay();

		cmdCode = COMMAND_PRINT;
		SPI_SendData(SPI2, &cmdCode, 1);
		SPI_ReceiveData(SPI2,&dummy_read,1);

		// Read ack byte received
		SPI_SendData(SPI2, &dummy_write, 1);
		SPI_ReceiveData(SPI2, &ackbyte, 1);

		// Function to verify if the ack byte is valid or not
		if( SPI_VerifyRespons(ackbyte) ){
			char message[] = "Spain";
			uint8_t message_len = strlen(message);

			// Send length of user data
			SPI_SendData(SPI2, &message_len, 1);
			SPI_ReceiveData(SPI2,&dummy_read,1);

			// Inserted some delay so that salve can be ready with the data
			delay();

			// Send user data
			// We send this byte by byte because at the same time we send a byte the buffer
			// (SPI_DR) has to be empty so that's why we "read" the returned dummy byte, to clear
			// the register
			for(int i = 0 ; i < message_len ; i++){
				SPI_SendData(SPI2,(uint8_t *)&message[i],1);
				SPI_ReceiveData(SPI2,&dummy_read,1);
			}
		}



		/*
		 * 5. CMD_ID_READ
		 */
		// Wait until the button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));

		delay();

		cmdCode = COMMAND_ID_READ;
		SPI_SendData(SPI2, &cmdCode, 1);
		SPI_ReceiveData(SPI2,&dummy_read,1);

		// Read ack byte received
		SPI_SendData(SPI2, &dummy_write, 1);
		SPI_ReceiveData(SPI2, &ackbyte, 1);

		uint8_t id[11];
		uint32_t i=0;

		// Function to verify if the ack byte is valid or not
		if( SPI_VerifyRespons(ackbyte) ){
			// Get the 10 bytes of data
			SPI_SendData(SPI2, &dummy_write, 10);
			uint32_t message10;
			SPI_ReceiveData(SPI2,(uint8_t *)&message10,10);

		}

		//read 10 bytes id from the slave
		for(  i = 0 ; i < 10 ; i++)
		{
			//send dummy byte to fetch data from slave
			SPI_SendData(SPI2,&dummy_write,1);
			SPI_ReceiveData(SPI2,&id[i],1);
		}

		/* Confirm that SPI is not busy and all the data is transferred */
		while( SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG) );

		/* Disable SPI2 peripheral */
		SPI2_CONTROL(DISABLE);

	}

	return 0;
}
